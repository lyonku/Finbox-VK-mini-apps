{"ast":null,"code":"import _classCallCheck from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { ReCaptchaV3Provider, ReCaptchaEnterpriseProvider, CustomProvider, initializeAppCheck, setTokenAutoRefreshEnabled as _setTokenAutoRefreshEnabled, getToken as _getToken, onTokenChanged as _onTokenChanged } from '@firebase/app-check';\nimport { ErrorFactory } from '@firebase/util';\nvar name = \"@firebase/app-check-compat\";\nvar version = \"0.2.17\";\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ERRORS = _defineProperty({}, \"use-before-activation\" /* USE_BEFORE_ACTIVATION */, 'App Check is being used before activate() is called for FirebaseApp {$appName}. ' + 'Call activate() before instantiating other Firebase services.');\nvar ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AppCheckService = /*#__PURE__*/function () {\n  function AppCheckService(app) {\n    _classCallCheck(this, AppCheckService);\n    this.app = app;\n  }\n  _createClass(AppCheckService, [{\n    key: \"activate\",\n    value: function activate(siteKeyOrProvider, isTokenAutoRefreshEnabled) {\n      var provider;\n      if (typeof siteKeyOrProvider === 'string') {\n        provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n      } else if (siteKeyOrProvider instanceof ReCaptchaEnterpriseProvider || siteKeyOrProvider instanceof ReCaptchaV3Provider || siteKeyOrProvider instanceof CustomProvider) {\n        provider = siteKeyOrProvider;\n      } else {\n        provider = new CustomProvider({\n          getToken: siteKeyOrProvider.getToken\n        });\n      }\n      this._delegate = initializeAppCheck(this.app, {\n        provider: provider,\n        isTokenAutoRefreshEnabled: isTokenAutoRefreshEnabled\n      });\n    }\n  }, {\n    key: \"setTokenAutoRefreshEnabled\",\n    value: function setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled) {\n      if (!this._delegate) {\n        throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n          appName: this.app.name\n        });\n      }\n      _setTokenAutoRefreshEnabled(this._delegate, isTokenAutoRefreshEnabled);\n    }\n  }, {\n    key: \"getToken\",\n    value: function getToken(forceRefresh) {\n      if (!this._delegate) {\n        throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n          appName: this.app.name\n        });\n      }\n      return _getToken(this._delegate, forceRefresh);\n    }\n  }, {\n    key: \"onTokenChanged\",\n    value: function onTokenChanged(onNextOrObserver, onError, onCompletion) {\n      if (!this._delegate) {\n        throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n          appName: this.app.name\n        });\n      }\n      return _onTokenChanged(this._delegate,\n      /**\r\n       * Exp onTokenChanged() will handle both overloads but we need\r\n       * to specify one to not confuse Typescript.\r\n       */\n      onNextOrObserver, onError, onCompletion);\n    }\n  }]);\n  return AppCheckService;\n}(); /**\r\n      * @license\r\n      * Copyright 2021 Google LLC\r\n      *\r\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n      * you may not use this file except in compliance with the License.\r\n      * You may obtain a copy of the License at\r\n      *\r\n      *   http://www.apache.org/licenses/LICENSE-2.0\r\n      *\r\n      * Unless required by applicable law or agreed to in writing, software\r\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n      * See the License for the specific language governing permissions and\r\n      * limitations under the License.\r\n      */\nvar factory = function factory(container) {\n  // Dependencies\n  var app = container.getProvider('app-compat').getImmediate();\n  return new AppCheckService(app);\n};\nfunction registerAppCheck() {\n  firebase.INTERNAL.registerComponent(new Component('appCheck-compat', factory, \"PUBLIC\" /* PUBLIC */).setServiceProps({\n    ReCaptchaEnterpriseProvider: ReCaptchaEnterpriseProvider,\n    ReCaptchaV3Provider: ReCaptchaV3Provider,\n    CustomProvider: CustomProvider\n  }));\n}\nregisterAppCheck();\nfirebase.registerVersion(name, version);\nexport { registerAppCheck };","map":{"version":3,"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;;AAeG;AAQH,IAAMA,MAAM,uBACV,qDACE,kFAAkF,GAClF,+DAA+D,CAClE;AAMM,IAAMC,aAAa,GAAG,IAAIC,YAAY,CAC3C,UAAU,EACV,UAAU,EACVF,MAAM,CACP;;ACrCD;;;;;;;;;;;;;;;AAeG;AAfH,IAoCaG,eAAe;EAI1B,yBAAmBC,GAAgB;IAAA;IAAhB,IAAG,OAAHA,GAAG;;EAAiB;IAAA;IAAA,OAEvC,kBACEC,iBAA4C,EAC5CC,yBAAmC;MAEnC,IAAIC,QAG2B;MAC/B,IAAI,OAAOF,iBAAiB,KAAK,QAAQ,EAAE;QACzCE,QAAQ,GAAG,IAAIC,mBAAmB,CAACH,iBAAiB,CAAC;MACtD,OAAM,IACLA,iBAAiB,YAAYI,2BAA2B,IACxDJ,iBAAiB,YAAYG,mBAAmB,IAChDH,iBAAiB,YAAYK,cAAc,EAC3C;QACAH,QAAQ,GAAGF,iBAAiB;MAC7B,OAAM;QACLE,QAAQ,GAAG,IAAIG,cAAc,CAAC;UAAEC,QAAQ,EAAEN,iBAAiB,CAACM;QAAQ,CAAE,CAAC;MACxE;MACD,IAAI,CAACC,SAAS,GAAGC,kBAAkB,CAAC,IAAI,CAACT,GAAG,EAAE;QAC5CG,QAAQ,EAARA,QAAQ;QACRD,yBAAyB,EAAzBA;MACD,EAAC;;EACH;IAAA;IAAA,OAED,oCAA2BA,yBAAkC;MAC3D,IAAI,CAAC,IAAI,CAACM,SAAS,EAAE;QACnB,MAAMX,aAAa,CAACa,MAAM,CAAsC;UAC9DC,OAAO,EAAE,IAAI,CAACX,GAAG,CAACY;QACnB,EAAC;MACH;MACDC,2BAA6B,CAAC,IAAI,CAACL,SAAS,EAAEN,yBAAyB,CAAC;;EACzE;IAAA;IAAA,OAED,kBAASY,YAAsB;MAC7B,IAAI,CAAC,IAAI,CAACN,SAAS,EAAE;QACnB,MAAMX,aAAa,CAACa,MAAM,CAAsC;UAC9DC,OAAO,EAAE,IAAI,CAACX,GAAG,CAACY;QACnB,EAAC;MACH;MACD,OAAOG,SAAW,CAAC,IAAI,CAACP,SAAS,EAAEM,YAAY,CAAC;;EACjD;IAAA;IAAA,OAED,wBACEE,gBAEgD,EAChDC,OAAgC,EAChCC,YAAyB;MAEzB,IAAI,CAAC,IAAI,CAACV,SAAS,EAAE;QACnB,MAAMX,aAAa,CAACa,MAAM,CAAsC;UAC9DC,OAAO,EAAE,IAAI,CAACX,GAAG,CAACY;QACnB,EAAC;MACH;MACD,OAAOO,eAAiB,CACtB,IAAI,CAACX,SAAS;MACd;;;AAGG;MACHQ,gBAA8D,EAC9DC,OAAO,EACPC,YAAY,CACb;;EACF;EAAA;AAAA,KC3GH;;;;;;;;;;;;;;;AAeG;AAqBH,IAAME,OAAO,GAAuC,SAA9CA,OAAO,CACXC,SAA6B,EAC3B;;EAEF,IAAMrB,GAAG,GAAGqB,SAAS,CAACC,WAAW,CAAC,YAAY,CAAC,CAACC,YAAY,EAAE;EAE9D,OAAO,IAAIxB,eAAe,CAACC,GAAkB,CAAC;AAChD,CAAC;SAEewB,gBAAgB;EAC7BC,QAA+B,CAACC,QAAQ,CAACC,iBAAiB,CACzD,IAAIC,SAAS,CACX,iBAAiB,EACjBR,OAAO,EAER,uBAACS,eAAe,CAAC;IAChBxB,2BAA2B,EAA3BA,2BAA2B;IAC3BD,mBAAmB,EAAnBA,mBAAmB;IACnBE,cAAc,EAAdA;EACD,EAAC,CACH;AACH;AAEAkB,gBAAgB,EAAE;AAClBC,QAAQ,CAACK,eAAe,CAAClB,IAAI,EAAEmB,OAAO,CAAC","names":["ERRORS","ERROR_FACTORY","ErrorFactory","AppCheckService","app","siteKeyOrProvider","isTokenAutoRefreshEnabled","provider","ReCaptchaV3Provider","ReCaptchaEnterpriseProvider","CustomProvider","getToken","_delegate","initializeAppCheck","create","appName","name","setTokenAutoRefreshEnabledExp","forceRefresh","getTokenExp","onNextOrObserver","onError","onCompletion","onTokenChangedExp","factory","container","getProvider","getImmediate","registerAppCheck","firebase","INTERNAL","registerComponent","Component","setServiceProps","registerVersion","version"],"sources":["../../src/errors.ts","../../src/service.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  USE_BEFORE_ACTIVATION = 'use-before-activation'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before activate() is called for FirebaseApp {$appName}. ' +\n    'Call activate() before instantiating other Firebase services.'\n};\n\ninterface ErrorParams {\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckProvider,\n  AppCheckTokenResult,\n  FirebaseAppCheck\n} from '@firebase/app-check-types';\nimport { _FirebaseService, FirebaseApp } from '@firebase/app-compat';\nimport {\n  AppCheck as AppCheckServiceExp,\n  CustomProvider,\n  initializeAppCheck,\n  ReCaptchaV3Provider,\n  ReCaptchaEnterpriseProvider,\n  setTokenAutoRefreshEnabled as setTokenAutoRefreshEnabledExp,\n  getToken as getTokenExp,\n  onTokenChanged as onTokenChangedExp\n} from '@firebase/app-check';\nimport { PartialObserver, Unsubscribe } from '@firebase/util';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\n\nexport class AppCheckService\n  implements FirebaseAppCheck, Omit<_FirebaseService, '_delegate'>\n{\n  _delegate?: AppCheckServiceExp;\n  constructor(public app: FirebaseApp) {}\n\n  activate(\n    siteKeyOrProvider: string | AppCheckProvider,\n    isTokenAutoRefreshEnabled?: boolean\n  ): void {\n    let provider:\n      | ReCaptchaV3Provider\n      | CustomProvider\n      | ReCaptchaEnterpriseProvider;\n    if (typeof siteKeyOrProvider === 'string') {\n      provider = new ReCaptchaV3Provider(siteKeyOrProvider);\n    } else if (\n      siteKeyOrProvider instanceof ReCaptchaEnterpriseProvider ||\n      siteKeyOrProvider instanceof ReCaptchaV3Provider ||\n      siteKeyOrProvider instanceof CustomProvider\n    ) {\n      provider = siteKeyOrProvider;\n    } else {\n      provider = new CustomProvider({ getToken: siteKeyOrProvider.getToken });\n    }\n    this._delegate = initializeAppCheck(this.app, {\n      provider,\n      isTokenAutoRefreshEnabled\n    });\n  }\n\n  setTokenAutoRefreshEnabled(isTokenAutoRefreshEnabled: boolean): void {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    setTokenAutoRefreshEnabledExp(this._delegate, isTokenAutoRefreshEnabled);\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    return getTokenExp(this._delegate, forceRefresh);\n  }\n\n  onTokenChanged(\n    onNextOrObserver:\n      | PartialObserver<AppCheckTokenResult>\n      | ((tokenResult: AppCheckTokenResult) => void),\n    onError?: (error: Error) => void,\n    onCompletion?: () => void\n  ): Unsubscribe {\n    if (!this._delegate) {\n      throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n        appName: this.app.name\n      });\n    }\n    return onTokenChangedExp(\n      this._delegate,\n      /**\n       * Exp onTokenChanged() will handle both overloads but we need\n       * to specify one to not confuse Typescript.\n       */\n      onNextOrObserver as (tokenResult: AppCheckTokenResult) => void,\n      onError,\n      onCompletion\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, {\n  _FirebaseNamespace,\n  FirebaseApp\n} from '@firebase/app-compat';\nimport { name, version } from '../package.json';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactory\n} from '@firebase/component';\nimport { AppCheckService } from './service';\nimport { FirebaseAppCheck } from '@firebase/app-check-types';\nimport {\n  ReCaptchaV3Provider,\n  ReCaptchaEnterpriseProvider,\n  CustomProvider\n} from '@firebase/app-check';\n\nconst factory: InstanceFactory<'appCheck-compat'> = (\n  container: ComponentContainer\n) => {\n  // Dependencies\n  const app = container.getProvider('app-compat').getImmediate();\n\n  return new AppCheckService(app as FirebaseApp);\n};\n\nexport function registerAppCheck(): void {\n  (firebase as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'appCheck-compat',\n      factory,\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      ReCaptchaEnterpriseProvider,\n      ReCaptchaV3Provider,\n      CustomProvider\n    })\n  );\n}\n\nregisterAppCheck();\nfirebase.registerVersion(name, version);\n\n/**\n * Define extension behavior of `registerAppCheck`\n */\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    appCheck(app?: FirebaseApp): FirebaseAppCheck;\n  }\n  interface FirebaseApp {\n    appCheck(): FirebaseAppCheck;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}