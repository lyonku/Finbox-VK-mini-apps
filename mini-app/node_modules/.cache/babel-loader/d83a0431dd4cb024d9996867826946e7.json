{"ast":null,"code":"import _toConsumableArray from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { _registerComponent, registerVersion, _getProvider, getApp } from '@firebase/app';\nimport { FirebaseError, getModularInstance, getDefaultEmulatorHostnameAndPort } from '@firebase/util';\nimport { Component } from '@firebase/component';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nvar UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\nfunction mapValues(\n// { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  var result = {};\n  for (var key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n/**\r\n * Takes data and encodes it in a JSON-friendly way, such that types such as\r\n * Date are preserved.\r\n * @internal\r\n * @param data - Data to encode.\r\n */\nfunction encode(data) {\n  if (data == null) {\n    return null;\n  }\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n  if (data === true || data === false) {\n    return data;\n  }\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n  if (Array.isArray(data)) {\n    return data.map(function (x) {\n      return encode(x);\n    });\n  }\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data, function (x) {\n      return encode(x);\n    });\n  }\n  // If we got this far, the data is not encodable.\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n/**\r\n * Takes data that's been encoded in a JSON-friendly form and returns a form\r\n * with richer datatypes, such as Dates, etc.\r\n * @internal\r\n * @param json - JSON to convert.\r\n */\nfunction decode(json) {\n  if (json == null) {\n    return json;\n  }\n  if (json['@type']) {\n    switch (json['@type']) {\n      case LONG_TYPE:\n      // Fall through and handle this the same as unsigned.\n      case UNSIGNED_LONG_TYPE:\n        {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          var value = Number(json['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n      default:\n        {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n    }\n  }\n  if (Array.isArray(json)) {\n    return json.map(function (x) {\n      return decode(x);\n    });\n  }\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json, function (x) {\n      return decode(x);\n    });\n  }\n  // Anything else is safe to return.\n  return json;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Type constant for Firebase Functions.\r\n */\nvar FUNCTIONS_TYPE = 'functions';\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\nvar errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\nvar FunctionsError = /*#__PURE__*/function (_FirebaseError) {\n  _inherits(FunctionsError, _FirebaseError);\n  var _super = _createSuper(FunctionsError);\n  function FunctionsError(\n  /**\r\n   * A standard error code that will be returned to the client. This also\r\n   * determines the HTTP status code of the response, as defined in code.proto.\r\n   */\n  code, message,\n  /**\r\n   * Extra data to be converted to JSON and included in the error response.\r\n   */\n  details) {\n    var _this;\n    _classCallCheck(this, FunctionsError);\n    _this = _super.call(this, \"\".concat(FUNCTIONS_TYPE, \"/\").concat(code), message || '');\n    _this.details = details;\n    return _this;\n  }\n  return _createClass(FunctionsError);\n}(FirebaseError); /**\r\n                   * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n                   * This is the standard HTTP status code -> error mapping defined in:\r\n                   * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n                   *\r\n                   * @param status An HTTP status code.\r\n                   * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n                   */\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n  }\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\nfunction _errorForResponse(status, bodyJSON) {\n  var code = codeForHTTPStatus(status);\n  // Start with reasonable defaults from the status code.\n  var description = code;\n  var details = undefined;\n  // Then look through the body for explicit details.\n  try {\n    var errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      var _status = errorJSON.status;\n      if (typeof _status === 'string') {\n        if (!errorCodeMap[_status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n        code = errorCodeMap[_status];\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = _status;\n      }\n      var message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n  return new FunctionsError(code, description, details);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n * @internal\r\n */\nvar ContextProvider = /*#__PURE__*/function () {\n  function ContextProvider(authProvider, messagingProvider, appCheckProvider) {\n    var _this2 = this;\n    _classCallCheck(this, ContextProvider);\n    this.auth = null;\n    this.messaging = null;\n    this.appCheck = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n    if (!this.auth) {\n      authProvider.get().then(function (auth) {\n        return _this2.auth = auth;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n    if (!this.messaging) {\n      messagingProvider.get().then(function (messaging) {\n        return _this2.messaging = messaging;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n    if (!this.appCheck) {\n      appCheckProvider.get().then(function (appCheck) {\n        return _this2.appCheck = appCheck;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n  }\n  _createClass(ContextProvider, [{\n    key: \"getAuthToken\",\n    value: function () {\n      var _getAuthToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var token;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.auth) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\", undefined);\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return this.auth.getToken();\n              case 5:\n                token = _context.sent;\n                return _context.abrupt(\"return\", token === null || token === void 0 ? void 0 : token.accessToken);\n              case 9:\n                _context.prev = 9;\n                _context.t0 = _context[\"catch\"](2);\n                return _context.abrupt(\"return\", undefined);\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n      function getAuthToken() {\n        return _getAuthToken.apply(this, arguments);\n      }\n      return getAuthToken;\n    }()\n  }, {\n    key: \"getMessagingToken\",\n    value: function () {\n      var _getMessagingToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!this.messaging || !('Notification' in self) || Notification.permission !== 'granted')) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\", undefined);\n              case 2:\n                _context2.prev = 2;\n                _context2.next = 5;\n                return this.messaging.getToken();\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](2);\n                return _context2.abrupt(\"return\", undefined);\n              case 11:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[2, 8]]);\n      }));\n      function getMessagingToken() {\n        return _getMessagingToken.apply(this, arguments);\n      }\n      return getMessagingToken;\n    }()\n  }, {\n    key: \"getAppCheckToken\",\n    value: function () {\n      var _getAppCheckToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.appCheck) {\n                  _context3.next = 7;\n                  break;\n                }\n                _context3.next = 3;\n                return this.appCheck.getToken();\n              case 3:\n                result = _context3.sent;\n                if (!result.error) {\n                  _context3.next = 6;\n                  break;\n                }\n                return _context3.abrupt(\"return\", null);\n              case 6:\n                return _context3.abrupt(\"return\", result.token);\n              case 7:\n                return _context3.abrupt(\"return\", null);\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n      function getAppCheckToken() {\n        return _getAppCheckToken.apply(this, arguments);\n      }\n      return getAppCheckToken;\n    }()\n  }, {\n    key: \"getContext\",\n    value: function () {\n      var _getContext = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var authToken, messagingToken, appCheckToken;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getAuthToken();\n              case 2:\n                authToken = _context4.sent;\n                _context4.next = 5;\n                return this.getMessagingToken();\n              case 5:\n                messagingToken = _context4.sent;\n                _context4.next = 8;\n                return this.getAppCheckToken();\n              case 8:\n                appCheckToken = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  authToken: authToken,\n                  messagingToken: messagingToken,\n                  appCheckToken: appCheckToken\n                });\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n      function getContext() {\n        return _getContext.apply(this, arguments);\n      }\n      return getContext;\n    }()\n  }]);\n  return ContextProvider;\n}(); /**\r\n      * @license\r\n      * Copyright 2017 Google LLC\r\n      *\r\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n      * you may not use this file except in compliance with the License.\r\n      * You may obtain a copy of the License at\r\n      *\r\n      *   http://www.apache.org/licenses/LICENSE-2.0\r\n      *\r\n      * Unless required by applicable law or agreed to in writing, software\r\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n      * See the License for the specific language governing permissions and\r\n      * limitations under the License.\r\n      */\nvar DEFAULT_REGION = 'us-central1';\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type FunctionsError.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\nfunction failAfter(millis) {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var timer = null;\n  return {\n    promise: new Promise(function (_, reject) {\n      timer = setTimeout(function () {\n        reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n      }, millis);\n    }),\n    cancel: function cancel() {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n * @internal\r\n */\nvar FunctionsService = /*#__PURE__*/function () {\n  /**\r\n   * Creates a new Functions service for the given app.\r\n   * @param app - The FirebaseApp to use.\r\n   */\n  function FunctionsService(app, authProvider, messagingProvider, appCheckProvider) {\n    var _this3 = this;\n    var regionOrCustomDomain = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DEFAULT_REGION;\n    var fetchImpl = arguments.length > 5 ? arguments[5] : undefined;\n    _classCallCheck(this, FunctionsService);\n    this.app = app;\n    this.fetchImpl = fetchImpl;\n    this.emulatorOrigin = null;\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider, appCheckProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(function (resolve) {\n      _this3.deleteService = function () {\n        return Promise.resolve(resolve());\n      };\n    });\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      var url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n  _createClass(FunctionsService, [{\n    key: \"_delete\",\n    value: function _delete() {\n      return this.deleteService();\n    }\n    /**\r\n     * Returns the URL for a callable with the given name.\r\n     * @param name - The name of the callable.\r\n     * @internal\r\n     */\n  }, {\n    key: \"_url\",\n    value: function _url(name) {\n      var projectId = this.app.options.projectId;\n      if (this.emulatorOrigin !== null) {\n        var origin = this.emulatorOrigin;\n        return \"\".concat(origin, \"/\").concat(projectId, \"/\").concat(this.region, \"/\").concat(name);\n      }\n      if (this.customDomain !== null) {\n        return \"\".concat(this.customDomain, \"/\").concat(name);\n      }\n      return \"https://\".concat(this.region, \"-\").concat(projectId, \".cloudfunctions.net/\").concat(name);\n    }\n  }]);\n  return FunctionsService;\n}(); /**\r\n      * Modify this instance to communicate with the Cloud Functions emulator.\r\n      *\r\n      * Note: this must be called before this instance has been used to do any operations.\r\n      *\r\n      * @param host The emulator host (ex: localhost)\r\n      * @param port The emulator port (ex: 5001)\r\n      * @public\r\n      */\nfunction connectFunctionsEmulator$1(functionsInstance, host, port) {\n  functionsInstance.emulatorOrigin = \"http://\".concat(host, \":\").concat(port);\n}\n/**\r\n * Returns a reference to the callable https trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\nfunction httpsCallable$1(functionsInstance, name, options) {\n  return function (data) {\n    return call(functionsInstance, name, data, options || {});\n  };\n}\n/**\r\n * Returns a reference to the callable https trigger with the given url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\nfunction httpsCallableFromURL$1(functionsInstance, url, options) {\n  return function (data) {\n    return callAtURL(functionsInstance, url, data, options || {});\n  };\n}\n/**\r\n * Does an HTTP POST and returns the completed response.\r\n * @param url The url to post to.\r\n * @param body The JSON body of the post.\r\n * @param headers The HTTP headers to include in the request.\r\n * @return A Promise that will succeed when the request finishes.\r\n */\nfunction postJSON(_x, _x2, _x3, _x4) {\n  return _postJSON.apply(this, arguments);\n} /**\r\n   * Calls a callable function asynchronously and returns the result.\r\n   * @param name The name of the callable trigger.\r\n   * @param data The data to pass as params to the function.s\r\n   */\nfunction _postJSON() {\n  _postJSON = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(url, body, headers, fetchImpl) {\n    var response, json;\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            headers['Content-Type'] = 'application/json';\n            _context5.prev = 1;\n            _context5.next = 4;\n            return fetchImpl(url, {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            });\n          case 4:\n            response = _context5.sent;\n            _context5.next = 10;\n            break;\n          case 7:\n            _context5.prev = 7;\n            _context5.t0 = _context5[\"catch\"](1);\n            return _context5.abrupt(\"return\", {\n              status: 0,\n              json: null\n            });\n          case 10:\n            json = null;\n            _context5.prev = 11;\n            _context5.next = 14;\n            return response.json();\n          case 14:\n            json = _context5.sent;\n            _context5.next = 19;\n            break;\n          case 17:\n            _context5.prev = 17;\n            _context5.t1 = _context5[\"catch\"](11);\n          case 19:\n            return _context5.abrupt(\"return\", {\n              status: response.status,\n              json: json\n            });\n          case 20:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[1, 7], [11, 17]]);\n  }));\n  return _postJSON.apply(this, arguments);\n}\nfunction call(functionsInstance, name, data, options) {\n  var url = functionsInstance._url(name);\n  return callAtURL(functionsInstance, url, data, options);\n}\n/**\r\n * Calls a callable function asynchronously and returns the result.\r\n * @param url The url of the callable trigger.\r\n * @param data The data to pass as params to the function.s\r\n */\nfunction callAtURL(_x5, _x6, _x7, _x8) {\n  return _callAtURL.apply(this, arguments);\n}\nfunction _callAtURL() {\n  _callAtURL = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(functionsInstance, url, data, options) {\n    var body, headers, context, timeout, failAfterHandle, response, error, responseData, decodedData;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            // Encode any special types, such as dates, in the input data.\n            data = encode(data);\n            body = {\n              data: data\n            }; // Add a header for the authToken.\n            headers = {};\n            _context6.next = 5;\n            return functionsInstance.contextProvider.getContext();\n          case 5:\n            context = _context6.sent;\n            if (context.authToken) {\n              headers['Authorization'] = 'Bearer ' + context.authToken;\n            }\n            if (context.messagingToken) {\n              headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n            }\n            if (context.appCheckToken !== null) {\n              headers['X-Firebase-AppCheck'] = context.appCheckToken;\n            }\n            // Default timeout to 70s, but let the options override it.\n            timeout = options.timeout || 70000;\n            failAfterHandle = failAfter(timeout);\n            _context6.next = 13;\n            return Promise.race([postJSON(url, body, headers, functionsInstance.fetchImpl), failAfterHandle.promise, functionsInstance.cancelAllRequests]);\n          case 13:\n            response = _context6.sent;\n            // Always clear the failAfter timeout\n            failAfterHandle.cancel();\n            // If service was deleted, interrupted response throws an error.\n            if (response) {\n              _context6.next = 17;\n              break;\n            }\n            throw new FunctionsError('cancelled', 'Firebase Functions instance was deleted.');\n          case 17:\n            // Check for an error status, regardless of http status.\n            error = _errorForResponse(response.status, response.json);\n            if (!error) {\n              _context6.next = 20;\n              break;\n            }\n            throw error;\n          case 20:\n            if (response.json) {\n              _context6.next = 22;\n              break;\n            }\n            throw new FunctionsError('internal', 'Response is not valid JSON object.');\n          case 22:\n            responseData = response.json.data; // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n            // backwards compatibility.\n            if (typeof responseData === 'undefined') {\n              responseData = response.json.result;\n            }\n            if (!(typeof responseData === 'undefined')) {\n              _context6.next = 26;\n              break;\n            }\n            throw new FunctionsError('internal', 'Response is missing data field.');\n          case 26:\n            // Decode any special types, such as dates, in the returned data.\n            decodedData = decode(responseData);\n            return _context6.abrupt(\"return\", {\n              data: decodedData\n            });\n          case 28:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _callAtURL.apply(this, arguments);\n}\nvar name = \"@firebase/functions\";\nvar version = \"0.8.8\";\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AUTH_INTERNAL_NAME = 'auth-internal';\nvar APP_CHECK_INTERNAL_NAME = 'app-check-internal';\nvar MESSAGING_INTERNAL_NAME = 'messaging-internal';\nfunction registerFunctions(fetchImpl, variant) {\n  var factory = function factory(container, _ref) {\n    var regionOrCustomDomain = _ref.instanceIdentifier;\n    // Dependencies\n    var app = container.getProvider('app').getImmediate();\n    var authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    var messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    var appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new FunctionsService(app, authProvider, messagingProvider, appCheckProvider, regionOrCustomDomain, fetchImpl);\n  };\n  _registerComponent(new Component(FUNCTIONS_TYPE, factory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true));\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a {@link Functions} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param regionOrCustomDomain - one of:\r\n *   a) The region the callable functions are located in (ex: us-central1)\r\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\r\n * @public\r\n */\nfunction getFunctions() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var regionOrCustomDomain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_REGION;\n  // Dependencies\n  var functionsProvider = _getProvider(getModularInstance(app), FUNCTIONS_TYPE);\n  var functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  var emulator = getDefaultEmulatorHostnameAndPort('functions');\n  if (emulator) {\n    connectFunctionsEmulator.apply(void 0, [functionsInstance].concat(_toConsumableArray(emulator)));\n  }\n  return functionsInstance;\n}\n/**\r\n * Modify this instance to communicate with the Cloud Functions emulator.\r\n *\r\n * Note: this must be called before this instance has been used to do any operations.\r\n *\r\n * @param host - The emulator host (ex: localhost)\r\n * @param port - The emulator port (ex: 5001)\r\n * @public\r\n */\nfunction connectFunctionsEmulator(functionsInstance, host, port) {\n  connectFunctionsEmulator$1(getModularInstance(functionsInstance), host, port);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the given name.\r\n * @param name - The name of the trigger.\r\n * @public\r\n */\nfunction httpsCallable(functionsInstance, name, options) {\n  return httpsCallable$1(getModularInstance(functionsInstance), name, options);\n}\n/**\r\n * Returns a reference to the callable HTTPS trigger with the specified url.\r\n * @param url - The url of the trigger.\r\n * @public\r\n */\nfunction httpsCallableFromURL(functionsInstance, url, options) {\n  return httpsCallableFromURL$1(getModularInstance(functionsInstance), url, options);\n}\n\n/**\r\n * Cloud Functions for Firebase\r\n *\r\n * @packageDocumentation\r\n */\nregisterFunctions(fetch.bind(self));\nexport { connectFunctionsEmulator, getFunctions, httpsCallable, httpsCallableFromURL };","map":{"version":3,"mappings":"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","names":["LONG_TYPE","UNSIGNED_LONG_TYPE","mapValues","o","f","result","key","hasOwnProperty","encode","data","Number","valueOf","isFinite","Object","prototype","toString","call","Date","toISOString","Array","isArray","map","x","Error","decode","json","value","isNaN","FUNCTIONS_TYPE","errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","FunctionsError","code","message","details","FirebaseError","codeForHTTPStatus","status","bodyJSON","description","undefined","errorJSON","error","e","ContextProvider","authProvider","messagingProvider","appCheckProvider","auth","getImmediate","optional","messaging","get","then","appCheck","getToken","token","accessToken","self","Notification","permission","getAuthToken","authToken","getMessagingToken","messagingToken","getAppCheckToken","appCheckToken","DEFAULT_REGION","failAfter","millis","timer","promise","Promise","_","reject","setTimeout","cancel","clearTimeout","FunctionsService","app","regionOrCustomDomain","fetchImpl","contextProvider","cancelAllRequests","deleteService","resolve","url","URL","customDomain","origin","region","name","projectId","options","emulatorOrigin","connectFunctionsEmulator","functionsInstance","host","port","httpsCallable","httpsCallableFromURL","callAtURL","postJSON","body","headers","method","JSON","stringify","response","_url","getContext","context","timeout","failAfterHandle","race","_errorForResponse","responseData","decodedData","AUTH_INTERNAL_NAME","APP_CHECK_INTERNAL_NAME","MESSAGING_INTERNAL_NAME","variant","factory","container","instanceIdentifier","getProvider","_registerComponent","Component","setMultipleInstances","registerVersion","version","getFunctions","getApp","functionsProvider","_getProvider","getModularInstance","identifier","emulator","getDefaultEmulatorHostnameAndPort","_connectFunctionsEmulator","_httpsCallable","_httpsCallableFromURL","registerFunctions","fetch","bind"],"sources":["../src/serializer.ts","../src/constants.ts","../src/error.ts","../src/context.ts","../src/service.ts","../src/config.ts","../src/api.ts","../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\n/**\n * Takes data and encodes it in a JSON-friendly way, such that types such as\n * Date are preserved.\n * @internal\n * @param data - Data to encode.\n */\nexport function encode(data: unknown): unknown {\n  if (data == null) {\n    return null;\n  }\n  if (data instanceof Number) {\n    data = data.valueOf();\n  }\n  if (typeof data === 'number' && isFinite(data)) {\n    // Any number in JS is safe to put directly in JSON and parse as a double\n    // without any loss of precision.\n    return data;\n  }\n  if (data === true || data === false) {\n    return data;\n  }\n  if (Object.prototype.toString.call(data) === '[object String]') {\n    return data;\n  }\n  if (data instanceof Date) {\n    return data.toISOString();\n  }\n  if (Array.isArray(data)) {\n    return data.map(x => encode(x));\n  }\n  if (typeof data === 'function' || typeof data === 'object') {\n    return mapValues(data!, x => encode(x));\n  }\n  // If we got this far, the data is not encodable.\n  throw new Error('Data cannot be encoded in JSON: ' + data);\n}\n\n/**\n * Takes data that's been encoded in a JSON-friendly form and returns a form\n * with richer datatypes, such as Dates, etc.\n * @internal\n * @param json - JSON to convert.\n */\nexport function decode(json: unknown): unknown {\n  if (json == null) {\n    return json;\n  }\n  if ((json as { [key: string]: unknown })['@type']) {\n    switch ((json as { [key: string]: unknown })['@type']) {\n      case LONG_TYPE:\n      // Fall through and handle this the same as unsigned.\n      case UNSIGNED_LONG_TYPE: {\n        // Technically, this could work return a valid number for malformed\n        // data if there was a number followed by garbage. But it's just not\n        // worth all the extra code to detect that case.\n        const value = Number((json as { [key: string]: unknown })['value']);\n        if (isNaN(value)) {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n        return value;\n      }\n      default: {\n        throw new Error('Data cannot be decoded from JSON: ' + json);\n      }\n    }\n  }\n  if (Array.isArray(json)) {\n    return json.map(x => decode(x));\n  }\n  if (typeof json === 'function' || typeof json === 'object') {\n    return mapValues(json!, x => decode(x));\n  }\n  // Anything else is safe to return.\n  return json;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Type constant for Firebase Functions.\n */\nexport const FUNCTIONS_TYPE = 'functions';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FunctionsErrorCodeCore as FunctionsErrorCode } from './public-types';\nimport { decode } from './serializer';\nimport { HttpResponseBody } from './service';\nimport { FirebaseError } from '@firebase/util';\nimport { FUNCTIONS_TYPE } from './constants';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class FunctionsError extends FirebaseError {\n  constructor(\n    /**\n     * A standard error code that will be returned to the client. This also\n     * determines the HTTP status code of the response, as defined in code.proto.\n     */\n    code: FunctionsErrorCode,\n    message?: string,\n    /**\n     * Extra data to be converted to JSON and included in the error response.\n     */\n    readonly details?: unknown\n  ) {\n    super(`${FUNCTIONS_TYPE}/${code}`, message || '');\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new FunctionsError('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new FunctionsError(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from '@firebase/component';\nimport {\n  AppCheckInternalComponentName,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport {\n  MessagingInternal,\n  MessagingInternalComponentName\n} from '@firebase/messaging-interop-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\n\n/**\n * The metadata that should be supplied with function calls.\n * @internal\n */\nexport interface Context {\n  authToken?: string;\n  messagingToken?: string;\n  appCheckToken: string | null;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n * @internal\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: MessagingInternal | null = null;\n  private appCheck: FirebaseAppCheckInternal | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<MessagingInternalComponentName>,\n    appCheckProvider: Provider<AppCheckInternalComponentName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.appCheck) {\n      appCheckProvider.get().then(\n        appCheck => (this.appCheck = appCheck),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      return token?.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getMessagingToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return await this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getAppCheckToken(): Promise<string | null> {\n    if (this.appCheck) {\n      const result = await this.appCheck.getToken();\n      if (result.error) {\n        // Do not send the App Check header to the functions endpoint if\n        // there was an error from the App Check exchange endpoint. The App\n        // Check SDK will already have logged the error to console.\n        return null;\n      }\n      return result.token;\n    }\n    return null;\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const messagingToken = await this.getMessagingToken();\n    const appCheckToken = await this.getAppCheckToken();\n    return { authToken, messagingToken, appCheckToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport {\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from './public-types';\nimport { _errorForResponse, FunctionsError } from './error';\nimport { ContextProvider } from './context';\nimport { encode, decode } from './serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { MessagingInternalComponentName } from '@firebase/messaging-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\n\nexport const DEFAULT_REGION = 'us-central1';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\ninterface CancellablePromise<T> {\n  promise: Promise<T>;\n  cancel: () => void;\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type FunctionsError.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(millis: number): CancellablePromise<never> {\n  // Node timers and browser timers are fundamentally incompatible, but we\n  // don't care about the value here\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timer: any | null = null;\n  return {\n    promise: new Promise((_, reject) => {\n      timer = setTimeout(() => {\n        reject(new FunctionsError('deadline-exceeded', 'deadline-exceeded'));\n      }, millis);\n    }),\n    cancel: () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    }\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n * @internal\n */\nexport class FunctionsService implements _FirebaseService {\n  readonly contextProvider: ContextProvider;\n  emulatorOrigin: string | null = null;\n  cancelAllRequests: Promise<void>;\n  deleteService!: () => Promise<void>;\n  region: string;\n  customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app.\n   * @param app - The FirebaseApp to use.\n   */\n  constructor(\n    readonly app: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<MessagingInternalComponentName>,\n    appCheckProvider: Provider<AppCheckInternalComponentName>,\n    regionOrCustomDomain: string = DEFAULT_REGION,\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(\n      authProvider,\n      messagingProvider,\n      appCheckProvider\n    );\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return Promise.resolve(resolve());\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain);\n      this.customDomain = url.origin;\n      this.region = DEFAULT_REGION;\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain;\n    }\n  }\n\n  _delete(): Promise<void> {\n    return this.deleteService();\n  }\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name - The name of the callable.\n   * @internal\n   */\n  _url(name: string): string {\n    const projectId = this.app.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n}\n\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host The emulator host (ex: localhost)\n * @param port The emulator port (ex: 5001)\n * @public\n */\nexport function connectFunctionsEmulator(\n  functionsInstance: FunctionsService,\n  host: string,\n  port: number\n): void {\n  functionsInstance.emulatorOrigin = `http://${host}:${port}`;\n}\n\n/**\n * Returns a reference to the callable https trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nexport function httpsCallable<RequestData, ResponseData>(\n  functionsInstance: FunctionsService,\n  name: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return (data => {\n    return call(functionsInstance, name, data, options || {});\n  }) as HttpsCallable<RequestData, ResponseData>;\n}\n\n/**\n * Returns a reference to the callable https trigger with the given url.\n * @param url - The url of the trigger.\n * @public\n */\nexport function httpsCallableFromURL<RequestData, ResponseData>(\n  functionsInstance: FunctionsService,\n  url: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return (data => {\n    return callAtURL(functionsInstance, url, data, options || {});\n  }) as HttpsCallable<RequestData, ResponseData>;\n}\n\n/**\n * Does an HTTP POST and returns the completed response.\n * @param url The url to post to.\n * @param body The JSON body of the post.\n * @param headers The HTTP headers to include in the request.\n * @return A Promise that will succeed when the request finishes.\n */\nasync function postJSON(\n  url: string,\n  body: unknown,\n  headers: { [key: string]: string },\n  fetchImpl: typeof fetch\n): Promise<HttpResponse> {\n  headers['Content-Type'] = 'application/json';\n\n  let response: Response;\n  try {\n    response = await fetchImpl(url, {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers\n    });\n  } catch (e) {\n    // This could be an unhandled error on the backend, or it could be a\n    // network error. There's no way to know, since an unhandled error on the\n    // backend will fail to set the proper CORS header, and thus will be\n    // treated as a network error by fetch.\n    return {\n      status: 0,\n      json: null\n    };\n  }\n  let json: HttpResponseBody | null = null;\n  try {\n    json = await response.json();\n  } catch (e) {\n    // If we fail to parse JSON, it will fail the same as an empty body.\n  }\n  return {\n    status: response.status,\n    json\n  };\n}\n\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param name The name of the callable trigger.\n * @param data The data to pass as params to the function.s\n */\nfunction call(\n  functionsInstance: FunctionsService,\n  name: string,\n  data: unknown,\n  options: HttpsCallableOptions\n): Promise<HttpsCallableResult> {\n  const url = functionsInstance._url(name);\n  return callAtURL(functionsInstance, url, data, options);\n}\n\n/**\n * Calls a callable function asynchronously and returns the result.\n * @param url The url of the callable trigger.\n * @param data The data to pass as params to the function.s\n */\nasync function callAtURL(\n  functionsInstance: FunctionsService,\n  url: string,\n  data: unknown,\n  options: HttpsCallableOptions\n): Promise<HttpsCallableResult> {\n  // Encode any special types, such as dates, in the input data.\n  data = encode(data);\n  const body = { data };\n\n  // Add a header for the authToken.\n  const headers: { [key: string]: string } = {};\n  const context = await functionsInstance.contextProvider.getContext();\n  if (context.authToken) {\n    headers['Authorization'] = 'Bearer ' + context.authToken;\n  }\n  if (context.messagingToken) {\n    headers['Firebase-Instance-ID-Token'] = context.messagingToken;\n  }\n  if (context.appCheckToken !== null) {\n    headers['X-Firebase-AppCheck'] = context.appCheckToken;\n  }\n\n  // Default timeout to 70s, but let the options override it.\n  const timeout = options.timeout || 70000;\n\n  const failAfterHandle = failAfter(timeout);\n  const response = await Promise.race([\n    postJSON(url, body, headers, functionsInstance.fetchImpl),\n    failAfterHandle.promise,\n    functionsInstance.cancelAllRequests\n  ]);\n\n  // Always clear the failAfter timeout\n  failAfterHandle.cancel();\n\n  // If service was deleted, interrupted response throws an error.\n  if (!response) {\n    throw new FunctionsError(\n      'cancelled',\n      'Firebase Functions instance was deleted.'\n    );\n  }\n\n  // Check for an error status, regardless of http status.\n  const error = _errorForResponse(response.status, response.json);\n  if (error) {\n    throw error;\n  }\n\n  if (!response.json) {\n    throw new FunctionsError('internal', 'Response is not valid JSON object.');\n  }\n\n  let responseData = response.json.data;\n  // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n  // backwards compatibility.\n  if (typeof responseData === 'undefined') {\n    responseData = response.json.result;\n  }\n  if (typeof responseData === 'undefined') {\n    // Consider the response malformed.\n    throw new FunctionsError('internal', 'Response is missing data field.');\n  }\n\n  // Decode any special types, such as dates, in the returned data.\n  const decodedData = decode(responseData);\n\n  return { data: decodedData };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _registerComponent, registerVersion } from '@firebase/app';\nimport { FunctionsService } from './service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactory\n} from '@firebase/component';\nimport { FUNCTIONS_TYPE } from './constants';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { MessagingInternalComponentName } from '@firebase/messaging-interop-types';\nimport { name, version } from '../package.json';\n\nconst AUTH_INTERNAL_NAME: FirebaseAuthInternalName = 'auth-internal';\nconst APP_CHECK_INTERNAL_NAME: AppCheckInternalComponentName =\n  'app-check-internal';\nconst MESSAGING_INTERNAL_NAME: MessagingInternalComponentName =\n  'messaging-internal';\n\nexport function registerFunctions(\n  fetchImpl: typeof fetch,\n  variant?: string\n): void {\n  const factory: InstanceFactory<'functions'> = (\n    container: ComponentContainer,\n    { instanceIdentifier: regionOrCustomDomain }\n  ) => {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider(AUTH_INTERNAL_NAME);\n    const messagingProvider = container.getProvider(MESSAGING_INTERNAL_NAME);\n    const appCheckProvider = container.getProvider(APP_CHECK_INTERNAL_NAME);\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new FunctionsService(\n      app,\n      authProvider,\n      messagingProvider,\n      appCheckProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  };\n\n  _registerComponent(\n    new Component(\n      FUNCTIONS_TYPE,\n      factory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _getProvider, FirebaseApp, getApp } from '@firebase/app';\nimport { FUNCTIONS_TYPE } from './constants';\n\nimport { Provider } from '@firebase/component';\nimport { Functions, HttpsCallableOptions, HttpsCallable } from './public-types';\nimport {\n  FunctionsService,\n  DEFAULT_REGION,\n  connectFunctionsEmulator as _connectFunctionsEmulator,\n  httpsCallable as _httpsCallable,\n  httpsCallableFromURL as _httpsCallableFromURL\n} from './service';\nimport {\n  getModularInstance,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nexport * from './public-types';\n\n/**\n * Returns a {@link Functions} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param regionOrCustomDomain - one of:\n *   a) The region the callable functions are located in (ex: us-central1)\n *   b) A custom domain hosting the callable functions (ex: https://mydomain.com)\n * @public\n */\nexport function getFunctions(\n  app: FirebaseApp = getApp(),\n  regionOrCustomDomain: string = DEFAULT_REGION\n): Functions {\n  // Dependencies\n  const functionsProvider: Provider<'functions'> = _getProvider(\n    getModularInstance(app),\n    FUNCTIONS_TYPE\n  );\n  const functionsInstance = functionsProvider.getImmediate({\n    identifier: regionOrCustomDomain\n  });\n  const emulator = getDefaultEmulatorHostnameAndPort('functions');\n  if (emulator) {\n    connectFunctionsEmulator(functionsInstance, ...emulator);\n  }\n  return functionsInstance;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Functions emulator.\n *\n * Note: this must be called before this instance has been used to do any operations.\n *\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 5001)\n * @public\n */\nexport function connectFunctionsEmulator(\n  functionsInstance: Functions,\n  host: string,\n  port: number\n): void {\n  _connectFunctionsEmulator(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    host,\n    port\n  );\n}\n\n/**\n * Returns a reference to the callable HTTPS trigger with the given name.\n * @param name - The name of the trigger.\n * @public\n */\nexport function httpsCallable<RequestData = unknown, ResponseData = unknown>(\n  functionsInstance: Functions,\n  name: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return _httpsCallable<RequestData, ResponseData>(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    name,\n    options\n  );\n}\n\n/**\n * Returns a reference to the callable HTTPS trigger with the specified url.\n * @param url - The url of the trigger.\n * @public\n */\nexport function httpsCallableFromURL<\n  RequestData = unknown,\n  ResponseData = unknown\n>(\n  functionsInstance: Functions,\n  url: string,\n  options?: HttpsCallableOptions\n): HttpsCallable<RequestData, ResponseData> {\n  return _httpsCallableFromURL<RequestData, ResponseData>(\n    getModularInstance<FunctionsService>(functionsInstance as FunctionsService),\n    url,\n    options\n  );\n}\n","/**\n * Cloud Functions for Firebase\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerFunctions } from './config';\n\nexport * from './api';\nexport * from './public-types';\n\nregisterFunctions(fetch.bind(self));\n"]},"metadata":{},"sourceType":"module"}