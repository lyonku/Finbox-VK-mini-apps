{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большиству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window) {\n  var innerHeight = window.innerHeight,\n    availHeight = window.screen.availHeight;\n  var coveredViewportPercentage = Math.round((1 - innerHeight / availHeight) * 100);\n  return coveredViewportPercentage > 24;\n}\nvar eventOptions = {\n  passive: true,\n  capture: false\n};\nexport function useKeyboard() {\n  var _document$activeEleme3;\n  var _useDOM = useDOM(),\n    window = _useDOM.window,\n    document = _useDOM.document;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isOpened = _React$useState2[0],\n    setIsOpened = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    isPrecise = _React$useState4[0],\n    setIsPrecise = _React$useState4[1];\n  var transitionalTimeout = React.useRef(null);\n  var onFocus = React.useCallback(function (event) {\n    var _document$activeEleme, _document$activeEleme2;\n    if (transitionalTimeout.current) {\n      clearTimeout(transitionalTimeout.current);\n    }\n    var isOpened = (event === true || event.type === \"focusin\") && ((document === null || document === void 0 ? void 0 : (_document$activeEleme = document.activeElement) === null || _document$activeEleme === void 0 ? void 0 : _document$activeEleme.tagName) === \"INPUT\" || (document === null || document === void 0 ? void 0 : (_document$activeEleme2 = document.activeElement) === null || _document$activeEleme2 === void 0 ? void 0 : _document$activeEleme2.tagName) === \"TEXTAREA\");\n    setIsOpened(isOpened);\n    setIsPrecise(false); // Ожидаем прохождение анимации раскрытия клавиатуры\n\n    transitionalTimeout.current = setTimeout(function () {\n      setIsOpened(isOpened);\n      setIsPrecise(getPreciseKeyboardState(window));\n    }, 300);\n  }, [document === null || document === void 0 ? void 0 : (_document$activeEleme3 = document.activeElement) === null || _document$activeEleme3 === void 0 ? void 0 : _document$activeEleme3.tagName, window]);\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n\n  React.useEffect(function () {\n    onFocus(true);\n  }, [onFocus]);\n  useGlobalEventListener(document, \"focusout\", onFocus, eventOptions);\n  useGlobalEventListener(document, \"focusin\", onFocus, eventOptions);\n  return {\n    isOpened: isOpened,\n    isPrecise: isPrecise\n  };\n}","map":{"version":3,"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT;AACA,SAASC,sBAAT;;AAOA;AACA;AACA;AACA;AACA,OAAO,SAASC,uBAAT,CAAiCC,MAAjC,EAAuD;EAC5D,IACEC,WADF,GAGID,MAHJ,CACEC,WADF;IAEYC,WAFZ,GAGIF,MAHJ,CAEEG,MAFF,CAEYD,WAFZ;EAKA,IAAME,yBAAyB,GAAGC,IAAI,CAACC,KAAL,CAChC,CAAC,IAAIL,WAAW,GAAGC,WAAnB,IAAkC,GADF,CAAlC;EAGA,OAAOE,yBAAyB,GAAG,EAAnC;AACD;AAED,IAAMG,YAAY,GAAG;EACnBC,OAAO,EAAE,IADU;EAEnBC,OAAO,EAAE;AAFU,CAArB;AAKA,OAAO,SAASC,WAAT,GAA8C;EAAA;EACnD,cAA6Bb,MAAM,EAAnC;IAAQG,MAAR,WAAQA,MAAR;IAAgBW,QAAhB,WAAgBA,QAAhB;EAEA,sBAAgCf,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAhC;IAAAC;IAAOC,QAAP;IAAiBC,WAAjB;EACA,uBAAkCnB,KAAK,CAACgB,QAAN,CAAe,KAAf,CAAlC;IAAAI;IAAOC,SAAP;IAAkBC,YAAlB;EAEA,IAAMC,mBAAmB,GAAGvB,KAAK,CAACwB,MAAN,CAElB,IAFkB,CAA5B;EAIA,IAAMC,OAAO,GAAGzB,KAAK,CAAC0B,WAAN,CACd,UAACC,KAAD,EAA8B;IAAA;IAC5B,IAAIJ,mBAAmB,CAACK,OAAxB,EAAiC;MAC/BC,YAAY,CAACN,mBAAmB,CAACK,OAArB,CAAZ;IACD;IAED,IAAMV,QAAQ,GACZ,CAACS,KAAK,KAAK,IAAV,IAAkBA,KAAK,CAACG,IAAN,KAAe,SAAlC,MACC,SAAQ,SAAR,YAAQ,WAAR,6CAAQ,CAAEC,aAAV,gFAAyBC,OAAzB,MAAqC,OAArC,IACC,SAAQ,SAAR,YAAQ,WAAR,8CAAQ,CAAED,aAAV,kFAAyBC,OAAzB,MAAqC,UAFvC,CADF;IAIAb,WAAW,CAACD,QAAD,CAAX;IACAI,YAAY,CAAC,KAAD,CAAZ,CAV4B,CAY5B;;IACAC,mBAAmB,CAACK,OAApB,GAA8BK,UAAU,CAAC,YAAM;MAC7Cd,WAAW,CAACD,QAAD,CAAX;MACAI,YAAY,CAACnB,uBAAuB,CAACC,MAAD,CAAxB,CAAZ;IACD,CAHuC,EAGrC,GAHqC,CAAxC;EAID,CAlBa,EAmBd,CAACW,QAAD,aAACA,QAAD,iDAACA,QAAQ,CAAEgB,aAAX,2DAACG,uBAAyBF,OAA1B,EAAmC5B,MAAnC,CAnBc,CAAhB;EAsBA;AACF;AACA;AACA;;EACEJ,KAAK,CAACmC,SAAN,CAAgB,YAAM;IACpBV,OAAO,CAAC,IAAD,CAAP;EACD,CAFD,EAEG,CAACA,OAAD,CAFH;EAIAvB,sBAAsB,CAACa,QAAD,EAAW,UAAX,EAAuBU,OAAvB,EAAgCd,YAAhC,CAAtB;EACAT,sBAAsB,CAACa,QAAD,EAAW,SAAX,EAAsBU,OAAtB,EAA+Bd,YAA/B,CAAtB;EAEA,OAAO;IAAEO,QAAQ,EAARA,QAAF;IAAYG,SAAS,EAATA;EAAZ,CAAP;AACD","names":["React","useDOM","useGlobalEventListener","getPreciseKeyboardState","window","innerHeight","availHeight","screen","coveredViewportPercentage","Math","round","eventOptions","passive","capture","useKeyboard","document","useState","_React$useState2","isOpened","setIsOpened","_React$useState4","isPrecise","setIsPrecise","transitionalTimeout","useRef","onFocus","useCallback","event","current","clearTimeout","type","activeElement","tagName","setTimeout","_document$activeEleme3","useEffect"],"sources":["../../src/hooks/useKeyboard.ts"],"sourcesContent":["import * as React from \"react\";\nimport { useDOM } from \"../lib/dom\";\nimport { useGlobalEventListener } from \"./useGlobalEventListener\";\n\ninterface SoftwareKeyboardState {\n  isOpened: boolean;\n  isPrecise: boolean;\n}\n\n/**\n Проверяет, закрыла ли клавиатура часть экрана, 24% подошло к большиству устройств\n Работает на iOS и Android, где софт-клавиатура ресайзит viewport в браузерах\n */\nexport function getPreciseKeyboardState(window: any): boolean {\n  const {\n    innerHeight,\n    screen: { availHeight },\n  } = window;\n\n  const coveredViewportPercentage = Math.round(\n    (1 - innerHeight / availHeight) * 100\n  );\n  return coveredViewportPercentage > 24;\n}\n\nconst eventOptions = {\n  passive: true,\n  capture: false,\n};\n\nexport function useKeyboard(): SoftwareKeyboardState {\n  const { window, document } = useDOM();\n\n  const [isOpened, setIsOpened] = React.useState(false);\n  const [isPrecise, setIsPrecise] = React.useState(false);\n\n  const transitionalTimeout = React.useRef<ReturnType<\n    typeof setTimeout\n  > | null>(null);\n\n  const onFocus = React.useCallback(\n    (event: FocusEvent | true) => {\n      if (transitionalTimeout.current) {\n        clearTimeout(transitionalTimeout.current);\n      }\n\n      const isOpened =\n        (event === true || event.type === \"focusin\") &&\n        (document?.activeElement?.tagName === \"INPUT\" ||\n          document?.activeElement?.tagName === \"TEXTAREA\");\n      setIsOpened(isOpened);\n      setIsPrecise(false);\n\n      // Ожидаем прохождение анимации раскрытия клавиатуры\n      transitionalTimeout.current = setTimeout(() => {\n        setIsOpened(isOpened);\n        setIsPrecise(getPreciseKeyboardState(window));\n      }, 300);\n    },\n    [document?.activeElement?.tagName, window]\n  );\n\n  /**\n   У полей с autoFocus не отлавливаются события focus, для этого вызываем вручную,\n   чтобы иметь хоть какое-то понимание происходящего.\n   */\n  React.useEffect(() => {\n    onFocus(true);\n  }, [onFocus]);\n\n  useGlobalEventListener(document, \"focusout\", onFocus, eventOptions);\n  useGlobalEventListener(document, \"focusin\", onFocus, eventOptions);\n\n  return { isOpened, isPrecise };\n}\n"]},"metadata":{},"sourceType":"module"}