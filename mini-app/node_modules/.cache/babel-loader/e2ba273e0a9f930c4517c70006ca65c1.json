{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/createSuper\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _excluded = [\"name\", \"options\", \"activeValue\", \"onSwitch\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { SliderSwitchButton } from \"./SliderSwitchButton\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nvar warn = warnOnce(\"SliderSwitch\");\n/**\n * @deprecated Этот компонент устарел и будет удален в 5.0.0. Используйте [`SegmentedControl`](#/SegmentedControl).\n */\n\nvar SliderSwitch = /*#__PURE__*/function (_React$Component) {\n  _inherits(SliderSwitch, _React$Component);\n  var _super = _createSuper(SliderSwitch);\n  function SliderSwitch(props) {\n    var _props$activeValue;\n    var _this;\n    _classCallCheck(this, SliderSwitch);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"firstButton\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"secondButton\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"onSwitch\", function (value) {\n      var onSwitch = _this.props.onSwitch;\n      _this.setState(function () {\n        return {\n          activeValue: value\n        };\n      }, function () {\n        onSwitch && onSwitch(value);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleFirstClick\", function () {\n      var options = _this.props.options;\n      var value = options[0].value;\n      _this.onSwitch(value);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleSecondClick\", function () {\n      var options = _this.props.options;\n      var value = options[1].value;\n      _this.onSwitch(value);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleFirstHover\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: 0\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleSecondHover\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: 1\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"resetFocusedOption\", function () {\n      _this.setState(function () {\n        return {\n          hoveredOptionId: -1\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"switchByKey\", function (event) {\n      var _options$find;\n      if (event.key !== \"Enter\" && event.key !== \"Spacebar\" && event.key !== \" \") {\n        return;\n      }\n      event.preventDefault();\n      var options = _this.props.options;\n      var activeValue = _this.state.activeValue;\n      var value = (_options$find = options.find(function (option) {\n        return option.value !== activeValue;\n      })) === null || _options$find === void 0 ? void 0 : _options$find.value;\n      if (value !== undefined) {\n        _this.onSwitch(value);\n      }\n      if (options[0].value === value) {\n        var _this$firstButton$cur;\n        (_this$firstButton$cur = _this.firstButton.current) === null || _this$firstButton$cur === void 0 ? void 0 : _this$firstButton$cur.focus();\n      } else {\n        var _this$secondButton$cu;\n        (_this$secondButton$cu = _this.secondButton.current) === null || _this$secondButton$cu === void 0 ? void 0 : _this$secondButton$cu.focus();\n      }\n    });\n    _this.state = {\n      activeValue: (_props$activeValue = props.activeValue) !== null && _props$activeValue !== void 0 ? _props$activeValue : \"\",\n      hoveredOptionId: -1\n    };\n    _this.firstButton = /*#__PURE__*/React.createRef();\n    _this.secondButton = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n  _createClass(SliderSwitch, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (process.env.NODE_ENV === \"development\") {\n        warn(\"Этот компонент устарел и будет удален в 5.0.0. Используйте SegmentedControl.\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _classNames;\n      var _this$props = this.props,\n        name = _this$props.name,\n        options = _this$props.options,\n        _activeValue = _this$props.activeValue,\n        onSwitch = _this$props.onSwitch,\n        restProps = _objectWithoutProperties(_this$props, _excluded);\n      var _this$state = this.state,\n        activeValue = _this$state.activeValue,\n        hoveredOptionId = _this$state.hoveredOptionId;\n      var _options = _slicedToArray(options, 2),\n        firstOption = _options[0],\n        secondOption = _options[1];\n      var firstActive = firstOption.value === activeValue;\n      var secondActive = secondOption.value === activeValue;\n      return createScopedElement(\"div\", _extends({}, restProps, {\n        vkuiClass: \"SliderSwitch\",\n        onKeyDown: this.switchByKey,\n        onMouseLeave: this.resetFocusedOption\n      }), !firstActive && !secondActive && createScopedElement(\"div\", {\n        vkuiClass: \"SliderSwitch__border\"\n      }), createScopedElement(\"div\", {\n        vkuiClass: classNames(\"SliderSwitch__slider\", (_classNames = {}, _defineProperty(_classNames, \"SliderSwitch--firstActive\", firstActive), _defineProperty(_classNames, \"SliderSwitch--secondActive\", secondActive), _classNames))\n      }), createScopedElement(\"input\", {\n        type: \"hidden\",\n        name: name,\n        value: activeValue\n      }), createScopedElement(SliderSwitchButton, {\n        active: firstActive,\n        hovered: hoveredOptionId === 0,\n        \"aria-pressed\": firstActive,\n        onClick: this.handleFirstClick,\n        onMouseEnter: this.handleFirstHover,\n        getRootRef: this.firstButton\n      }, firstOption.name), createScopedElement(SliderSwitchButton, {\n        active: secondActive,\n        hovered: hoveredOptionId === 1,\n        onClick: this.handleSecondClick,\n        onMouseEnter: this.handleSecondHover,\n        getRootRef: this.secondButton\n      }, secondOption.name));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.activeValue && nextProps.activeValue !== prevState.activeValue) {\n        return {\n          activeValue: nextProps.activeValue\n        };\n      }\n      return null;\n    }\n  }]);\n  return SliderSwitch;\n}(React.Component);\n_defineProperty(SliderSwitch, \"defaultProps\", {\n  options: [{\n    name: \"\",\n    value: \"\"\n  }, {\n    name: \"\",\n    value: \"\"\n  }]\n});\nexport { SliderSwitch };","map":{"version":3,"mappings":"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","names":["React","SliderSwitchButton","classNames","warnOnce","warn","SliderSwitch","props","_classCallCheck","_this","_defineProperty","value","onSwitch","setState","activeValue","options","hoveredOptionId","event","key","preventDefault","state","find","option","_options$find","undefined","firstButton","current","focus","secondButton","createRef","process","env","NODE_ENV","name","_activeValue","restProps","firstOption","secondOption","firstActive","secondActive","createScopedElement","vkuiClass","onKeyDown","switchByKey","onMouseLeave","resetFocusedOption","type","active","hovered","onClick","handleFirstClick","onMouseEnter","handleFirstHover","getRootRef","handleSecondClick","handleSecondHover","nextProps","prevState","Component"],"sources":["../../../src/components/SliderSwitch/SliderSwitch.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { SliderSwitchButton } from \"./SliderSwitchButton\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { HasPlatform } from \"../../types\";\nimport \"./SliderSwitch.css\";\n\nexport interface SliderSwitchOptionInterface {\n  name: string;\n  value: string | number;\n}\n\nexport interface SliderSwitchProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    HasPlatform {\n  options: Array<{\n    name: string;\n    value: string | number;\n  }>;\n  activeValue?: SliderSwitchOptionInterface[\"value\"];\n  name?: string;\n  onSwitch?: (value: SliderSwitchOptionInterface[\"value\"]) => void;\n}\n\ninterface SliderSwitchState {\n  activeValue: SliderSwitchOptionInterface[\"value\"];\n  hoveredOptionId: number;\n}\n\nconst warn = warnOnce(\"SliderSwitch\");\n/**\n * @deprecated Этот компонент устарел и будет удален в 5.0.0. Используйте [`SegmentedControl`](#/SegmentedControl).\n */\nclass SliderSwitch extends React.Component<\n  SliderSwitchProps,\n  SliderSwitchState\n> {\n  public constructor(props: SliderSwitchProps) {\n    super(props);\n\n    this.state = {\n      activeValue: props.activeValue ?? \"\",\n      hoveredOptionId: -1,\n    };\n\n    this.firstButton = React.createRef();\n    this.secondButton = React.createRef();\n  }\n\n  static defaultProps = {\n    options: [\n      { name: \"\", value: \"\" },\n      { name: \"\", value: \"\" },\n    ],\n  };\n\n  firstButton: React.RefObject<HTMLDivElement>;\n  secondButton: React.RefObject<HTMLDivElement>;\n\n  onSwitch = (value: SliderSwitchOptionInterface[\"value\"]) => {\n    const { onSwitch } = this.props;\n\n    this.setState(\n      () => ({\n        activeValue: value,\n      }),\n      () => {\n        onSwitch && onSwitch(value);\n      }\n    );\n  };\n\n  handleFirstClick = () => {\n    const { options } = this.props;\n    const { value } = options[0];\n\n    this.onSwitch(value);\n  };\n\n  handleSecondClick = () => {\n    const { options } = this.props;\n    const { value } = options[1];\n\n    this.onSwitch(value);\n  };\n\n  handleFirstHover = () => {\n    this.setState(() => ({\n      hoveredOptionId: 0,\n    }));\n  };\n\n  handleSecondHover = () => {\n    this.setState(() => ({\n      hoveredOptionId: 1,\n    }));\n  };\n\n  resetFocusedOption = () => {\n    this.setState(() => ({\n      hoveredOptionId: -1,\n    }));\n  };\n\n  switchByKey = (event: React.KeyboardEvent) => {\n    if (\n      event.key !== \"Enter\" &&\n      event.key !== \"Spacebar\" &&\n      event.key !== \" \"\n    ) {\n      return;\n    }\n    event.preventDefault();\n\n    const { options } = this.props;\n    const { activeValue } = this.state;\n    const value = options.find((option) => option.value !== activeValue)?.value;\n\n    if (value !== undefined) {\n      this.onSwitch(value);\n    }\n\n    if (options[0].value === value) {\n      this.firstButton.current?.focus();\n    } else {\n      this.secondButton.current?.focus();\n    }\n  };\n\n  static getDerivedStateFromProps(\n    nextProps: SliderSwitchProps,\n    prevState: SliderSwitchState\n  ) {\n    if (\n      nextProps.activeValue &&\n      nextProps.activeValue !== prevState.activeValue\n    ) {\n      return {\n        activeValue: nextProps.activeValue,\n      };\n    }\n\n    return null;\n  }\n\n  componentDidMount(): void {\n    if (process.env.NODE_ENV === \"development\") {\n      warn(\n        \"Этот компонент устарел и будет удален в 5.0.0. Используйте SegmentedControl.\"\n      );\n    }\n  }\n\n  public render() {\n    const {\n      name,\n      options,\n      activeValue: _activeValue,\n      onSwitch,\n      ...restProps\n    } = this.props;\n    const { activeValue, hoveredOptionId } = this.state;\n\n    const [firstOption, secondOption] = options;\n    const firstActive = firstOption.value === activeValue;\n    const secondActive = secondOption.value === activeValue;\n\n    return (\n      <div\n        {...restProps}\n        vkuiClass=\"SliderSwitch\"\n        onKeyDown={this.switchByKey}\n        onMouseLeave={this.resetFocusedOption}\n      >\n        {!firstActive && !secondActive && (\n          <div vkuiClass=\"SliderSwitch__border\" />\n        )}\n        <div\n          vkuiClass={classNames(\"SliderSwitch__slider\", {\n            [\"SliderSwitch--firstActive\"]: firstActive,\n            [\"SliderSwitch--secondActive\"]: secondActive,\n          })}\n        />\n        <input type=\"hidden\" name={name} value={activeValue} />\n        <SliderSwitchButton\n          active={firstActive}\n          hovered={hoveredOptionId === 0}\n          aria-pressed={firstActive}\n          onClick={this.handleFirstClick}\n          onMouseEnter={this.handleFirstHover}\n          getRootRef={this.firstButton}\n        >\n          {firstOption.name}\n        </SliderSwitchButton>\n        <SliderSwitchButton\n          active={secondActive}\n          hovered={hoveredOptionId === 1}\n          onClick={this.handleSecondClick}\n          onMouseEnter={this.handleSecondHover}\n          getRootRef={this.secondButton}\n        >\n          {secondOption.name}\n        </SliderSwitchButton>\n      </div>\n    );\n  }\n}\n\nexport { SliderSwitch };\n"]},"metadata":{},"sourceType":"module"}