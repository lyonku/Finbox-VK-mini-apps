{"ast":null,"code":"import _createForOfIteratorHelper from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _regeneratorRuntime from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _ERRORS;\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Deferred, ErrorFactory, isIndexedDBAvailable, uuidv4, getGlobal, base64, issuedAtTime, calculateBackoffMillis, getModularInstance } from '@firebase/util';\nimport { Logger } from '@firebase/logger';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar APP_CHECK_STATES = new Map();\nvar DEFAULT_STATE = {\n  activated: false,\n  tokenObservers: []\n};\nvar DEBUG_STATE = {\n  initialized: false,\n  enabled: false\n};\n/**\r\n * Gets a reference to the state object.\r\n */\nfunction getStateReference(app) {\n  return APP_CHECK_STATES.get(app) || Object.assign({}, DEFAULT_STATE);\n}\n/**\r\n * Set once on initialization. The map should hold the same reference to the\r\n * same object until this entry is deleted.\r\n */\nfunction setInitialState(app, state) {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app);\n}\nfunction getDebugState() {\n  return DEBUG_STATE;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar BASE_ENDPOINT = 'https://content-firebaseappcheck.googleapis.com/v1';\nvar EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nvar EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD = 'exchangeRecaptchaEnterpriseToken';\nvar EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\nvar TOKEN_REFRESH_TIME = {\n  /**\r\n   * The offset time before token natural expiration to run the refresh.\r\n   * This is currently 5 minutes.\r\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\r\n   * This is the first retrial wait after an error. This is currently\r\n   * 30 seconds.\r\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\r\n   * This is the maximum retrial wait, currently 16 minutes.\r\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n/**\r\n * One day in millis, for certain error code backoffs.\r\n */\nvar ONE_DAY = 24 * 60 * 60 * 1000;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Port from auth proactiverefresh.js\r\n *\r\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nvar Refresher = /*#__PURE__*/function () {\n  function Refresher(operation, retryPolicy, getWaitDuration, lowerBound, upperBound) {\n    _classCallCheck(this, Refresher);\n    this.operation = operation;\n    this.retryPolicy = retryPolicy;\n    this.getWaitDuration = getWaitDuration;\n    this.lowerBound = lowerBound;\n    this.upperBound = upperBound;\n    this.pending = null;\n    this.nextErrorWaitInterval = lowerBound;\n    if (lowerBound > upperBound) {\n      throw new Error('Proactive refresh lower bound greater than upper bound!');\n    }\n  }\n  _createClass(Refresher, [{\n    key: \"start\",\n    value: function start() {\n      this.nextErrorWaitInterval = this.lowerBound;\n      this.process(true).catch(function () {\n        /* we don't care about the result */\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.pending) {\n        this.pending.reject('cancelled');\n        this.pending = null;\n      }\n    }\n  }, {\n    key: \"isRunning\",\n    value: function isRunning() {\n      return !!this.pending;\n    }\n  }, {\n    key: \"process\",\n    value: function () {\n      var _process = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(hasSucceeded) {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.stop();\n                _context.prev = 1;\n                this.pending = new Deferred();\n                _context.next = 5;\n                return sleep(this.getNextRun(hasSucceeded));\n              case 5:\n                // Why do we resolve a promise, then immediate wait for it?\n                // We do it to make the promise chain cancellable.\n                // We can call stop() which rejects the promise before the following line execute, which makes\n                // the code jump to the catch block.\n                // TODO: unit test this\n                this.pending.resolve();\n                _context.next = 8;\n                return this.pending.promise;\n              case 8:\n                this.pending = new Deferred();\n                _context.next = 11;\n                return this.operation();\n              case 11:\n                this.pending.resolve();\n                _context.next = 14;\n                return this.pending.promise;\n              case 14:\n                this.process(true).catch(function () {\n                  /* we don't care about the result */\n                });\n                _context.next = 20;\n                break;\n              case 17:\n                _context.prev = 17;\n                _context.t0 = _context[\"catch\"](1);\n                if (this.retryPolicy(_context.t0)) {\n                  this.process(false).catch(function () {\n                    /* we don't care about the result */\n                  });\n                } else {\n                  this.stop();\n                }\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 17]]);\n      }));\n      function process(_x) {\n        return _process.apply(this, arguments);\n      }\n      return process;\n    }()\n  }, {\n    key: \"getNextRun\",\n    value: function getNextRun(hasSucceeded) {\n      if (hasSucceeded) {\n        // If last operation succeeded, reset next error wait interval and return\n        // the default wait duration.\n        this.nextErrorWaitInterval = this.lowerBound;\n        // Return typical wait duration interval after a successful operation.\n        return this.getWaitDuration();\n      } else {\n        // Get next error wait interval.\n        var currentErrorWaitInterval = this.nextErrorWaitInterval;\n        // Double interval for next consecutive error.\n        this.nextErrorWaitInterval *= 2;\n        // Make sure next wait interval does not exceed the maximum upper bound.\n        if (this.nextErrorWaitInterval > this.upperBound) {\n          this.nextErrorWaitInterval = this.upperBound;\n        }\n        return currentErrorWaitInterval;\n      }\n    }\n  }]);\n  return Refresher;\n}();\nfunction sleep(ms) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, ms);\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ERRORS = (_ERRORS = {}, _defineProperty(_ERRORS, \"already-initialized\" /* ALREADY_INITIALIZED */, 'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' + 'different options. To avoid this error, call initializeAppCheck() with the ' + 'same options as when it was originally called. This will return the ' + 'already initialized instance.'), _defineProperty(_ERRORS, \"use-before-activation\" /* USE_BEFORE_ACTIVATION */, 'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' + 'Call initializeAppCheck() before instantiating other Firebase services.'), _defineProperty(_ERRORS, \"fetch-network-error\" /* FETCH_NETWORK_ERROR */, 'Fetch failed to connect to a network. Check Internet connection. ' + 'Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"fetch-parse-error\" /* FETCH_PARSE_ERROR */, 'Fetch client could not parse response.' + ' Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"fetch-status-error\" /* FETCH_STATUS_ERROR */, 'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'), _defineProperty(_ERRORS, \"storage-open\" /* STORAGE_OPEN */, 'Error thrown when opening storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-get\" /* STORAGE_GET */, 'Error thrown when reading from storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"storage-set\" /* STORAGE_WRITE */, 'Error thrown when writing to storage. Original error: {$originalErrorMessage}.'), _defineProperty(_ERRORS, \"recaptcha-error\" /* RECAPTCHA_ERROR */, 'ReCAPTCHA error.'), _defineProperty(_ERRORS, \"throttled\" /* THROTTLED */, \"Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}\"), _ERRORS);\nvar ERROR_FACTORY = new ErrorFactory('appCheck', 'AppCheck', ERRORS);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getRecaptcha() {\n  var isEnterprise = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  var _a;\n  if (isEnterprise) {\n    return (_a = self.grecaptcha) === null || _a === void 0 ? void 0 : _a.enterprise;\n  }\n  return self.grecaptcha;\n}\nfunction ensureActivated(app) {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(\"use-before-activation\" /* USE_BEFORE_ACTIVATION */, {\n      appName: app.name\n    });\n  }\n}\nfunction getDurationString(durationInMillis) {\n  var totalSeconds = Math.round(durationInMillis / 1000);\n  var days = Math.floor(totalSeconds / (3600 * 24));\n  var hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  var minutes = Math.floor((totalSeconds - days * 3600 * 24 - hours * 3600) / 60);\n  var seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n  var result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\nfunction pad(value) {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction exchangeToken(_x2, _x3) {\n  return _exchangeToken.apply(this, arguments);\n}\nfunction _exchangeToken() {\n  _exchangeToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(_ref, heartbeatServiceProvider) {\n    var url, body, _a, _b, headers, heartbeatService, heartbeatsHeader, options, response, responseBody, match, timeToLiveAsNumber, now;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            url = _ref.url, body = _ref.body;\n            headers = {\n              'Content-Type': 'application/json'\n            }; // If heartbeat service exists, add heartbeat header string to the header.\n            heartbeatService = heartbeatServiceProvider.getImmediate({\n              optional: true\n            });\n            if (!heartbeatService) {\n              _context6.next = 8;\n              break;\n            }\n            _context6.next = 6;\n            return heartbeatService.getHeartbeatsHeader();\n          case 6:\n            heartbeatsHeader = _context6.sent;\n            if (heartbeatsHeader) {\n              headers['X-Firebase-Client'] = heartbeatsHeader;\n            }\n          case 8:\n            options = {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            };\n            _context6.prev = 9;\n            _context6.next = 12;\n            return fetch(url, options);\n          case 12:\n            response = _context6.sent;\n            _context6.next = 18;\n            break;\n          case 15:\n            _context6.prev = 15;\n            _context6.t0 = _context6[\"catch\"](9);\n            throw ERROR_FACTORY.create(\"fetch-network-error\" /* FETCH_NETWORK_ERROR */, {\n              originalErrorMessage: (_a = _context6.t0) === null || _a === void 0 ? void 0 : _a.message\n            });\n          case 18:\n            if (!(response.status !== 200)) {\n              _context6.next = 20;\n              break;\n            }\n            throw ERROR_FACTORY.create(\"fetch-status-error\" /* FETCH_STATUS_ERROR */, {\n              httpStatus: response.status\n            });\n          case 20:\n            _context6.prev = 20;\n            _context6.next = 23;\n            return response.json();\n          case 23:\n            responseBody = _context6.sent;\n            _context6.next = 29;\n            break;\n          case 26:\n            _context6.prev = 26;\n            _context6.t1 = _context6[\"catch\"](20);\n            throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\n              originalErrorMessage: (_b = _context6.t1) === null || _b === void 0 ? void 0 : _b.message\n            });\n          case 29:\n            // Protobuf duration format.\n            // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n            match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n            if (!(!match || !match[2] || isNaN(Number(match[1])))) {\n              _context6.next = 32;\n              break;\n            }\n            throw ERROR_FACTORY.create(\"fetch-parse-error\" /* FETCH_PARSE_ERROR */, {\n              originalErrorMessage: \"ttl field (timeToLive) is not in standard Protobuf Duration \" + \"format: \".concat(responseBody.ttl)\n            });\n          case 32:\n            timeToLiveAsNumber = Number(match[1]) * 1000;\n            now = Date.now();\n            return _context6.abrupt(\"return\", {\n              token: responseBody.token,\n              expireTimeMillis: now + timeToLiveAsNumber,\n              issuedAtTimeMillis: now\n            });\n          case 35:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[9, 15], [20, 26]]);\n  }));\n  return _exchangeToken.apply(this, arguments);\n}\nfunction getExchangeRecaptchaV3TokenRequest(app, reCAPTCHAToken) {\n  var _app$options = app.options,\n    projectId = _app$options.projectId,\n    appId = _app$options.appId,\n    apiKey = _app$options.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_RECAPTCHA_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\nfunction getExchangeRecaptchaEnterpriseTokenRequest(app, reCAPTCHAToken) {\n  var _app$options2 = app.options,\n    projectId = _app$options2.projectId,\n    appId = _app$options2.appId,\n    apiKey = _app$options2.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\nfunction getExchangeDebugTokenRequest(app, debugToken) {\n  var _app$options3 = app.options,\n    projectId = _app$options3.projectId,\n    appId = _app$options3.appId,\n    apiKey = _app$options3.apiKey;\n  return {\n    url: \"\".concat(BASE_ENDPOINT, \"/projects/\").concat(projectId, \"/apps/\").concat(appId, \":\").concat(EXCHANGE_DEBUG_TOKEN_METHOD, \"?key=\").concat(apiKey),\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DB_NAME = 'firebase-app-check-database';\nvar DB_VERSION = 1;\nvar STORE_NAME = 'firebase-app-check-store';\nvar DEBUG_TOKEN_KEY = 'debug-token';\nvar dbPromise = null;\nfunction getDBPromise() {\n  if (dbPromise) {\n    return dbPromise;\n  }\n  dbPromise = new Promise(function (resolve, reject) {\n    var _a;\n    try {\n      var request = indexedDB.open(DB_NAME, DB_VERSION);\n      request.onsuccess = function (event) {\n        resolve(event.target.result);\n      };\n      request.onerror = function (event) {\n        var _a;\n        reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\n          originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n        }));\n      };\n      request.onupgradeneeded = function (event) {\n        var db = event.target.result;\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(ERROR_FACTORY.create(\"storage-open\" /* STORAGE_OPEN */, {\n        originalErrorMessage: (_a = e) === null || _a === void 0 ? void 0 : _a.message\n      }));\n    }\n  });\n  return dbPromise;\n}\nfunction readTokenFromIndexedDB(app) {\n  return read(computeKey(app));\n}\nfunction writeTokenToIndexedDB(app, token) {\n  return write(computeKey(app), token);\n}\nfunction writeDebugTokenToIndexedDB(token) {\n  return write(DEBUG_TOKEN_KEY, token);\n}\nfunction readDebugTokenFromIndexedDB() {\n  return read(DEBUG_TOKEN_KEY);\n}\nfunction write(_x4, _x5) {\n  return _write.apply(this, arguments);\n}\nfunction _write() {\n  _write = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(key, value) {\n    var db, transaction, store, request;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.next = 2;\n            return getDBPromise();\n          case 2:\n            db = _context7.sent;\n            transaction = db.transaction(STORE_NAME, 'readwrite');\n            store = transaction.objectStore(STORE_NAME);\n            request = store.put({\n              compositeKey: key,\n              value: value\n            });\n            return _context7.abrupt(\"return\", new Promise(function (resolve, reject) {\n              request.onsuccess = function (_event) {\n                resolve();\n              };\n              transaction.onerror = function (event) {\n                var _a;\n                reject(ERROR_FACTORY.create(\"storage-set\" /* STORAGE_WRITE */, {\n                  originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n                }));\n              };\n            }));\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  }));\n  return _write.apply(this, arguments);\n}\nfunction read(_x6) {\n  return _read.apply(this, arguments);\n}\nfunction _read() {\n  _read = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(key) {\n    var db, transaction, store, request;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return getDBPromise();\n          case 2:\n            db = _context8.sent;\n            transaction = db.transaction(STORE_NAME, 'readonly');\n            store = transaction.objectStore(STORE_NAME);\n            request = store.get(key);\n            return _context8.abrupt(\"return\", new Promise(function (resolve, reject) {\n              request.onsuccess = function (event) {\n                var result = event.target.result;\n                if (result) {\n                  resolve(result.value);\n                } else {\n                  resolve(undefined);\n                }\n              };\n              transaction.onerror = function (event) {\n                var _a;\n                reject(ERROR_FACTORY.create(\"storage-get\" /* STORAGE_GET */, {\n                  originalErrorMessage: (_a = event.target.error) === null || _a === void 0 ? void 0 : _a.message\n                }));\n              };\n            }));\n          case 7:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n  return _read.apply(this, arguments);\n}\nfunction computeKey(app) {\n  return \"\".concat(app.options.appId, \"-\").concat(app.name);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logger = new Logger('@firebase/app-check');\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\r\n */\nfunction readTokenFromStorage(_x7) {\n  return _readTokenFromStorage.apply(this, arguments);\n} /**\r\n   * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\r\n   */\nfunction _readTokenFromStorage() {\n  _readTokenFromStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(app) {\n    var token;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            if (!isIndexedDBAvailable()) {\n              _context9.next = 12;\n              break;\n            }\n            token = undefined;\n            _context9.prev = 2;\n            _context9.next = 5;\n            return readTokenFromIndexedDB(app);\n          case 5:\n            token = _context9.sent;\n            _context9.next = 11;\n            break;\n          case 8:\n            _context9.prev = 8;\n            _context9.t0 = _context9[\"catch\"](2);\n            // swallow the error and return undefined\n            logger.warn(\"Failed to read token from IndexedDB. Error: \".concat(_context9.t0));\n          case 11:\n            return _context9.abrupt(\"return\", token);\n          case 12:\n            return _context9.abrupt(\"return\", undefined);\n          case 13:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[2, 8]]);\n  }));\n  return _readTokenFromStorage.apply(this, arguments);\n}\nfunction writeTokenToStorage(app, token) {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(function (e) {\n      // swallow the error and resolve the promise\n      logger.warn(\"Failed to write token to IndexedDB. Error: \".concat(e));\n    });\n  }\n  return Promise.resolve();\n}\nfunction readOrCreateDebugTokenFromStorage() {\n  return _readOrCreateDebugTokenFromStorage.apply(this, arguments);\n} /**\r\n   * @license\r\n   * Copyright 2020 Google LLC\r\n   *\r\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n   * you may not use this file except in compliance with the License.\r\n   * You may obtain a copy of the License at\r\n   *\r\n   *   http://www.apache.org/licenses/LICENSE-2.0\r\n   *\r\n   * Unless required by applicable law or agreed to in writing, software\r\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n   * See the License for the specific language governing permissions and\r\n   * limitations under the License.\r\n   */\nfunction _readOrCreateDebugTokenFromStorage() {\n  _readOrCreateDebugTokenFromStorage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n    var existingDebugToken, newToken;\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            /**\r\n             * Theoretically race condition can happen if we read, then write in 2 separate transactions.\r\n             * But it won't happen here, because this function will be called exactly once.\r\n             */existingDebugToken = undefined;\n            _context10.prev = 1;\n            _context10.next = 4;\n            return readDebugTokenFromIndexedDB();\n          case 4:\n            existingDebugToken = _context10.sent;\n            _context10.next = 9;\n            break;\n          case 7:\n            _context10.prev = 7;\n            _context10.t0 = _context10[\"catch\"](1);\n          case 9:\n            if (existingDebugToken) {\n              _context10.next = 15;\n              break;\n            }\n            // create a new debug token\n            newToken = uuidv4(); // We don't need to block on writing to indexeddb\n            // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n            // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n            // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n            // You should switch to a different browser that supports indexeddb\n            writeDebugTokenToIndexedDB(newToken).catch(function (e) {\n              return logger.warn(\"Failed to persist debug token to IndexedDB. Error: \".concat(e));\n            });\n            return _context10.abrupt(\"return\", newToken);\n          case 15:\n            return _context10.abrupt(\"return\", existingDebugToken);\n          case 16:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10, null, [[1, 7]]);\n  }));\n  return _readOrCreateDebugTokenFromStorage.apply(this, arguments);\n}\nfunction isDebugMode() {\n  var debugState = getDebugState();\n  return debugState.enabled;\n}\nfunction getDebugToken() {\n  return _getDebugToken.apply(this, arguments);\n}\nfunction _getDebugToken() {\n  _getDebugToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n    var state;\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            state = getDebugState();\n            if (!(state.enabled && state.token)) {\n              _context11.next = 5;\n              break;\n            }\n            return _context11.abrupt(\"return\", state.token.promise);\n          case 5:\n            throw Error(\"\\n            Can't get debug token in production mode.\\n        \");\n          case 6:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11);\n  }));\n  return _getDebugToken.apply(this, arguments);\n}\nfunction initializeDebugMode() {\n  var globals = getGlobal();\n  var debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' && globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true) {\n    return;\n  }\n  debugState.enabled = true;\n  var deferredToken = new Deferred();\n  debugState.token = deferredToken;\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nvar defaultTokenErrorData = {\n  error: 'UNKNOWN_ERROR'\n};\n/**\r\n * Stringify and base64 encode token error data.\r\n *\r\n * @param tokenError Error data, currently hardcoded.\r\n */\nfunction formatDummyToken(tokenErrorData) {\n  return base64.encodeString(JSON.stringify(tokenErrorData), /* webSafe= */false);\n}\n/**\r\n * This function always resolves.\r\n * The result will contain an error field if there is any error.\r\n * In case there is an error, the token field in the result will be populated with a dummy value\r\n */\nfunction getToken$2(_x8) {\n  return _getToken$.apply(this, arguments);\n}\nfunction _getToken$() {\n  _getToken$ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(appCheck) {\n    var forceRefresh,\n      app,\n      state,\n      token,\n      error,\n      cachedToken,\n      shouldCallListeners,\n      tokenFromDebugExchange,\n      interopTokenResult,\n      _args12 = arguments;\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) {\n        switch (_context12.prev = _context12.next) {\n          case 0:\n            forceRefresh = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : false;\n            app = appCheck.app;\n            ensureActivated(app);\n            state = getStateReference(app); /**\r\n                                             * First check if there is a token in memory from a previous `getToken()` call.\r\n                                             */\n            token = state.token;\n            error = undefined; /**\r\n                                * If an invalid token was found in memory, clear token from\r\n                                * memory and unset the local variable `token`.\r\n                                */\n            if (token && !isValid(token)) {\n              state.token = undefined;\n              token = undefined;\n            }\n            /**\r\n             * If there is no valid token in memory, try to load token from indexedDB.\r\n             */\n            if (token) {\n              _context12.next = 18;\n              break;\n            }\n            _context12.next = 10;\n            return state.cachedTokenPromise;\n          case 10:\n            cachedToken = _context12.sent;\n            if (!cachedToken) {\n              _context12.next = 18;\n              break;\n            }\n            if (!isValid(cachedToken)) {\n              _context12.next = 16;\n              break;\n            }\n            token = cachedToken;\n            _context12.next = 18;\n            break;\n          case 16:\n            _context12.next = 18;\n            return writeTokenToStorage(app, undefined);\n          case 18:\n            if (!(!forceRefresh && token && isValid(token))) {\n              _context12.next = 20;\n              break;\n            }\n            return _context12.abrupt(\"return\", {\n              token: token.token\n            });\n          case 20:\n            // Only set to true if this `getToken()` call is making the actual\n            // REST call to the exchange endpoint, versus waiting for an already\n            // in-flight call (see debug and regular exchange endpoint paths below)\n            shouldCallListeners = false; /**\r\n                                          * DEBUG MODE\r\n                                          * If debug mode is set, and there is no cached token, fetch a new App\r\n                                          * Check token using the debug token, and return it directly.\r\n                                          */\n            if (!isDebugMode()) {\n              _context12.next = 40;\n              break;\n            }\n            if (state.exchangeTokenPromise) {\n              _context12.next = 33;\n              break;\n            }\n            _context12.t0 = exchangeToken;\n            _context12.t1 = getExchangeDebugTokenRequest;\n            _context12.t2 = app;\n            _context12.next = 28;\n            return getDebugToken();\n          case 28:\n            _context12.t3 = _context12.sent;\n            _context12.t4 = (0, _context12.t1)(_context12.t2, _context12.t3);\n            _context12.t5 = appCheck.heartbeatServiceProvider;\n            state.exchangeTokenPromise = (0, _context12.t0)(_context12.t4, _context12.t5).finally(function () {\n              // Clear promise when settled - either resolved or rejected.\n              state.exchangeTokenPromise = undefined;\n            });\n            shouldCallListeners = true;\n          case 33:\n            _context12.next = 35;\n            return state.exchangeTokenPromise;\n          case 35:\n            tokenFromDebugExchange = _context12.sent;\n            _context12.next = 38;\n            return writeTokenToStorage(app, tokenFromDebugExchange);\n          case 38:\n            // Write debug token to state.\n            state.token = tokenFromDebugExchange;\n            return _context12.abrupt(\"return\", {\n              token: tokenFromDebugExchange.token\n            });\n          case 40:\n            _context12.prev = 40;\n            // Avoid making another call to the exchange endpoint if one is in flight.\n            if (!state.exchangeTokenPromise) {\n              // state.provider is populated in initializeAppCheck()\n              // ensureActivated() at the top of this function checks that\n              // initializeAppCheck() has been called.\n              state.exchangeTokenPromise = state.provider.getToken().finally(function () {\n                // Clear promise when settled - either resolved or rejected.\n                state.exchangeTokenPromise = undefined;\n              });\n              shouldCallListeners = true;\n            }\n            _context12.next = 44;\n            return getStateReference(app).exchangeTokenPromise;\n          case 44:\n            token = _context12.sent;\n            _context12.next = 51;\n            break;\n          case 47:\n            _context12.prev = 47;\n            _context12.t6 = _context12[\"catch\"](40);\n            if (_context12.t6.code === \"appCheck/\".concat(\"throttled\" /* THROTTLED */)) {\n              // Warn if throttled, but do not treat it as an error.\n              logger.warn(_context12.t6.message);\n            } else {\n              // `getToken()` should never throw, but logging error text to console will aid debugging.\n              logger.error(_context12.t6);\n            }\n            // Always save error to be added to dummy token.\n            error = _context12.t6;\n          case 51:\n            if (token) {\n              _context12.next = 55;\n              break;\n            }\n            // If token is undefined, there must be an error.\n            // Return a dummy token along with the error.\n            interopTokenResult = makeDummyTokenResult(error);\n            _context12.next = 63;\n            break;\n          case 55:\n            if (!error) {\n              _context12.next = 59;\n              break;\n            }\n            if (isValid(token)) {\n              // It's also possible a valid token exists, but there's also an error.\n              // (Such as if the token is almost expired, tries to refresh, and\n              // the exchange request fails.)\n              // We add a special error property here so that the refresher will\n              // count this as a failed attempt and use the backoff instead of\n              // retrying repeatedly with no delay, but any 3P listeners will not\n              // be hindered in getting the still-valid token.\n              interopTokenResult = {\n                token: token.token,\n                internalError: error\n              };\n            } else {\n              // No invalid tokens should make it to this step. Memory and cached tokens\n              // are checked. Other tokens are from fresh exchanges. But just in case.\n              interopTokenResult = makeDummyTokenResult(error);\n            }\n            _context12.next = 63;\n            break;\n          case 59:\n            interopTokenResult = {\n              token: token.token\n            };\n            // write the new token to the memory state as well as the persistent storage.\n            // Only do it if we got a valid new token\n            state.token = token;\n            _context12.next = 63;\n            return writeTokenToStorage(app, token);\n          case 63:\n            if (shouldCallListeners) {\n              notifyTokenListeners(app, interopTokenResult);\n            }\n            return _context12.abrupt(\"return\", interopTokenResult);\n          case 65:\n          case \"end\":\n            return _context12.stop();\n        }\n      }\n    }, _callee12, null, [[40, 47]]);\n  }));\n  return _getToken$.apply(this, arguments);\n}\nfunction _addTokenListener(appCheck, type, listener, onError) {\n  var app = appCheck.app;\n  var state = getStateReference(app);\n  var tokenObserver = {\n    next: listener,\n    error: onError,\n    type: type\n  };\n  state.tokenObservers = [].concat(_toConsumableArray(state.tokenObservers), [tokenObserver]);\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    var validToken = state.token;\n    Promise.resolve().then(function () {\n      listener({\n        token: validToken.token\n      });\n      initTokenRefresher(appCheck);\n    }).catch(function () {\n      /* we don't care about exceptions thrown in listeners */\n    });\n  }\n  /**\r\n   * Wait for any cached token promise to resolve before starting the token\r\n   * refresher. The refresher checks to see if there is an existing token\r\n   * in state and calls the exchange endpoint if not. We should first let the\r\n   * IndexedDB check have a chance to populate state if it can.\r\n   *\r\n   * Listener call isn't needed here because cachedTokenPromise will call any\r\n   * listeners that exist when it resolves.\r\n   */\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise.then(function () {\n    return initTokenRefresher(appCheck);\n  });\n}\nfunction _removeTokenListener(app, listener) {\n  var state = getStateReference(app);\n  var newObservers = state.tokenObservers.filter(function (tokenObserver) {\n    return tokenObserver.next !== listener;\n  });\n  if (newObservers.length === 0 && state.tokenRefresher && state.tokenRefresher.isRunning()) {\n    state.tokenRefresher.stop();\n  }\n  state.tokenObservers = newObservers;\n}\n/**\r\n * Logic to create and start refresher as needed.\r\n */\nfunction initTokenRefresher(appCheck) {\n  var app = appCheck.app;\n  var state = getStateReference(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  var refresher = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\nfunction createTokenRefresher(appCheck) {\n  var app = appCheck.app;\n  return new Refresher(\n  /*#__PURE__*/\n  // Keep in mind when this fails for any reason other than the ones\n  // for which we should retry, it will effectively stop the proactive refresh.\n  _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var state, result;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            state = getStateReference(app); // If there is no token, we will try to load it from storage and use it\n            // If there is a token, we force refresh it because we know it's going to expire soon\n            if (state.token) {\n              _context2.next = 7;\n              break;\n            }\n            _context2.next = 4;\n            return getToken$2(appCheck);\n          case 4:\n            result = _context2.sent;\n            _context2.next = 10;\n            break;\n          case 7:\n            _context2.next = 9;\n            return getToken$2(appCheck, true);\n          case 9:\n            result = _context2.sent;\n          case 10:\n            if (!result.error) {\n              _context2.next = 12;\n              break;\n            }\n            throw result.error;\n          case 12:\n            if (!result.internalError) {\n              _context2.next = 14;\n              break;\n            }\n            throw result.internalError;\n          case 14:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), function () {\n    return true;\n  }, function () {\n    var state = getStateReference(app);\n    if (state.token) {\n      // issuedAtTime + (50% * total TTL) + 5 minutes\n      var nextRefreshTimeMillis = state.token.issuedAtTimeMillis + (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) * 0.5 + 5 * 60 * 1000;\n      // Do not allow refresh time to be past (expireTime - 5 minutes)\n      var latestAllowableRefresh = state.token.expireTimeMillis - 5 * 60 * 1000;\n      nextRefreshTimeMillis = Math.min(nextRefreshTimeMillis, latestAllowableRefresh);\n      return Math.max(0, nextRefreshTimeMillis - Date.now());\n    } else {\n      return 0;\n    }\n  }, TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT, TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT);\n}\nfunction notifyTokenListeners(app, token) {\n  var observers = getStateReference(app).tokenObservers;\n  var _iterator = _createForOfIteratorHelper(observers),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var observer = _step.value;\n      try {\n        if (observer.type === \"EXTERNAL\" /* EXTERNAL */ && token.error != null) {\n          // If this listener was added by a 3P call, send any token error to\n          // the supplied error handler. A 3P observer always has an error\n          // handler.\n          observer.error(token.error);\n        } else {\n          // If the token has no error field, always return the token.\n          // If this is a 2P listener, return the token, whether or not it\n          // has an error field.\n          observer.next(token);\n        }\n      } catch (e) {\n        // Errors in the listener function itself are always ignored.\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\nfunction isValid(token) {\n  return token.expireTimeMillis - Date.now() > 0;\n}\nfunction makeDummyTokenResult(error) {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error: error\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * AppCheck Service class.\r\n */\nvar AppCheckService = /*#__PURE__*/function () {\n  function AppCheckService(app, heartbeatServiceProvider) {\n    _classCallCheck(this, AppCheckService);\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n  }\n  _createClass(AppCheckService, [{\n    key: \"_delete\",\n    value: function _delete() {\n      var _getStateReference = getStateReference(this.app),\n        tokenObservers = _getStateReference.tokenObservers;\n      var _iterator2 = _createForOfIteratorHelper(tokenObservers),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var tokenObserver = _step2.value;\n          _removeTokenListener(this.app, tokenObserver.next);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      return Promise.resolve();\n    }\n  }]);\n  return AppCheckService;\n}();\nfunction factory(app, heartbeatServiceProvider) {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\nfunction internalFactory(appCheck) {\n  return {\n    getToken: function getToken(forceRefresh) {\n      return getToken$2(appCheck, forceRefresh);\n    },\n    addTokenListener: function addTokenListener(listener) {\n      return _addTokenListener(appCheck, \"INTERNAL\" /* INTERNAL */, listener);\n    },\n    removeTokenListener: function removeTokenListener(listener) {\n      return _removeTokenListener(appCheck.app, listener);\n    }\n  };\n}\nvar name = \"@firebase/app-check\";\nvar version = \"0.5.17\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nvar RECAPTCHA_ENTERPRISE_URL = 'https://www.google.com/recaptcha/enterprise.js';\nfunction initializeV3(app, siteKey) {\n  var initialized = new Deferred();\n  var state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized: initialized\n  };\n  var divId = makeDiv(app);\n  var grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(function () {\n      var grecaptcha = getRecaptcha(false);\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nfunction initializeEnterprise(app, siteKey) {\n  var initialized = new Deferred();\n  var state = getStateReference(app);\n  state.reCAPTCHAState = {\n    initialized: initialized\n  };\n  var divId = makeDiv(app);\n  var grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(function () {\n      var grecaptcha = getRecaptcha(true);\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n/**\r\n * Add listener to render the widget and resolve the promise when\r\n * the grecaptcha.ready() event fires.\r\n */\nfunction queueWidgetRender(app, siteKey, grecaptcha, container, initialized) {\n  grecaptcha.ready(function () {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n/**\r\n * Add invisible div to page.\r\n */\nfunction makeDiv(app) {\n  var divId = \"fire_app_check_\".concat(app.name);\n  var invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\nfunction getToken$1(_x9) {\n  return _getToken$2.apply(this, arguments);\n} /**\r\n   *\r\n   * @param app\r\n   * @param container - Id of a HTML element.\r\n   */\nfunction _getToken$2() {\n  _getToken$2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(app) {\n    var reCAPTCHAState, recaptcha;\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) {\n        switch (_context13.prev = _context13.next) {\n          case 0:\n            ensureActivated(app);\n            // ensureActivated() guarantees that reCAPTCHAState is set\n            reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n            _context13.next = 4;\n            return reCAPTCHAState.initialized.promise;\n          case 4:\n            recaptcha = _context13.sent;\n            return _context13.abrupt(\"return\", new Promise(function (resolve, _reject) {\n              // Updated after initialization is complete.\n              var reCAPTCHAState = getStateReference(app).reCAPTCHAState;\n              recaptcha.ready(function () {\n                resolve(\n                // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n                recaptcha.execute(reCAPTCHAState.widgetId, {\n                  action: 'fire_app_check'\n                }));\n              });\n            }));\n          case 6:\n          case \"end\":\n            return _context13.stop();\n        }\n      }\n    }, _callee13);\n  }));\n  return _getToken$2.apply(this, arguments);\n}\nfunction renderInvisibleWidget(app, siteKey, grecaptcha, container) {\n  var widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  var state = getStateReference(app);\n  state.reCAPTCHAState = Object.assign(Object.assign({}, state.reCAPTCHAState), {\n    // state.reCAPTCHAState is set in the initialize()\n    widgetId: widgetId\n  });\n}\nfunction loadReCAPTCHAV3Script(onload) {\n  var script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\nfunction loadReCAPTCHAEnterpriseScript(onload) {\n  var script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\r\n * for an App Check token.\r\n *\r\n * @public\r\n */\nvar ReCaptchaV3Provider = /*#__PURE__*/function () {\n  /**\r\n   * Create a ReCaptchaV3Provider instance.\r\n   * @param siteKey - ReCAPTCHA V3 siteKey.\r\n   */\n  function ReCaptchaV3Provider(_siteKey) {\n    _classCallCheck(this, ReCaptchaV3Provider);\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n  _createClass(ReCaptchaV3Provider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _a, _b, attestedClaimsToken, result;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                throwIfThrottled(this._throttleData);\n                // Top-level `getToken()` has already checked that App Check is initialized\n                // and therefore this._app and this._heartbeatServiceProvider are available.\n                _context3.next = 3;\n                return getToken$1(this._app).catch(function (_e) {\n                  // reCaptcha.execute() throws null which is not very descriptive.\n                  throw ERROR_FACTORY.create(\"recaptcha-error\" /* RECAPTCHA_ERROR */);\n                });\n              case 3:\n                attestedClaimsToken = _context3.sent;\n                _context3.prev = 4;\n                _context3.next = 7;\n                return exchangeToken(getExchangeRecaptchaV3TokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n              case 7:\n                result = _context3.sent;\n                _context3.next = 18;\n                break;\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](4);\n                if (!((_a = _context3.t0.code) === null || _a === void 0 ? void 0 : _a.includes(\"fetch-status-error\" /* FETCH_STATUS_ERROR */))) {\n                  _context3.next = 17;\n                  break;\n                }\n                this._throttleData = setBackoff(Number((_b = _context3.t0.customData) === null || _b === void 0 ? void 0 : _b.httpStatus), this._throttleData);\n                throw ERROR_FACTORY.create(\"throttled\" /* THROTTLED */, {\n                  time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n                  httpStatus: this._throttleData.httpStatus\n                });\n              case 17:\n                throw _context3.t0;\n              case 18:\n                // If successful, clear throttle data.\n                this._throttleData = null;\n                return _context3.abrupt(\"return\", result);\n              case 20:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 10]]);\n      }));\n      function getToken() {\n        return _getToken.apply(this, arguments);\n      }\n      return getToken;\n    }() /**\r\n         * @internal\r\n         */\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n      this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n      initializeV3(app, this._siteKey).catch(function () {\n        /* we don't care about the initialization result */\n      });\n    }\n    /**\r\n     * @internal\r\n     */\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof ReCaptchaV3Provider) {\n        return this._siteKey === otherProvider._siteKey;\n      } else {\n        return false;\n      }\n    }\n  }]);\n  return ReCaptchaV3Provider;\n}(); /**\r\n      * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\r\n      * for an App Check token.\r\n      *\r\n      * @public\r\n      */\nvar ReCaptchaEnterpriseProvider = /*#__PURE__*/function () {\n  /**\r\n   * Create a ReCaptchaEnterpriseProvider instance.\r\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\r\n   */\n  function ReCaptchaEnterpriseProvider(_siteKey) {\n    _classCallCheck(this, ReCaptchaEnterpriseProvider);\n    this._siteKey = _siteKey;\n    /**\r\n     * Throttle requests on certain error codes to prevent too many retries\r\n     * in a short time.\r\n     */\n    this._throttleData = null;\n  }\n  /**\r\n   * Returns an App Check token.\r\n   * @internal\r\n   */\n  _createClass(ReCaptchaEnterpriseProvider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _a, _b, attestedClaimsToken, result;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                throwIfThrottled(this._throttleData);\n                // Top-level `getToken()` has already checked that App Check is initialized\n                // and therefore this._app and this._heartbeatServiceProvider are available.\n                _context4.next = 3;\n                return getToken$1(this._app).catch(function (_e) {\n                  // reCaptcha.execute() throws null which is not very descriptive.\n                  throw ERROR_FACTORY.create(\"recaptcha-error\" /* RECAPTCHA_ERROR */);\n                });\n              case 3:\n                attestedClaimsToken = _context4.sent;\n                _context4.prev = 4;\n                _context4.next = 7;\n                return exchangeToken(getExchangeRecaptchaEnterpriseTokenRequest(this._app, attestedClaimsToken), this._heartbeatServiceProvider);\n              case 7:\n                result = _context4.sent;\n                _context4.next = 18;\n                break;\n              case 10:\n                _context4.prev = 10;\n                _context4.t0 = _context4[\"catch\"](4);\n                if (!((_a = _context4.t0.code) === null || _a === void 0 ? void 0 : _a.includes(\"fetch-status-error\" /* FETCH_STATUS_ERROR */))) {\n                  _context4.next = 17;\n                  break;\n                }\n                this._throttleData = setBackoff(Number((_b = _context4.t0.customData) === null || _b === void 0 ? void 0 : _b.httpStatus), this._throttleData);\n                throw ERROR_FACTORY.create(\"throttled\" /* THROTTLED */, {\n                  time: getDurationString(this._throttleData.allowRequestsAfter - Date.now()),\n                  httpStatus: this._throttleData.httpStatus\n                });\n              case 17:\n                throw _context4.t0;\n              case 18:\n                // If successful, clear throttle data.\n                this._throttleData = null;\n                return _context4.abrupt(\"return\", result);\n              case 20:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[4, 10]]);\n      }));\n      function getToken() {\n        return _getToken2.apply(this, arguments);\n      }\n      return getToken;\n    }() /**\r\n         * @internal\r\n         */\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n      this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n      initializeEnterprise(app, this._siteKey).catch(function () {\n        /* we don't care about the initialization result */\n      });\n    }\n    /**\r\n     * @internal\r\n     */\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n        return this._siteKey === otherProvider._siteKey;\n      } else {\n        return false;\n      }\n    }\n  }]);\n  return ReCaptchaEnterpriseProvider;\n}(); /**\r\n      * Custom provider class.\r\n      * @public\r\n      */\nvar CustomProvider = /*#__PURE__*/function () {\n  function CustomProvider(_customProviderOptions) {\n    _classCallCheck(this, CustomProvider);\n    this._customProviderOptions = _customProviderOptions;\n  }\n  /**\r\n   * @internal\r\n   */\n  _createClass(CustomProvider, [{\n    key: \"getToken\",\n    value: function () {\n      var _getToken3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var customToken, issuedAtTimeSeconds, issuedAtTimeMillis;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._customProviderOptions.getToken();\n              case 2:\n                customToken = _context5.sent;\n                // Try to extract IAT from custom token, in case this token is not\n                // being newly issued. JWT timestamps are in seconds since epoch.\n                issuedAtTimeSeconds = issuedAtTime(customToken.token); // Very basic validation, use current timestamp as IAT if JWT\n                // has no `iat` field or value is out of bounds.\n                issuedAtTimeMillis = issuedAtTimeSeconds !== null && issuedAtTimeSeconds < Date.now() && issuedAtTimeSeconds > 0 ? issuedAtTimeSeconds * 1000 : Date.now();\n                return _context5.abrupt(\"return\", Object.assign(Object.assign({}, customToken), {\n                  issuedAtTimeMillis: issuedAtTimeMillis\n                }));\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n      function getToken() {\n        return _getToken3.apply(this, arguments);\n      }\n      return getToken;\n    }() /**\r\n         * @internal\r\n         */\n  }, {\n    key: \"initialize\",\n    value: function initialize(app) {\n      this._app = app;\n    }\n    /**\r\n     * @internal\r\n     */\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherProvider) {\n      if (otherProvider instanceof CustomProvider) {\n        return this._customProviderOptions.getToken.toString() === otherProvider._customProviderOptions.getToken.toString();\n      } else {\n        return false;\n      }\n    }\n  }]);\n  return CustomProvider;\n}(); /**\r\n      * Set throttle data to block requests until after a certain time\r\n      * depending on the failed request's status code.\r\n      * @param httpStatus - Status code of failed request.\r\n      * @param throttleData - `ThrottleData` object containing previous throttle\r\n      * data state.\r\n      * @returns Data about current throttle state and expiration time.\r\n      */\nfunction setBackoff(httpStatus, throttleData) {\n  /**\r\n   * Block retries for 1 day for the following error codes:\r\n   *\r\n   * 404: Likely malformed URL.\r\n   *\r\n   * 403:\r\n   * - Attestation failed\r\n   * - Wrong API key\r\n   * - Project deleted\r\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus: httpStatus\n    };\n  } else {\n    /**\r\n     * For all other error codes, the time when it is ok to retry again\r\n     * is based on exponential backoff.\r\n     */\n    var backoffCount = throttleData ? throttleData.backoffCount : 0;\n    var backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus: httpStatus\n    };\n  }\n}\nfunction throwIfThrottled(throttleData) {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(\"throttled\" /* THROTTLED */, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Activate App Check for the given app. Can be called only once per app.\r\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\r\n * @param options - App Check initialization options\r\n * @public\r\n */\nfunction initializeAppCheck() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  var options = arguments.length > 1 ? arguments[1] : undefined;\n  app = getModularInstance(app);\n  var provider = _getProvider(app, 'app-check');\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(function (token) {\n      return (\n        // Not using logger because I don't think we ever want this accidentally hidden.\n        console.log(\"App Check debug token: \".concat(token, \". You will need to add it to your app's App Check settings in the Firebase console for it to work.\"))\n      );\n    });\n  }\n  if (provider.isInitialized()) {\n    var existingInstance = provider.getImmediate();\n    var initialOptions = provider.getOptions();\n    if (initialOptions.isTokenAutoRefreshEnabled === options.isTokenAutoRefreshEnabled && initialOptions.provider.isEqual(options.provider)) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already-initialized\" /* ALREADY_INITIALIZED */, {\n        appName: app.name\n      });\n    }\n  }\n  var appCheck = provider.initialize({\n    options: options\n  });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    _addTokenListener(appCheck, \"INTERNAL\" /* INTERNAL */, function () {});\n  }\n  return appCheck;\n}\n/**\r\n * Activate App Check\r\n * @param app - Firebase app to activate App Check for.\r\n * @param provider - reCAPTCHA v3 provider or\r\n * custom token provider.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. If undefined, defaults to the\r\n * value of `app.automaticDataCollectionEnabled`, which defaults to\r\n * false and can be set in the app config.\r\n */\nfunction _activate(app, provider, isTokenAutoRefreshEnabled) {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  var state = setInitialState(app, Object.assign({}, DEFAULT_STATE));\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  state.cachedTokenPromise = readTokenFromStorage(app).then(function (cachedToken) {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken;\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, {\n        token: cachedToken.token\n      });\n    }\n    return cachedToken;\n  });\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled === undefined ? app.automaticDataCollectionEnabled : isTokenAutoRefreshEnabled;\n  state.provider.initialize(app);\n}\n/**\r\n * Set whether App Check will automatically refresh tokens as needed.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\r\n * refreshes App Check tokens as needed. This overrides any value set\r\n * during `initializeAppCheck()`.\r\n * @public\r\n */\nfunction setTokenAutoRefreshEnabled(appCheckInstance, isTokenAutoRefreshEnabled) {\n  var app = appCheckInstance.app;\n  var state = getStateReference(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\r\n * Get the current App Check token. Attaches to the most recent\r\n * in-flight request if one is present. Returns null if no token\r\n * is present and no token requests are in-flight.\r\n *\r\n * @param appCheckInstance - The App Check service instance.\r\n * @param forceRefresh - If true, will always try to fetch a fresh token.\r\n * If false, will use a cached token if found in storage.\r\n * @public\r\n */\nfunction getToken(_x10, _x11) {\n  return _getToken4.apply(this, arguments);\n} /**\r\n   * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\r\n   * pattern for public use.\r\n   */\nfunction _getToken4() {\n  _getToken4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(appCheckInstance, forceRefresh) {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n      while (1) {\n        switch (_context14.prev = _context14.next) {\n          case 0:\n            _context14.next = 2;\n            return getToken$2(appCheckInstance, forceRefresh);\n          case 2:\n            result = _context14.sent;\n            if (!result.error) {\n              _context14.next = 5;\n              break;\n            }\n            throw result.error;\n          case 5:\n            return _context14.abrupt(\"return\", {\n              token: result.token\n            });\n          case 6:\n          case \"end\":\n            return _context14.stop();\n        }\n      }\n    }, _callee14);\n  }));\n  return _getToken4.apply(this, arguments);\n}\nfunction onTokenChanged(appCheckInstance, onNextOrObserver, onError,\n/**\r\n * NOTE: Although an `onCompletion` callback can be provided, it will\r\n * never be called because the token stream is never-ending.\r\n * It is added only for API consistency with the observer pattern, which\r\n * we follow in JS APIs.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nonCompletion) {\n  var nextFn = function nextFn() {};\n  var errorFn = function errorFn() {};\n  if (onNextOrObserver.next != null) {\n    nextFn = onNextOrObserver.next.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver;\n  }\n  if (onNextOrObserver.error != null) {\n    errorFn = onNextOrObserver.error.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  _addTokenListener(appCheckInstance, \"EXTERNAL\" /* EXTERNAL */, nextFn, errorFn);\n  return function () {\n    return _removeTokenListener(appCheckInstance.app, nextFn);\n  };\n}\n\n/**\r\n * Firebase App Check\r\n *\r\n * @packageDocumentation\r\n */\nvar APP_CHECK_NAME = 'app-check';\nvar APP_CHECK_NAME_INTERNAL = 'app-check-internal';\nfunction registerAppCheck() {\n  // The public interface\n  _registerComponent(new Component(APP_CHECK_NAME, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var heartbeatServiceProvider = container.getProvider('heartbeat');\n    return factory(app, heartbeatServiceProvider);\n  }, \"PUBLIC\" /* PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */)\n  /**\r\n   * Initialize app-check-internal after app-check is initialized to make AppCheck available to\r\n   * other Firebase SDKs\r\n   */.setInstanceCreatedCallback(function (container, _identifier, _appcheckService) {\n    container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n  }));\n  // The internal interface used by other Firebase products\n  _registerComponent(new Component(APP_CHECK_NAME_INTERNAL, function (container) {\n    var appCheck = container.getProvider('app-check').getImmediate();\n    return internalFactory(appCheck);\n  }, \"PUBLIC\" /* PUBLIC */).setInstantiationMode(\"EXPLICIT\" /* EXPLICIT */));\n  registerVersion(name, version);\n}\nregisterAppCheck();\nexport { CustomProvider, ReCaptchaEnterpriseProvider, ReCaptchaV3Provider, getToken, initializeAppCheck, onTokenChanged, setTokenAutoRefreshEnabled };","map":{"version":3,"mappings":"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","names":["APP_CHECK_STATES","Map","DEFAULT_STATE","activated","tokenObservers","DEBUG_STATE","initialized","enabled","getStateReference","app","get","state","set","getDebugState","BASE_ENDPOINT","EXCHANGE_RECAPTCHA_TOKEN_METHOD","EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD","EXCHANGE_DEBUG_TOKEN_METHOD","TOKEN_REFRESH_TIME","OFFSET_DURATION","RETRIAL_MIN_WAIT","RETRIAL_MAX_WAIT","ONE_DAY","Refresher","operation","retryPolicy","getWaitDuration","lowerBound","upperBound","nextErrorWaitInterval","Error","process","catch","pending","reject","hasSucceeded","stop","Deferred","sleep","getNextRun","resolve","promise","currentErrorWaitInterval","ms","Promise","setTimeout","ERRORS","ERROR_FACTORY","ErrorFactory","isEnterprise","grecaptcha","enterprise","self","ensureActivated","create","appName","name","getDurationString","durationInMillis","totalSeconds","Math","round","days","floor","hours","minutes","seconds","result","pad","value","toString","exchangeToken","heartbeatServiceProvider","url","body","headers","heartbeatService","getImmediate","optional","getHeartbeatsHeader","heartbeatsHeader","options","method","JSON","stringify","fetch","response","originalErrorMessage","message","status","httpStatus","json","responseBody","match","ttl","isNaN","Number","timeToLiveAsNumber","now","Date","token","expireTimeMillis","issuedAtTimeMillis","reCAPTCHAToken","projectId","appId","apiKey","debugToken","debug_token","DB_NAME","DB_VERSION","STORE_NAME","DEBUG_TOKEN_KEY","dbPromise","getDBPromise","request","indexedDB","open","onsuccess","event","target","onerror","error","onupgradeneeded","db","oldVersion","createObjectStore","keyPath","e","readTokenFromIndexedDB","read","computeKey","write","writeDebugTokenToIndexedDB","readDebugTokenFromIndexedDB","key","transaction","store","objectStore","put","compositeKey","undefined","logger","Logger","readTokenFromStorage","isIndexedDBAvailable","warn","writeTokenToIndexedDB","readOrCreateDebugTokenFromStorage","existingDebugToken","newToken","uuidv4","isDebugMode","debugState","getDebugToken","initializeDebugMode","globals","getGlobal","FIREBASE_APPCHECK_DEBUG_TOKEN","deferredToken","defaultTokenErrorData","formatDummyToken","tokenErrorData","base64","encodeString","getToken","appCheck","forceRefresh","isValid","cachedTokenPromise","cachedToken","writeTokenToStorage","shouldCallListeners","exchangeTokenPromise","getExchangeDebugTokenRequest","finally","tokenFromDebugExchange","provider","code","interopTokenResult","makeDummyTokenResult","internalError","notifyTokenListeners","addTokenListener","type","listener","onError","tokenObserver","next","validToken","then","initTokenRefresher","newObservers","filter","length","tokenRefresher","isRunning","refresher","createTokenRefresher","isTokenAutoRefreshEnabled","start","nextRefreshTimeMillis","latestAllowableRefresh","min","max","observers","observer","AppCheckService","removeTokenListener","internalFactory","RECAPTCHA_URL","RECAPTCHA_ENTERPRISE_URL","siteKey","reCAPTCHAState","divId","makeDiv","getRecaptcha","loadReCAPTCHAV3Script","queueWidgetRender","loadReCAPTCHAEnterpriseScript","container","ready","renderInvisibleWidget","invisibleDiv","document","createElement","id","style","display","appendChild","recaptcha","_reject","execute","widgetId","action","render","sitekey","size","onload","script","src","head","ReCaptchaV3Provider","_siteKey","throwIfThrottled","_throttleData","getReCAPTCHAToken","_app","attestedClaimsToken","getExchangeRecaptchaV3TokenRequest","_heartbeatServiceProvider","setBackoff","_b","customData","time","allowRequestsAfter","_getProvider","initializeRecaptchaV3","otherProvider","ReCaptchaEnterpriseProvider","getExchangeRecaptchaEnterpriseTokenRequest","initializeRecaptchaEnterprise","CustomProvider","_customProviderOptions","customToken","issuedAtTimeSeconds","issuedAtTime","Object","throttleData","backoffCount","backoffMillis","calculateBackoffMillis","initializeAppCheck","getApp","getModularInstance","console","log","isInitialized","existingInstance","initialOptions","getOptions","isEqual","initialize","_activate","setInitialState","automaticDataCollectionEnabled","appCheckInstance","getTokenInternal","onTokenChanged","onNextOrObserver","onCompletion","nextFn","errorFn","bind","APP_CHECK_NAME","APP_CHECK_NAME_INTERNAL","registerAppCheck","_registerComponent","Component","getProvider","factory","setInstantiationMode","setInstanceCreatedCallback","_identifier","_appcheckService","registerVersion","version"],"sources":["../../src/state.ts","../../src/constants.ts","../../src/proactive-refresh.ts","../../src/errors.ts","../../src/util.ts","../../src/client.ts","../../src/indexeddb.ts","../../src/logger.ts","../../src/storage.ts","../../src/debug.ts","../../src/internal-api.ts","../../src/factory.ts","../../src/recaptcha.ts","../../src/providers.ts","../../src/api.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckProvider,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver\n} from './types';\nimport { Refresher } from './proactive-refresh';\nimport { Deferred } from '@firebase/util';\nimport { GreCAPTCHA } from './recaptcha';\nexport interface AppCheckState {\n  activated: boolean;\n  tokenObservers: AppCheckTokenObserver[];\n  provider?: AppCheckProvider;\n  token?: AppCheckTokenInternal;\n  cachedTokenPromise?: Promise<AppCheckTokenInternal | undefined>;\n  exchangeTokenPromise?: Promise<AppCheckTokenInternal>;\n  tokenRefresher?: Refresher;\n  reCAPTCHAState?: ReCAPTCHAState;\n  isTokenAutoRefreshEnabled?: boolean;\n}\n\nexport interface ReCAPTCHAState {\n  initialized: Deferred<GreCAPTCHA>;\n  widgetId?: string;\n}\n\nexport interface DebugState {\n  initialized: boolean;\n  enabled: boolean;\n  token?: Deferred<string>;\n}\n\nconst APP_CHECK_STATES = new Map<FirebaseApp, AppCheckState>();\nexport const DEFAULT_STATE: AppCheckState = {\n  activated: false,\n  tokenObservers: []\n};\n\nconst DEBUG_STATE: DebugState = {\n  initialized: false,\n  enabled: false\n};\n\n/**\n * Gets a reference to the state object.\n */\nexport function getStateReference(app: FirebaseApp): AppCheckState {\n  return APP_CHECK_STATES.get(app) || { ...DEFAULT_STATE };\n}\n\n/**\n * Set once on initialization. The map should hold the same reference to the\n * same object until this entry is deleted.\n */\nexport function setInitialState(\n  app: FirebaseApp,\n  state: AppCheckState\n): AppCheckState {\n  APP_CHECK_STATES.set(app, state);\n  return APP_CHECK_STATES.get(app) as AppCheckState;\n}\n\n// for testing only\nexport function clearState(): void {\n  APP_CHECK_STATES.clear();\n  DEBUG_STATE.enabled = false;\n  DEBUG_STATE.token = undefined;\n  DEBUG_STATE.initialized = false;\n}\n\nexport function getDebugState(): DebugState {\n  return DEBUG_STATE;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport const BASE_ENDPOINT =\n  'https://content-firebaseappcheck.googleapis.com/v1';\n\nexport const EXCHANGE_RECAPTCHA_TOKEN_METHOD = 'exchangeRecaptchaV3Token';\nexport const EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD =\n  'exchangeRecaptchaEnterpriseToken';\nexport const EXCHANGE_DEBUG_TOKEN_METHOD = 'exchangeDebugToken';\n\nexport const TOKEN_REFRESH_TIME = {\n  /**\n   * The offset time before token natural expiration to run the refresh.\n   * This is currently 5 minutes.\n   */\n  OFFSET_DURATION: 5 * 60 * 1000,\n  /**\n   * This is the first retrial wait after an error. This is currently\n   * 30 seconds.\n   */\n  RETRIAL_MIN_WAIT: 30 * 1000,\n  /**\n   * This is the maximum retrial wait, currently 16 minutes.\n   */\n  RETRIAL_MAX_WAIT: 16 * 60 * 1000\n};\n\n/**\n * One day in millis, for certain error code backoffs.\n */\nexport const ONE_DAY = 24 * 60 * 60 * 1000;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\n/**\n * Port from auth proactiverefresh.js\n *\n */\n// TODO: move it to @firebase/util?\n// TODO: allow to config whether refresh should happen in the background\nexport class Refresher {\n  private pending: Deferred<unknown> | null = null;\n  private nextErrorWaitInterval: number;\n  constructor(\n    private readonly operation: () => Promise<unknown>,\n    private readonly retryPolicy: (error: unknown) => boolean,\n    private readonly getWaitDuration: () => number,\n    private readonly lowerBound: number,\n    private readonly upperBound: number\n  ) {\n    this.nextErrorWaitInterval = lowerBound;\n\n    if (lowerBound > upperBound) {\n      throw new Error(\n        'Proactive refresh lower bound greater than upper bound!'\n      );\n    }\n  }\n\n  start(): void {\n    this.nextErrorWaitInterval = this.lowerBound;\n    this.process(true).catch(() => {\n      /* we don't care about the result */\n    });\n  }\n\n  stop(): void {\n    if (this.pending) {\n      this.pending.reject('cancelled');\n      this.pending = null;\n    }\n  }\n\n  isRunning(): boolean {\n    return !!this.pending;\n  }\n\n  private async process(hasSucceeded: boolean): Promise<void> {\n    this.stop();\n    try {\n      this.pending = new Deferred();\n      await sleep(this.getNextRun(hasSucceeded));\n\n      // Why do we resolve a promise, then immediate wait for it?\n      // We do it to make the promise chain cancellable.\n      // We can call stop() which rejects the promise before the following line execute, which makes\n      // the code jump to the catch block.\n      // TODO: unit test this\n      this.pending.resolve();\n      await this.pending.promise;\n      this.pending = new Deferred();\n      await this.operation();\n\n      this.pending.resolve();\n      await this.pending.promise;\n\n      this.process(true).catch(() => {\n        /* we don't care about the result */\n      });\n    } catch (error) {\n      if (this.retryPolicy(error)) {\n        this.process(false).catch(() => {\n          /* we don't care about the result */\n        });\n      } else {\n        this.stop();\n      }\n    }\n  }\n\n  private getNextRun(hasSucceeded: boolean): number {\n    if (hasSucceeded) {\n      // If last operation succeeded, reset next error wait interval and return\n      // the default wait duration.\n      this.nextErrorWaitInterval = this.lowerBound;\n      // Return typical wait duration interval after a successful operation.\n      return this.getWaitDuration();\n    } else {\n      // Get next error wait interval.\n      const currentErrorWaitInterval = this.nextErrorWaitInterval;\n      // Double interval for next consecutive error.\n      this.nextErrorWaitInterval *= 2;\n      // Make sure next wait interval does not exceed the maximum upper bound.\n      if (this.nextErrorWaitInterval > this.upperBound) {\n        this.nextErrorWaitInterval = this.upperBound;\n      }\n      return currentErrorWaitInterval;\n    }\n  }\n}\n\nfunction sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum AppCheckError {\n  ALREADY_INITIALIZED = 'already-initialized',\n  USE_BEFORE_ACTIVATION = 'use-before-activation',\n  FETCH_NETWORK_ERROR = 'fetch-network-error',\n  FETCH_PARSE_ERROR = 'fetch-parse-error',\n  FETCH_STATUS_ERROR = 'fetch-status-error',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_WRITE = 'storage-set',\n  RECAPTCHA_ERROR = 'recaptcha-error',\n  THROTTLED = 'throttled'\n}\n\nconst ERRORS: ErrorMap<AppCheckError> = {\n  [AppCheckError.ALREADY_INITIALIZED]:\n    'You have already called initializeAppCheck() for FirebaseApp {$appName} with ' +\n    'different options. To avoid this error, call initializeAppCheck() with the ' +\n    'same options as when it was originally called. This will return the ' +\n    'already initialized instance.',\n  [AppCheckError.USE_BEFORE_ACTIVATION]:\n    'App Check is being used before initializeAppCheck() is called for FirebaseApp {$appName}. ' +\n    'Call initializeAppCheck() before instantiating other Firebase services.',\n  [AppCheckError.FETCH_NETWORK_ERROR]:\n    'Fetch failed to connect to a network. Check Internet connection. ' +\n    'Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_PARSE_ERROR]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [AppCheckError.FETCH_STATUS_ERROR]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.',\n  [AppCheckError.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.STORAGE_WRITE]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [AppCheckError.RECAPTCHA_ERROR]: 'ReCAPTCHA error.',\n  [AppCheckError.THROTTLED]: `Requests throttled due to {$httpStatus} error. Attempts allowed again after {$time}`\n};\n\ninterface ErrorParams {\n  [AppCheckError.ALREADY_INITIALIZED]: { appName: string };\n  [AppCheckError.USE_BEFORE_ACTIVATION]: { appName: string };\n  [AppCheckError.FETCH_NETWORK_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_PARSE_ERROR]: { originalErrorMessage: string };\n  [AppCheckError.FETCH_STATUS_ERROR]: { httpStatus: number };\n  [AppCheckError.STORAGE_OPEN]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_GET]: { originalErrorMessage?: string };\n  [AppCheckError.STORAGE_WRITE]: { originalErrorMessage?: string };\n  [AppCheckError.THROTTLED]: { time: string; httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AppCheckError, ErrorParams>(\n  'appCheck',\n  'AppCheck',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { GreCAPTCHA } from './recaptcha';\nimport { getStateReference } from './state';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getRecaptcha(\n  isEnterprise: boolean = false\n): GreCAPTCHA | undefined {\n  if (isEnterprise) {\n    return self.grecaptcha?.enterprise;\n  }\n  return self.grecaptcha;\n}\n\nexport function ensureActivated(app: FirebaseApp): void {\n  if (!getStateReference(app).activated) {\n    throw ERROR_FACTORY.create(AppCheckError.USE_BEFORE_ACTIVATION, {\n      appName: app.name\n    });\n  }\n}\n\nexport function getDurationString(durationInMillis: number): string {\n  const totalSeconds = Math.round(durationInMillis / 1000);\n  const days = Math.floor(totalSeconds / (3600 * 24));\n  const hours = Math.floor((totalSeconds - days * 3600 * 24) / 3600);\n  const minutes = Math.floor(\n    (totalSeconds - days * 3600 * 24 - hours * 3600) / 60\n  );\n  const seconds = totalSeconds - days * 3600 * 24 - hours * 3600 - minutes * 60;\n\n  let result = '';\n  if (days) {\n    result += pad(days) + 'd:';\n  }\n  if (hours) {\n    result += pad(hours) + 'h:';\n  }\n  result += pad(minutes) + 'm:' + pad(seconds) + 's';\n  return result;\n}\n\nfunction pad(value: number): string {\n  if (value === 0) {\n    return '00';\n  }\n  return value >= 10 ? value.toString() : '0' + value;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BASE_ENDPOINT,\n  EXCHANGE_DEBUG_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD,\n  EXCHANGE_RECAPTCHA_TOKEN_METHOD\n} from './constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { Provider } from '@firebase/component';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Response JSON returned from AppCheck server endpoint.\n */\ninterface AppCheckResponse {\n  token: string;\n  // timeToLive\n  ttl: string;\n}\n\ninterface AppCheckRequest {\n  url: string;\n  body: { [key: string]: string };\n}\n\nexport async function exchangeToken(\n  { url, body }: AppCheckRequest,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): Promise<AppCheckTokenInternal> {\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json'\n  };\n  // If heartbeat service exists, add heartbeat header string to the header.\n  const heartbeatService = heartbeatServiceProvider.getImmediate({\n    optional: true\n  });\n  if (heartbeatService) {\n    const heartbeatsHeader = await heartbeatService.getHeartbeatsHeader();\n    if (heartbeatsHeader) {\n      headers['X-Firebase-Client'] = heartbeatsHeader;\n    }\n  }\n  const options: RequestInit = {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers\n  };\n  let response;\n  try {\n    response = await fetch(url, options);\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_NETWORK_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  if (response.status !== 200) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_STATUS_ERROR, {\n      httpStatus: response.status\n    });\n  }\n\n  let responseBody: AppCheckResponse;\n  try {\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    responseBody = await response.json();\n  } catch (originalError) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage: (originalError as Error)?.message\n    });\n  }\n\n  // Protobuf duration format.\n  // https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/Duration\n  const match = responseBody.ttl.match(/^([\\d.]+)(s)$/);\n  if (!match || !match[2] || isNaN(Number(match[1]))) {\n    throw ERROR_FACTORY.create(AppCheckError.FETCH_PARSE_ERROR, {\n      originalErrorMessage:\n        `ttl field (timeToLive) is not in standard Protobuf Duration ` +\n        `format: ${responseBody.ttl}`\n    });\n  }\n  const timeToLiveAsNumber = Number(match[1]) * 1000;\n\n  const now = Date.now();\n  return {\n    token: responseBody.token,\n    expireTimeMillis: now + timeToLiveAsNumber,\n    issuedAtTimeMillis: now\n  };\n}\n\nexport function getExchangeRecaptchaV3TokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_v3_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeRecaptchaEnterpriseTokenRequest(\n  app: FirebaseApp,\n  reCAPTCHAToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_RECAPTCHA_ENTERPRISE_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      'recaptcha_enterprise_token': reCAPTCHAToken\n    }\n  };\n}\n\nexport function getExchangeDebugTokenRequest(\n  app: FirebaseApp,\n  debugToken: string\n): AppCheckRequest {\n  const { projectId, appId, apiKey } = app.options;\n\n  return {\n    url: `${BASE_ENDPOINT}/projects/${projectId}/apps/${appId}:${EXCHANGE_DEBUG_TOKEN_METHOD}?key=${apiKey}`,\n    body: {\n      // eslint-disable-next-line\n      debug_token: debugToken\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport { AppCheckTokenInternal } from './types';\nconst DB_NAME = 'firebase-app-check-database';\nconst DB_VERSION = 1;\nconst STORE_NAME = 'firebase-app-check-store';\nconst DEBUG_TOKEN_KEY = 'debug-token';\n\nlet dbPromise: Promise<IDBDatabase> | null = null;\nfunction getDBPromise(): Promise<IDBDatabase> {\n  if (dbPromise) {\n    return dbPromise;\n  }\n\n  dbPromise = new Promise((resolve, reject) => {\n    try {\n      const request = indexedDB.open(DB_NAME, DB_VERSION);\n\n      request.onsuccess = event => {\n        resolve((event.target as IDBOpenDBRequest).result);\n      };\n\n      request.onerror = event => {\n        reject(\n          ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n            originalErrorMessage: (event.target as IDBRequest).error?.message\n          })\n        );\n      };\n\n      request.onupgradeneeded = event => {\n        const db = (event.target as IDBOpenDBRequest).result;\n\n        // We don't use 'break' in this switch statement, the fall-through\n        // behavior is what we want, because if there are multiple versions between\n        // the old version and the current version, we want ALL the migrations\n        // that correspond to those versions to run, not only the last one.\n        // eslint-disable-next-line default-case\n        switch (event.oldVersion) {\n          case 0:\n            db.createObjectStore(STORE_NAME, {\n              keyPath: 'compositeKey'\n            });\n        }\n      };\n    } catch (e) {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_OPEN, {\n          originalErrorMessage: (e as Error)?.message\n        })\n      );\n    }\n  });\n\n  return dbPromise;\n}\n\nexport function readTokenFromIndexedDB(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  return read(computeKey(app)) as Promise<AppCheckTokenInternal | undefined>;\n}\n\nexport function writeTokenToIndexedDB(\n  app: FirebaseApp,\n  token?: AppCheckTokenInternal\n): Promise<void> {\n  return write(computeKey(app), token);\n}\n\nexport function writeDebugTokenToIndexedDB(token: string): Promise<void> {\n  return write(DEBUG_TOKEN_KEY, token);\n}\n\nexport function readDebugTokenFromIndexedDB(): Promise<string | undefined> {\n  return read(DEBUG_TOKEN_KEY) as Promise<string | undefined>;\n}\n\nasync function write(key: string, value: unknown): Promise<void> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readwrite');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.put({\n    compositeKey: key,\n    value\n  });\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = _event => {\n      resolve();\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_WRITE, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nasync function read(key: string): Promise<unknown> {\n  const db = await getDBPromise();\n\n  const transaction = db.transaction(STORE_NAME, 'readonly');\n  const store = transaction.objectStore(STORE_NAME);\n  const request = store.get(key);\n\n  return new Promise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = (event.target as IDBRequest).result;\n\n      if (result) {\n        resolve(result.value);\n      } else {\n        resolve(undefined);\n      }\n    };\n\n    transaction.onerror = event => {\n      reject(\n        ERROR_FACTORY.create(AppCheckError.STORAGE_GET, {\n          originalErrorMessage: (event.target as IDBRequest).error?.message\n        })\n      );\n    };\n  });\n}\n\nfunction computeKey(app: FirebaseApp): string {\n  return `${app.options.appId}-${app.name}`;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/app-check');\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { isIndexedDBAvailable, uuidv4 } from '@firebase/util';\nimport {\n  readDebugTokenFromIndexedDB,\n  readTokenFromIndexedDB,\n  writeDebugTokenToIndexedDB,\n  writeTokenToIndexedDB\n} from './indexeddb';\nimport { logger } from './logger';\nimport { AppCheckTokenInternal } from './types';\n\n/**\n * Always resolves. In case of an error reading from indexeddb, resolve with undefined\n */\nexport async function readTokenFromStorage(\n  app: FirebaseApp\n): Promise<AppCheckTokenInternal | undefined> {\n  if (isIndexedDBAvailable()) {\n    let token = undefined;\n    try {\n      token = await readTokenFromIndexedDB(app);\n    } catch (e) {\n      // swallow the error and return undefined\n      logger.warn(`Failed to read token from IndexedDB. Error: ${e}`);\n    }\n    return token;\n  }\n\n  return undefined;\n}\n\n/**\n * Always resolves. In case of an error writing to indexeddb, print a warning and resolve the promise\n */\nexport function writeTokenToStorage(\n  app: FirebaseApp,\n  token?: AppCheckTokenInternal\n): Promise<void> {\n  if (isIndexedDBAvailable()) {\n    return writeTokenToIndexedDB(app, token).catch(e => {\n      // swallow the error and resolve the promise\n      logger.warn(`Failed to write token to IndexedDB. Error: ${e}`);\n    });\n  }\n\n  return Promise.resolve();\n}\n\nexport async function readOrCreateDebugTokenFromStorage(): Promise<string> {\n  /**\n   * Theoretically race condition can happen if we read, then write in 2 separate transactions.\n   * But it won't happen here, because this function will be called exactly once.\n   */\n  let existingDebugToken: string | undefined = undefined;\n  try {\n    existingDebugToken = await readDebugTokenFromIndexedDB();\n  } catch (_e) {\n    // failed to read from indexeddb. We assume there is no existing debug token, and generate a new one.\n  }\n\n  if (!existingDebugToken) {\n    // create a new debug token\n    const newToken = uuidv4();\n    // We don't need to block on writing to indexeddb\n    // In case persistence failed, a new debug token will be generated everytime the page is refreshed.\n    // It renders the debug token useless because you have to manually register(whitelist) the new token in the firebase console again and again.\n    // If you see this error trying to use debug token, it probably means you are using a browser that doesn't support indexeddb.\n    // You should switch to a different browser that supports indexeddb\n    writeDebugTokenToIndexedDB(newToken).catch(e =>\n      logger.warn(`Failed to persist debug token to IndexedDB. Error: ${e}`)\n    );\n    return newToken;\n  } else {\n    return existingDebugToken;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getDebugState } from './state';\nimport { readOrCreateDebugTokenFromStorage } from './storage';\nimport { Deferred, getGlobal } from '@firebase/util';\n\ndeclare global {\n  // var must be used for global scopes\n  // https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-4.html#type-checking-for-globalthis\n  // eslint-disable-next-line no-var\n  var FIREBASE_APPCHECK_DEBUG_TOKEN: boolean | string | undefined;\n}\n\nexport function isDebugMode(): boolean {\n  const debugState = getDebugState();\n  return debugState.enabled;\n}\n\nexport async function getDebugToken(): Promise<string> {\n  const state = getDebugState();\n\n  if (state.enabled && state.token) {\n    return state.token.promise;\n  } else {\n    // should not happen!\n    throw Error(`\n            Can't get debug token in production mode.\n        `);\n  }\n}\n\nexport function initializeDebugMode(): void {\n  const globals = getGlobal();\n  const debugState = getDebugState();\n  // Set to true if this function has been called, whether or not\n  // it enabled debug mode.\n  debugState.initialized = true;\n\n  if (\n    typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== 'string' &&\n    globals.FIREBASE_APPCHECK_DEBUG_TOKEN !== true\n  ) {\n    return;\n  }\n\n  debugState.enabled = true;\n  const deferredToken = new Deferred<string>();\n  debugState.token = deferredToken;\n\n  if (typeof globals.FIREBASE_APPCHECK_DEBUG_TOKEN === 'string') {\n    deferredToken.resolve(globals.FIREBASE_APPCHECK_DEBUG_TOKEN);\n  } else {\n    deferredToken.resolve(readOrCreateDebugTokenFromStorage());\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport {\n  AppCheckTokenResult,\n  AppCheckTokenInternal,\n  AppCheckTokenObserver,\n  ListenerType\n} from './types';\nimport { AppCheckTokenListener } from './public-types';\nimport { getStateReference } from './state';\nimport { TOKEN_REFRESH_TIME } from './constants';\nimport { Refresher } from './proactive-refresh';\nimport { ensureActivated } from './util';\nimport { exchangeToken, getExchangeDebugTokenRequest } from './client';\nimport { writeTokenToStorage } from './storage';\nimport { getDebugToken, isDebugMode } from './debug';\nimport { base64, FirebaseError } from '@firebase/util';\nimport { logger } from './logger';\nimport { AppCheckService } from './factory';\nimport { AppCheckError } from './errors';\n\n// Initial hardcoded value agreed upon across platforms for initial launch.\n// Format left open for possible dynamic error values and other fields in the future.\nexport const defaultTokenErrorData = { error: 'UNKNOWN_ERROR' };\n\n/**\n * Stringify and base64 encode token error data.\n *\n * @param tokenError Error data, currently hardcoded.\n */\nexport function formatDummyToken(\n  tokenErrorData: Record<string, string>\n): string {\n  return base64.encodeString(\n    JSON.stringify(tokenErrorData),\n    /* webSafe= */ false\n  );\n}\n\n/**\n * This function always resolves.\n * The result will contain an error field if there is any error.\n * In case there is an error, the token field in the result will be populated with a dummy value\n */\nexport async function getToken(\n  appCheck: AppCheckService,\n  forceRefresh = false\n): Promise<AppCheckTokenResult> {\n  const app = appCheck.app;\n  ensureActivated(app);\n\n  const state = getStateReference(app);\n\n  /**\n   * First check if there is a token in memory from a previous `getToken()` call.\n   */\n  let token: AppCheckTokenInternal | undefined = state.token;\n  let error: Error | undefined = undefined;\n\n  /**\n   * If an invalid token was found in memory, clear token from\n   * memory and unset the local variable `token`.\n   */\n  if (token && !isValid(token)) {\n    state.token = undefined;\n    token = undefined;\n  }\n\n  /**\n   * If there is no valid token in memory, try to load token from indexedDB.\n   */\n  if (!token) {\n    // cachedTokenPromise contains the token found in IndexedDB or undefined if not found.\n    const cachedToken = await state.cachedTokenPromise;\n    if (cachedToken) {\n      if (isValid(cachedToken)) {\n        token = cachedToken;\n      } else {\n        // If there was an invalid token in the indexedDB cache, clear it.\n        await writeTokenToStorage(app, undefined);\n      }\n    }\n  }\n\n  // Return the cached token (from either memory or indexedDB) if it's valid\n  if (!forceRefresh && token && isValid(token)) {\n    return {\n      token: token.token\n    };\n  }\n\n  // Only set to true if this `getToken()` call is making the actual\n  // REST call to the exchange endpoint, versus waiting for an already\n  // in-flight call (see debug and regular exchange endpoint paths below)\n  let shouldCallListeners = false;\n\n  /**\n   * DEBUG MODE\n   * If debug mode is set, and there is no cached token, fetch a new App\n   * Check token using the debug token, and return it directly.\n   */\n  if (isDebugMode()) {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      state.exchangeTokenPromise = exchangeToken(\n        getExchangeDebugTokenRequest(app, await getDebugToken()),\n        appCheck.heartbeatServiceProvider\n      ).finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    const tokenFromDebugExchange: AppCheckTokenInternal =\n      await state.exchangeTokenPromise;\n    // Write debug token to indexedDB.\n    await writeTokenToStorage(app, tokenFromDebugExchange);\n    // Write debug token to state.\n    state.token = tokenFromDebugExchange;\n    return { token: tokenFromDebugExchange.token };\n  }\n\n  /**\n   * There are no valid tokens in memory or indexedDB and we are not in\n   * debug mode.\n   * Request a new token from the exchange endpoint.\n   */\n  try {\n    // Avoid making another call to the exchange endpoint if one is in flight.\n    if (!state.exchangeTokenPromise) {\n      // state.provider is populated in initializeAppCheck()\n      // ensureActivated() at the top of this function checks that\n      // initializeAppCheck() has been called.\n      state.exchangeTokenPromise = state.provider!.getToken().finally(() => {\n        // Clear promise when settled - either resolved or rejected.\n        state.exchangeTokenPromise = undefined;\n      });\n      shouldCallListeners = true;\n    }\n    token = await getStateReference(app).exchangeTokenPromise;\n  } catch (e) {\n    if ((e as FirebaseError).code === `appCheck/${AppCheckError.THROTTLED}`) {\n      // Warn if throttled, but do not treat it as an error.\n      logger.warn((e as FirebaseError).message);\n    } else {\n      // `getToken()` should never throw, but logging error text to console will aid debugging.\n      logger.error(e);\n    }\n    // Always save error to be added to dummy token.\n    error = e as FirebaseError;\n  }\n\n  let interopTokenResult: AppCheckTokenResult | undefined;\n  if (!token) {\n    // If token is undefined, there must be an error.\n    // Return a dummy token along with the error.\n    interopTokenResult = makeDummyTokenResult(error!);\n  } else if (error) {\n    if (isValid(token)) {\n      // It's also possible a valid token exists, but there's also an error.\n      // (Such as if the token is almost expired, tries to refresh, and\n      // the exchange request fails.)\n      // We add a special error property here so that the refresher will\n      // count this as a failed attempt and use the backoff instead of\n      // retrying repeatedly with no delay, but any 3P listeners will not\n      // be hindered in getting the still-valid token.\n      interopTokenResult = {\n        token: token.token,\n        internalError: error\n      };\n    } else {\n      // No invalid tokens should make it to this step. Memory and cached tokens\n      // are checked. Other tokens are from fresh exchanges. But just in case.\n      interopTokenResult = makeDummyTokenResult(error!);\n    }\n  } else {\n    interopTokenResult = {\n      token: token.token\n    };\n    // write the new token to the memory state as well as the persistent storage.\n    // Only do it if we got a valid new token\n    state.token = token;\n    await writeTokenToStorage(app, token);\n  }\n\n  if (shouldCallListeners) {\n    notifyTokenListeners(app, interopTokenResult);\n  }\n  return interopTokenResult;\n}\n\nexport function addTokenListener(\n  appCheck: AppCheckService,\n  type: ListenerType,\n  listener: AppCheckTokenListener,\n  onError?: (error: Error) => void\n): void {\n  const { app } = appCheck;\n  const state = getStateReference(app);\n  const tokenObserver: AppCheckTokenObserver = {\n    next: listener,\n    error: onError,\n    type\n  };\n  state.tokenObservers = [...state.tokenObservers, tokenObserver];\n\n  // Invoke the listener async immediately if there is a valid token\n  // in memory.\n  if (state.token && isValid(state.token)) {\n    const validToken = state.token;\n    Promise.resolve()\n      .then(() => {\n        listener({ token: validToken.token });\n        initTokenRefresher(appCheck);\n      })\n      .catch(() => {\n        /* we don't care about exceptions thrown in listeners */\n      });\n  }\n\n  /**\n   * Wait for any cached token promise to resolve before starting the token\n   * refresher. The refresher checks to see if there is an existing token\n   * in state and calls the exchange endpoint if not. We should first let the\n   * IndexedDB check have a chance to populate state if it can.\n   *\n   * Listener call isn't needed here because cachedTokenPromise will call any\n   * listeners that exist when it resolves.\n   */\n\n  // state.cachedTokenPromise is always populated in `activate()`.\n  void state.cachedTokenPromise!.then(() => initTokenRefresher(appCheck));\n}\n\nexport function removeTokenListener(\n  app: FirebaseApp,\n  listener: AppCheckTokenListener\n): void {\n  const state = getStateReference(app);\n\n  const newObservers = state.tokenObservers.filter(\n    tokenObserver => tokenObserver.next !== listener\n  );\n  if (\n    newObservers.length === 0 &&\n    state.tokenRefresher &&\n    state.tokenRefresher.isRunning()\n  ) {\n    state.tokenRefresher.stop();\n  }\n\n  state.tokenObservers = newObservers;\n}\n\n/**\n * Logic to create and start refresher as needed.\n */\nfunction initTokenRefresher(appCheck: AppCheckService): void {\n  const { app } = appCheck;\n  const state = getStateReference(app);\n  // Create the refresher but don't start it if `isTokenAutoRefreshEnabled`\n  // is not true.\n  let refresher: Refresher | undefined = state.tokenRefresher;\n  if (!refresher) {\n    refresher = createTokenRefresher(appCheck);\n    state.tokenRefresher = refresher;\n  }\n  if (!refresher.isRunning() && state.isTokenAutoRefreshEnabled) {\n    refresher.start();\n  }\n}\n\nfunction createTokenRefresher(appCheck: AppCheckService): Refresher {\n  const { app } = appCheck;\n  return new Refresher(\n    // Keep in mind when this fails for any reason other than the ones\n    // for which we should retry, it will effectively stop the proactive refresh.\n    async () => {\n      const state = getStateReference(app);\n      // If there is no token, we will try to load it from storage and use it\n      // If there is a token, we force refresh it because we know it's going to expire soon\n      let result;\n      if (!state.token) {\n        result = await getToken(appCheck);\n      } else {\n        result = await getToken(appCheck, true);\n      }\n\n      /**\n       * getToken() always resolves. In case the result has an error field defined, it means\n       * the operation failed, and we should retry.\n       */\n      if (result.error) {\n        throw result.error;\n      }\n      /**\n       * A special `internalError` field reflects that there was an error\n       * getting a new token from the exchange endpoint, but there's still a\n       * previous token that's valid for now and this should be passed to 2P/3P\n       * requests for a token. But we want this callback (`this.operation` in\n       * `Refresher`) to throw in order to kick off the Refresher's retry\n       * backoff. (Setting `hasSucceeded` to false.)\n       */\n      if (result.internalError) {\n        throw result.internalError;\n      }\n    },\n    () => {\n      return true;\n    },\n    () => {\n      const state = getStateReference(app);\n\n      if (state.token) {\n        // issuedAtTime + (50% * total TTL) + 5 minutes\n        let nextRefreshTimeMillis =\n          state.token.issuedAtTimeMillis +\n          (state.token.expireTimeMillis - state.token.issuedAtTimeMillis) *\n            0.5 +\n          5 * 60 * 1000;\n        // Do not allow refresh time to be past (expireTime - 5 minutes)\n        const latestAllowableRefresh =\n          state.token.expireTimeMillis - 5 * 60 * 1000;\n        nextRefreshTimeMillis = Math.min(\n          nextRefreshTimeMillis,\n          latestAllowableRefresh\n        );\n        return Math.max(0, nextRefreshTimeMillis - Date.now());\n      } else {\n        return 0;\n      }\n    },\n    TOKEN_REFRESH_TIME.RETRIAL_MIN_WAIT,\n    TOKEN_REFRESH_TIME.RETRIAL_MAX_WAIT\n  );\n}\n\nexport function notifyTokenListeners(\n  app: FirebaseApp,\n  token: AppCheckTokenResult\n): void {\n  const observers = getStateReference(app).tokenObservers;\n\n  for (const observer of observers) {\n    try {\n      if (observer.type === ListenerType.EXTERNAL && token.error != null) {\n        // If this listener was added by a 3P call, send any token error to\n        // the supplied error handler. A 3P observer always has an error\n        // handler.\n        observer.error!(token.error);\n      } else {\n        // If the token has no error field, always return the token.\n        // If this is a 2P listener, return the token, whether or not it\n        // has an error field.\n        observer.next(token);\n      }\n    } catch (e) {\n      // Errors in the listener function itself are always ignored.\n    }\n  }\n}\n\nexport function isValid(token: AppCheckTokenInternal): boolean {\n  return token.expireTimeMillis - Date.now() > 0;\n}\n\nfunction makeDummyTokenResult(error: Error): AppCheckTokenResult {\n  return {\n    token: formatDummyToken(defaultTokenErrorData),\n    error\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AppCheck } from './public-types';\nimport { FirebaseApp, _FirebaseService } from '@firebase/app';\nimport { FirebaseAppCheckInternal, ListenerType } from './types';\nimport {\n  getToken,\n  addTokenListener,\n  removeTokenListener\n} from './internal-api';\nimport { Provider } from '@firebase/component';\nimport { getStateReference } from './state';\n\n/**\n * AppCheck Service class.\n */\nexport class AppCheckService implements AppCheck, _FirebaseService {\n  constructor(\n    public app: FirebaseApp,\n    public heartbeatServiceProvider: Provider<'heartbeat'>\n  ) {}\n  _delete(): Promise<void> {\n    const { tokenObservers } = getStateReference(this.app);\n    for (const tokenObserver of tokenObservers) {\n      removeTokenListener(this.app, tokenObserver.next);\n    }\n    return Promise.resolve();\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  heartbeatServiceProvider: Provider<'heartbeat'>\n): AppCheckService {\n  return new AppCheckService(app, heartbeatServiceProvider);\n}\n\nexport function internalFactory(\n  appCheck: AppCheckService\n): FirebaseAppCheckInternal {\n  return {\n    getToken: forceRefresh => getToken(appCheck, forceRefresh),\n    addTokenListener: listener =>\n      addTokenListener(appCheck, ListenerType.INTERNAL, listener),\n    removeTokenListener: listener => removeTokenListener(appCheck.app, listener)\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app';\nimport { getStateReference } from './state';\nimport { Deferred } from '@firebase/util';\nimport { getRecaptcha, ensureActivated } from './util';\n\nexport const RECAPTCHA_URL = 'https://www.google.com/recaptcha/api.js';\nexport const RECAPTCHA_ENTERPRISE_URL =\n  'https://www.google.com/recaptcha/enterprise.js';\n\nexport function initializeV3(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  const state = getStateReference(app);\n  state.reCAPTCHAState = { initialized };\n\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(false);\n  if (!grecaptcha) {\n    loadReCAPTCHAV3Script(() => {\n      const grecaptcha = getRecaptcha(false);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\nexport function initializeEnterprise(\n  app: FirebaseApp,\n  siteKey: string\n): Promise<GreCAPTCHA> {\n  const initialized = new Deferred<GreCAPTCHA>();\n\n  const state = getStateReference(app);\n  state.reCAPTCHAState = { initialized };\n\n  const divId = makeDiv(app);\n\n  const grecaptcha = getRecaptcha(true);\n  if (!grecaptcha) {\n    loadReCAPTCHAEnterpriseScript(() => {\n      const grecaptcha = getRecaptcha(true);\n\n      if (!grecaptcha) {\n        // it shouldn't happen.\n        throw new Error('no recaptcha');\n      }\n      queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n    });\n  } else {\n    queueWidgetRender(app, siteKey, grecaptcha, divId, initialized);\n  }\n  return initialized.promise;\n}\n\n/**\n * Add listener to render the widget and resolve the promise when\n * the grecaptcha.ready() event fires.\n */\nfunction queueWidgetRender(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string,\n  initialized: Deferred<GreCAPTCHA>\n): void {\n  grecaptcha.ready(() => {\n    // Invisible widgets allow us to set a different siteKey for each widget,\n    // so we use them to support multiple apps\n    renderInvisibleWidget(app, siteKey, grecaptcha, container);\n    initialized.resolve(grecaptcha);\n  });\n}\n\n/**\n * Add invisible div to page.\n */\nfunction makeDiv(app: FirebaseApp): string {\n  const divId = `fire_app_check_${app.name}`;\n  const invisibleDiv = document.createElement('div');\n  invisibleDiv.id = divId;\n  invisibleDiv.style.display = 'none';\n\n  document.body.appendChild(invisibleDiv);\n  return divId;\n}\n\nexport async function getToken(app: FirebaseApp): Promise<string> {\n  ensureActivated(app);\n\n  // ensureActivated() guarantees that reCAPTCHAState is set\n  const reCAPTCHAState = getStateReference(app).reCAPTCHAState!;\n  const recaptcha = await reCAPTCHAState.initialized.promise;\n\n  return new Promise((resolve, _reject) => {\n    // Updated after initialization is complete.\n    const reCAPTCHAState = getStateReference(app).reCAPTCHAState!;\n    recaptcha.ready(() => {\n      resolve(\n        // widgetId is guaranteed to be available if reCAPTCHAState.initialized.promise resolved.\n        recaptcha.execute(reCAPTCHAState.widgetId!, {\n          action: 'fire_app_check'\n        })\n      );\n    });\n  });\n}\n\n/**\n *\n * @param app\n * @param container - Id of a HTML element.\n */\nfunction renderInvisibleWidget(\n  app: FirebaseApp,\n  siteKey: string,\n  grecaptcha: GreCAPTCHA,\n  container: string\n): void {\n  const widgetId = grecaptcha.render(container, {\n    sitekey: siteKey,\n    size: 'invisible'\n  });\n  const state = getStateReference(app);\n\n  state.reCAPTCHAState = {\n    ...state.reCAPTCHAState!, // state.reCAPTCHAState is set in the initialize()\n    widgetId\n  };\n}\n\nfunction loadReCAPTCHAV3Script(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\nfunction loadReCAPTCHAEnterpriseScript(onload: () => void): void {\n  const script = document.createElement('script');\n  script.src = RECAPTCHA_ENTERPRISE_URL;\n  script.onload = onload;\n  document.head.appendChild(script);\n}\n\ndeclare global {\n  interface Window {\n    grecaptcha: GreCAPTCHATopLevel | undefined;\n  }\n}\n\nexport interface GreCAPTCHATopLevel extends GreCAPTCHA {\n  enterprise: GreCAPTCHA;\n}\n\nexport interface GreCAPTCHA {\n  ready: (callback: () => void) => void;\n  execute: (siteKey: string, options: { action: string }) => Promise<string>;\n  render: (\n    container: string | HTMLElement,\n    parameters: GreCAPTCHARenderOption\n  ) => string;\n}\n\nexport interface GreCAPTCHARenderOption {\n  sitekey: string;\n  size: 'invisible';\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _getProvider } from '@firebase/app';\nimport { Provider } from '@firebase/component';\nimport {\n  FirebaseError,\n  issuedAtTime,\n  calculateBackoffMillis\n} from '@firebase/util';\nimport {\n  exchangeToken,\n  getExchangeRecaptchaEnterpriseTokenRequest,\n  getExchangeRecaptchaV3TokenRequest\n} from './client';\nimport { ONE_DAY } from './constants';\nimport { AppCheckError, ERROR_FACTORY } from './errors';\nimport { CustomProviderOptions } from './public-types';\nimport {\n  getToken as getReCAPTCHAToken,\n  initializeV3 as initializeRecaptchaV3,\n  initializeEnterprise as initializeRecaptchaEnterprise\n} from './recaptcha';\nimport { AppCheckProvider, AppCheckTokenInternal, ThrottleData } from './types';\nimport { getDurationString } from './util';\n\n/**\n * App Check provider that can obtain a reCAPTCHA V3 token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaV3Provider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaV3Provider instance.\n   * @param siteKey - ReCAPTCHA V3 siteKey.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaV3TokenRequest(this._app!, attestedClaimsToken),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if (\n        (e as FirebaseError).code?.includes(AppCheckError.FETCH_STATUS_ERROR)\n      ) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaV3(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaV3Provider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * App Check provider that can obtain a reCAPTCHA Enterprise token and exchange it\n * for an App Check token.\n *\n * @public\n */\nexport class ReCaptchaEnterpriseProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n  private _heartbeatServiceProvider?: Provider<'heartbeat'>;\n  /**\n   * Throttle requests on certain error codes to prevent too many retries\n   * in a short time.\n   */\n  private _throttleData: ThrottleData | null = null;\n  /**\n   * Create a ReCaptchaEnterpriseProvider instance.\n   * @param siteKey - reCAPTCHA Enterprise score-based site key.\n   */\n  constructor(private _siteKey: string) {}\n\n  /**\n   * Returns an App Check token.\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    throwIfThrottled(this._throttleData);\n    // Top-level `getToken()` has already checked that App Check is initialized\n    // and therefore this._app and this._heartbeatServiceProvider are available.\n    const attestedClaimsToken = await getReCAPTCHAToken(this._app!).catch(\n      _e => {\n        // reCaptcha.execute() throws null which is not very descriptive.\n        throw ERROR_FACTORY.create(AppCheckError.RECAPTCHA_ERROR);\n      }\n    );\n    let result;\n    try {\n      result = await exchangeToken(\n        getExchangeRecaptchaEnterpriseTokenRequest(\n          this._app!,\n          attestedClaimsToken\n        ),\n        this._heartbeatServiceProvider!\n      );\n    } catch (e) {\n      if (\n        (e as FirebaseError).code?.includes(AppCheckError.FETCH_STATUS_ERROR)\n      ) {\n        this._throttleData = setBackoff(\n          Number((e as FirebaseError).customData?.httpStatus),\n          this._throttleData\n        );\n        throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n          time: getDurationString(\n            this._throttleData.allowRequestsAfter - Date.now()\n          ),\n          httpStatus: this._throttleData.httpStatus\n        });\n      } else {\n        throw e;\n      }\n    }\n    // If successful, clear throttle data.\n    this._throttleData = null;\n    return result;\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n    this._heartbeatServiceProvider = _getProvider(app, 'heartbeat');\n    initializeRecaptchaEnterprise(app, this._siteKey).catch(() => {\n      /* we don't care about the initialization result */\n    });\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof ReCaptchaEnterpriseProvider) {\n      return this._siteKey === otherProvider._siteKey;\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Custom provider class.\n * @public\n */\nexport class CustomProvider implements AppCheckProvider {\n  private _app?: FirebaseApp;\n\n  constructor(private _customProviderOptions: CustomProviderOptions) {}\n\n  /**\n   * @internal\n   */\n  async getToken(): Promise<AppCheckTokenInternal> {\n    // custom provider\n    const customToken = await this._customProviderOptions.getToken();\n    // Try to extract IAT from custom token, in case this token is not\n    // being newly issued. JWT timestamps are in seconds since epoch.\n    const issuedAtTimeSeconds = issuedAtTime(customToken.token);\n    // Very basic validation, use current timestamp as IAT if JWT\n    // has no `iat` field or value is out of bounds.\n    const issuedAtTimeMillis =\n      issuedAtTimeSeconds !== null &&\n      issuedAtTimeSeconds < Date.now() &&\n      issuedAtTimeSeconds > 0\n        ? issuedAtTimeSeconds * 1000\n        : Date.now();\n\n    return { ...customToken, issuedAtTimeMillis };\n  }\n\n  /**\n   * @internal\n   */\n  initialize(app: FirebaseApp): void {\n    this._app = app;\n  }\n\n  /**\n   * @internal\n   */\n  isEqual(otherProvider: unknown): boolean {\n    if (otherProvider instanceof CustomProvider) {\n      return (\n        this._customProviderOptions.getToken.toString() ===\n        otherProvider._customProviderOptions.getToken.toString()\n      );\n    } else {\n      return false;\n    }\n  }\n}\n\n/**\n * Set throttle data to block requests until after a certain time\n * depending on the failed request's status code.\n * @param httpStatus - Status code of failed request.\n * @param throttleData - `ThrottleData` object containing previous throttle\n * data state.\n * @returns Data about current throttle state and expiration time.\n */\nfunction setBackoff(\n  httpStatus: number,\n  throttleData: ThrottleData | null\n): ThrottleData {\n  /**\n   * Block retries for 1 day for the following error codes:\n   *\n   * 404: Likely malformed URL.\n   *\n   * 403:\n   * - Attestation failed\n   * - Wrong API key\n   * - Project deleted\n   */\n  if (httpStatus === 404 || httpStatus === 403) {\n    return {\n      backoffCount: 1,\n      allowRequestsAfter: Date.now() + ONE_DAY,\n      httpStatus\n    };\n  } else {\n    /**\n     * For all other error codes, the time when it is ok to retry again\n     * is based on exponential backoff.\n     */\n    const backoffCount = throttleData ? throttleData.backoffCount : 0;\n    const backoffMillis = calculateBackoffMillis(backoffCount, 1000, 2);\n    return {\n      backoffCount: backoffCount + 1,\n      allowRequestsAfter: Date.now() + backoffMillis,\n      httpStatus\n    };\n  }\n}\n\nfunction throwIfThrottled(throttleData: ThrottleData | null): void {\n  if (throttleData) {\n    if (Date.now() - throttleData.allowRequestsAfter <= 0) {\n      // If before, throw.\n      throw ERROR_FACTORY.create(AppCheckError.THROTTLED, {\n        time: getDurationString(throttleData.allowRequestsAfter - Date.now()),\n        httpStatus: throttleData.httpStatus\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheck,\n  AppCheckOptions,\n  AppCheckTokenResult,\n  Unsubscribe,\n  PartialObserver\n} from './public-types';\nimport { ERROR_FACTORY, AppCheckError } from './errors';\nimport {\n  getStateReference,\n  getDebugState,\n  DEFAULT_STATE,\n  setInitialState\n} from './state';\nimport { FirebaseApp, getApp, _getProvider } from '@firebase/app';\nimport { getModularInstance, ErrorFn, NextFn } from '@firebase/util';\nimport { AppCheckService } from './factory';\nimport { AppCheckProvider, ListenerType } from './types';\nimport {\n  getToken as getTokenInternal,\n  addTokenListener,\n  removeTokenListener,\n  isValid,\n  notifyTokenListeners\n} from './internal-api';\nimport { readTokenFromStorage } from './storage';\nimport { getDebugToken, initializeDebugMode, isDebugMode } from './debug';\n\ndeclare module '@firebase/component' {\n  interface NameServiceMapping {\n    'app-check': AppCheckService;\n  }\n}\n\nexport {\n  ReCaptchaV3Provider,\n  CustomProvider,\n  ReCaptchaEnterpriseProvider\n} from './providers';\n\n/**\n * Activate App Check for the given app. Can be called only once per app.\n * @param app - the {@link @firebase/app#FirebaseApp} to activate App Check for\n * @param options - App Check initialization options\n * @public\n */\nexport function initializeAppCheck(\n  app: FirebaseApp = getApp(),\n  options: AppCheckOptions\n): AppCheck {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'app-check');\n\n  // Ensure initializeDebugMode() is only called once.\n  if (!getDebugState().initialized) {\n    initializeDebugMode();\n  }\n\n  // Log a message containing the debug token when `initializeAppCheck()`\n  // is called in debug mode.\n  if (isDebugMode()) {\n    // Do not block initialization to get the token for the message.\n    void getDebugToken().then(token =>\n      // Not using logger because I don't think we ever want this accidentally hidden.\n      console.log(\n        `App Check debug token: ${token}. You will need to add it to your app's App Check settings in the Firebase console for it to work.`\n      )\n    );\n  }\n\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialOptions = provider.getOptions() as unknown as AppCheckOptions;\n    if (\n      initialOptions.isTokenAutoRefreshEnabled ===\n        options.isTokenAutoRefreshEnabled &&\n      initialOptions.provider.isEqual(options.provider)\n    ) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(AppCheckError.ALREADY_INITIALIZED, {\n        appName: app.name\n      });\n    }\n  }\n\n  const appCheck = provider.initialize({ options });\n  _activate(app, options.provider, options.isTokenAutoRefreshEnabled);\n  // If isTokenAutoRefreshEnabled is false, do not send any requests to the\n  // exchange endpoint without an explicit call from the user either directly\n  // or through another Firebase library (storage, functions, etc.)\n  if (getStateReference(app).isTokenAutoRefreshEnabled) {\n    // Adding a listener will start the refresher and fetch a token if needed.\n    // This gets a token ready and prevents a delay when an internal library\n    // requests the token.\n    // Listener function does not need to do anything, its base functionality\n    // of calling getToken() already fetches token and writes it to memory/storage.\n    addTokenListener(appCheck, ListenerType.INTERNAL, () => {});\n  }\n\n  return appCheck;\n}\n\n/**\n * Activate App Check\n * @param app - Firebase app to activate App Check for.\n * @param provider - reCAPTCHA v3 provider or\n * custom token provider.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. If undefined, defaults to the\n * value of `app.automaticDataCollectionEnabled`, which defaults to\n * false and can be set in the app config.\n */\nfunction _activate(\n  app: FirebaseApp,\n  provider: AppCheckProvider,\n  isTokenAutoRefreshEnabled?: boolean\n): void {\n  // Create an entry in the APP_CHECK_STATES map. Further changes should\n  // directly mutate this object.\n  const state = setInitialState(app, { ...DEFAULT_STATE });\n\n  state.activated = true;\n  state.provider = provider; // Read cached token from storage if it exists and store it in memory.\n  state.cachedTokenPromise = readTokenFromStorage(app).then(cachedToken => {\n    if (cachedToken && isValid(cachedToken)) {\n      state.token = cachedToken;\n      // notify all listeners with the cached token\n      notifyTokenListeners(app, { token: cachedToken.token });\n    }\n    return cachedToken;\n  });\n\n  // Use value of global `automaticDataCollectionEnabled` (which\n  // itself defaults to false if not specified in config) if\n  // `isTokenAutoRefreshEnabled` param was not provided by user.\n  state.isTokenAutoRefreshEnabled =\n    isTokenAutoRefreshEnabled === undefined\n      ? app.automaticDataCollectionEnabled\n      : isTokenAutoRefreshEnabled;\n\n  state.provider.initialize(app);\n}\n\n/**\n * Set whether App Check will automatically refresh tokens as needed.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param isTokenAutoRefreshEnabled - If true, the SDK automatically\n * refreshes App Check tokens as needed. This overrides any value set\n * during `initializeAppCheck()`.\n * @public\n */\nexport function setTokenAutoRefreshEnabled(\n  appCheckInstance: AppCheck,\n  isTokenAutoRefreshEnabled: boolean\n): void {\n  const app = appCheckInstance.app;\n  const state = getStateReference(app);\n  // This will exist if any product libraries have called\n  // `addTokenListener()`\n  if (state.tokenRefresher) {\n    if (isTokenAutoRefreshEnabled === true) {\n      state.tokenRefresher.start();\n    } else {\n      state.tokenRefresher.stop();\n    }\n  }\n  state.isTokenAutoRefreshEnabled = isTokenAutoRefreshEnabled;\n}\n/**\n * Get the current App Check token. Attaches to the most recent\n * in-flight request if one is present. Returns null if no token\n * is present and no token requests are in-flight.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param forceRefresh - If true, will always try to fetch a fresh token.\n * If false, will use a cached token if found in storage.\n * @public\n */\nexport async function getToken(\n  appCheckInstance: AppCheck,\n  forceRefresh?: boolean\n): Promise<AppCheckTokenResult> {\n  const result = await getTokenInternal(\n    appCheckInstance as AppCheckService,\n    forceRefresh\n  );\n  if (result.error) {\n    throw result.error;\n  }\n  return { token: result.token };\n}\n\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param observer - An object with `next`, `error`, and `complete`\n * properties. `next` is called with an\n * {@link AppCheckTokenResult}\n * whenever the token changes. `error` is optional and is called if an\n * error is thrown by the listener (the `next` function). `complete`\n * is unused, as the token stream is unending.\n *\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  observer: PartialObserver<AppCheckTokenResult>\n): Unsubscribe;\n/**\n * Registers a listener to changes in the token state. There can be more\n * than one listener registered at the same time for one or more\n * App Check instances. The listeners call back on the UI thread whenever\n * the current token associated with this App Check instance changes.\n *\n * @param appCheckInstance - The App Check service instance.\n * @param onNext - When the token changes, this function is called with aa\n * {@link AppCheckTokenResult}.\n * @param onError - Optional. Called if there is an error thrown by the\n * listener (the `onNext` function).\n * @param onCompletion - Currently unused, as the token stream is unending.\n * @returns A function that unsubscribes this listener.\n * @public\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNext: (tokenResult: AppCheckTokenResult) => void,\n  onError?: (error: Error) => void,\n  onCompletion?: () => void\n): Unsubscribe;\n/**\n * Wraps `addTokenListener`/`removeTokenListener` methods in an `Observer`\n * pattern for public use.\n */\nexport function onTokenChanged(\n  appCheckInstance: AppCheck,\n  onNextOrObserver:\n    | ((tokenResult: AppCheckTokenResult) => void)\n    | PartialObserver<AppCheckTokenResult>,\n  onError?: (error: Error) => void,\n  /**\n   * NOTE: Although an `onCompletion` callback can be provided, it will\n   * never be called because the token stream is never-ending.\n   * It is added only for API consistency with the observer pattern, which\n   * we follow in JS APIs.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  onCompletion?: () => void\n): Unsubscribe {\n  let nextFn: NextFn<AppCheckTokenResult> = () => {};\n  let errorFn: ErrorFn = () => {};\n  if ((onNextOrObserver as PartialObserver<AppCheckTokenResult>).next != null) {\n    nextFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).next!.bind(onNextOrObserver);\n  } else {\n    nextFn = onNextOrObserver as NextFn<AppCheckTokenResult>;\n  }\n  if (\n    (onNextOrObserver as PartialObserver<AppCheckTokenResult>).error != null\n  ) {\n    errorFn = (\n      onNextOrObserver as PartialObserver<AppCheckTokenResult>\n    ).error!.bind(onNextOrObserver);\n  } else if (onError) {\n    errorFn = onError;\n  }\n  addTokenListener(\n    appCheckInstance as AppCheckService,\n    ListenerType.EXTERNAL,\n    nextFn,\n    errorFn\n  );\n  return () => removeTokenListener(appCheckInstance.app, nextFn);\n}\n","/**\n * Firebase App Check\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { registerVersion, _registerComponent } from '@firebase/app';\nimport {\n  Component,\n  ComponentType,\n  InstantiationMode\n} from '@firebase/component';\nimport { _AppCheckComponentName } from './public-types';\nimport { factory, internalFactory } from './factory';\nimport { _AppCheckInternalComponentName } from './types';\nimport { name, version } from '../package.json';\n\n// Used by other Firebase packages.\nexport { _AppCheckInternalComponentName };\n\nexport * from './api';\nexport * from './public-types';\n\nconst APP_CHECK_NAME: _AppCheckComponentName = 'app-check';\nconst APP_CHECK_NAME_INTERNAL: _AppCheckInternalComponentName =\n  'app-check-internal';\nfunction registerAppCheck(): void {\n  // The public interface\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const heartbeatServiceProvider = container.getProvider('heartbeat');\n        return factory(app, heartbeatServiceProvider);\n      },\n      ComponentType.PUBLIC\n    )\n      .setInstantiationMode(InstantiationMode.EXPLICIT)\n      /**\n       * Initialize app-check-internal after app-check is initialized to make AppCheck available to\n       * other Firebase SDKs\n       */\n      .setInstanceCreatedCallback(\n        (container, _identifier, _appcheckService) => {\n          container.getProvider(APP_CHECK_NAME_INTERNAL).initialize();\n        }\n      )\n  );\n\n  // The internal interface used by other Firebase products\n  _registerComponent(\n    new Component(\n      APP_CHECK_NAME_INTERNAL,\n      container => {\n        const appCheck = container.getProvider('app-check').getImmediate();\n        return internalFactory(appCheck);\n      },\n      ComponentType.PUBLIC\n    ).setInstantiationMode(InstantiationMode.EXPLICIT)\n  );\n\n  registerVersion(name, version);\n}\n\nregisterAppCheck();\n"]},"metadata":{},"sourceType":"module"}