{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from \"react\";\nexport var useChipsInput = function useChipsInput(props) {\n  var value = props.value,\n    getOptionValue = props.getOptionValue,\n    onChange = props.onChange,\n    onInputChange = props.onInputChange,\n    getNewOptionData = props.getNewOptionData;\n  var _React$useState = React.useState(props.inputValue),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    fieldValue = _React$useState2[0],\n    setFieldValue = _React$useState2[1];\n  var _React$useState3 = React.useState(value !== null && value !== void 0 ? value : []),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    selectedOptions = _React$useState4[0],\n    setSelectedOptions = _React$useState4[1];\n  var clearInput = React.useCallback(function () {\n    setFieldValue(\"\");\n    onInputChange({\n      target: {\n        value: \"\"\n      }\n    });\n  }, [onInputChange]);\n  var handleInputChange = React.useCallback(function (e) {\n    setFieldValue(e.target.value);\n    onInputChange(e);\n  }, [onInputChange]);\n  var toggleOption = React.useCallback(function (newOption, value) {\n    var newSelectedOptions = selectedOptions.filter(function (option) {\n      return getOptionValue(newOption) !== getOptionValue(option);\n    });\n    if (value === true) {\n      newSelectedOptions.push(newOption);\n    }\n    setSelectedOptions(newSelectedOptions);\n    onChange(newSelectedOptions);\n  }, [selectedOptions, getOptionValue, onChange]);\n  var addOption = React.useCallback(function (newOption) {\n    return toggleOption(newOption, true);\n  }, [toggleOption]);\n  var addOptionFromInput = React.useCallback(function () {\n    var trimmedValue = fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.trim();\n    if (trimmedValue) {\n      addOption(getNewOptionData(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  var removeOption = React.useCallback(function (value) {\n    toggleOption(getNewOptionData(undefined, value), false);\n  }, [toggleOption, getNewOptionData]);\n  React.useEffect(function () {\n    setSelectedOptions(value);\n    return function () {\n      return setSelectedOptions([]);\n    };\n  }, [props.value, value]);\n  React.useEffect(function () {\n    setFieldValue(props.inputValue);\n    return function () {\n      return setFieldValue(\"\");\n    };\n  }, [props.inputValue]);\n  return {\n    fieldValue: fieldValue,\n    setFieldValue: setFieldValue,\n    selectedOptions: selectedOptions,\n    setSelectedOptions: setSelectedOptions,\n    clearInput: clearInput,\n    toggleOption: toggleOption,\n    addOption: addOption,\n    addOptionFromInput: addOptionFromInput,\n    removeOption: removeOption,\n    handleInputChange: handleInputChange\n  };\n};","map":{"version":3,"mappings":"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","names":["React","useChipsInput","props","value","getOptionValue","onChange","onInputChange","getNewOptionData","useState","inputValue","_React$useState2","fieldValue","setFieldValue","_React$useState4","selectedOptions","setSelectedOptions","clearInput","useCallback","target","handleInputChange","e","toggleOption","newOption","newSelectedOptions","filter","option","push","addOption","addOptionFromInput","trimmedValue","trim","undefined","removeOption","useEffect"],"sources":["C:\\Users\\zpili\\Desktop\\Finbox-VK-mini-apps\\mini-app\\node_modules\\@vkontakte\\vkui\\src\\components\\ChipsInput\\useChipsInput.ts"],"sourcesContent":["import * as React from \"react\";\nimport {\n  ChipsInputOption,\n  ChipsInputProps,\n  ChipsInputValue,\n} from \"./ChipsInput\";\n\nexport const useChipsInput = <Option extends ChipsInputOption>(\n  props: Partial<ChipsInputProps<Option>>\n) => {\n  const { value, getOptionValue, onChange, onInputChange, getNewOptionData } =\n    props;\n\n  const [fieldValue, setFieldValue] = React.useState(props.inputValue);\n  const [selectedOptions, setSelectedOptions] = React.useState(value ?? []);\n\n  const clearInput = React.useCallback(() => {\n    setFieldValue(\"\");\n    onInputChange!({ target: { value: \"\" } } as any);\n  }, [onInputChange]);\n\n  const handleInputChange = React.useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      setFieldValue(e.target.value);\n      onInputChange!(e);\n    },\n    [onInputChange]\n  );\n\n  const toggleOption = React.useCallback(\n    (newOption: Option, value?: boolean) => {\n      const newSelectedOptions = selectedOptions.filter(\n        (option: Option) =>\n          getOptionValue!(newOption) !== getOptionValue!(option)\n      );\n\n      if (value === true) {\n        newSelectedOptions.push(newOption);\n      }\n\n      setSelectedOptions(newSelectedOptions);\n      onChange!(newSelectedOptions);\n    },\n    [selectedOptions, getOptionValue, onChange]\n  );\n\n  const addOption = React.useCallback(\n    (newOption: Option) => toggleOption(newOption, true),\n    [toggleOption]\n  );\n  const addOptionFromInput = React.useCallback(() => {\n    const trimmedValue = fieldValue?.trim();\n\n    if (trimmedValue) {\n      addOption(getNewOptionData!(undefined, trimmedValue));\n      clearInput();\n    }\n  }, [addOption, clearInput, getNewOptionData, fieldValue]);\n  const removeOption = React.useCallback(\n    (value: ChipsInputValue) => {\n      toggleOption(getNewOptionData!(undefined, value as string), false);\n    },\n    [toggleOption, getNewOptionData]\n  );\n\n  React.useEffect(() => {\n    setSelectedOptions(value as Option[]);\n\n    return () => setSelectedOptions([]);\n  }, [props.value, value]);\n\n  React.useEffect(() => {\n    setFieldValue(props.inputValue);\n\n    return () => setFieldValue(\"\");\n  }, [props.inputValue]);\n\n  return {\n    fieldValue,\n    setFieldValue,\n    selectedOptions,\n    setSelectedOptions,\n    clearInput,\n    toggleOption,\n    addOption,\n    addOptionFromInput,\n    removeOption,\n    handleInputChange,\n  };\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}