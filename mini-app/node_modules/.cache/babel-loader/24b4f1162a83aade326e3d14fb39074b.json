{"ast":null,"code":"import { canUseDOM, canUseEventListeners } from './dom';\n\n/**\n * Функция для js анимации\n * @param {number} duration\n * @param {function} timing тайминг функция анимации\n * @param {function} draw коллбэк, в который прокидывается прогресс [0, 1]\n * @returns {void}\n */\nexport function animate(_ref) {\n  var duration = _ref.duration,\n    timing = _ref.timing,\n    draw = _ref.draw;\n  if (!canUseDOM) {\n    return;\n  }\n  var start = window.performance.now();\n  window.requestAnimationFrame(function animate(time) {\n    var timeFraction = (time - start) / duration;\n    if (timeFraction > 1) {\n      timeFraction = 1;\n    }\n    var progress = timing(timeFraction);\n    draw(progress);\n    if (timeFraction < 1) {\n      window.requestAnimationFrame(animate);\n    }\n  });\n} // WebKitAnimationEvent и WebKitTransitionEvent не существуют в глобальном контексте\n\nexport var animationEvent = {\n  supported: false,\n  name: 'animationend'\n};\nexport var transitionEvent = {\n  supported: false,\n  name: 'transitionend'\n};\nif (canUseDOM) {\n  if (typeof AnimationEvent !== 'undefined') {\n    animationEvent.supported = true;\n  } else if (typeof WebKitAnimationEvent !== 'undefined') {\n    animationEvent.supported = true; // webkitAnimationEnd не входит в перечисление событий, но соответствует animationend\n\n    animationEvent.name = 'webkitAnimationEnd';\n  }\n  if (typeof TransitionEvent !== 'undefined') {\n    transitionEvent.supported = true;\n  } else if (typeof WebKitTransitionEvent !== 'undefined') {\n    transitionEvent.supported = true; // webkitTransitionEnd не входит в перечисление событий, но соответствует transitionend\n\n    transitionEvent.name = 'webkitTransitionEnd';\n  }\n}\n/**\n * Ожидание окончания анимации на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param fallbackTime сколько ждать в мс если событие не поддерживается\n * @param el элемент\n */\n\nexport function waitAnimationEnd(listener, fallbackTime, el) {\n  if (canUseEventListeners) {\n    if (animationEvent.supported && el) {\n      el.addEventListener(animationEvent.name, listener);\n    } else {\n      return window.setTimeout(listener, fallbackTime);\n    }\n  }\n}\n/**\n * Прекращение ожидания окончания анимации на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param handle то, что вернулось из ```waitAnimationEnd```\n * @param el элемент\n */\n\nexport function cancelWaitAnimationEnd(listener, handle, el) {\n  if (canUseEventListeners) {\n    if (animationEvent.supported && el) {\n      el.removeEventListener(animationEvent.name, listener);\n    } else {\n      window.clearTimeout(handle);\n    }\n  }\n}\n/**\n * Ожидание окончания анимации перехода на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param fallbackTime сколько ждать в мс если событие не поддерживается\n * @param el элемент\n */\n\nexport function waitTransitionEnd(el, listener, fallbackTime) {\n  if (canUseEventListeners) {\n    if (transitionEvent.supported && el) {\n      el.addEventListener(transitionEvent.name, listener);\n    } else {\n      return window.setTimeout(listener, fallbackTime);\n    }\n  }\n}\n/**\n * Прекращение ожидания окончания анимации перехода на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param handle то, что вернулось из ```waitTransitionEnd```\n * @param el элемент\n */\n\nexport function cancelWaitTransitionEnd(listener, handle, el) {\n  if (canUseEventListeners) {\n    if (transitionEvent.supported && el) {\n      el.removeEventListener(transitionEvent.name, listener);\n    } else {\n      window.clearTimeout(handle);\n    }\n  }\n}","map":{"version":3,"mappings":"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","names":["canUseDOM","canUseEventListeners","animate","duration","timing","draw","start","window","performance","now","requestAnimationFrame","time","timeFraction","progress","animationEvent","supported","name","transitionEvent","AnimationEvent","WebKitAnimationEvent","TransitionEvent","WebKitTransitionEvent","waitAnimationEnd","listener","fallbackTime","el","addEventListener","setTimeout","cancelWaitAnimationEnd","handle","removeEventListener","clearTimeout","waitTransitionEnd","cancelWaitTransitionEnd"],"sources":["../../src/animate.ts"],"sourcesContent":["import { canUseDOM, canUseEventListeners } from './dom';\nimport { SupportEvent } from './types';\n\ntype TimingInterface = (timeFraction: number) => number;\n\ntype DrawInterface = (progress: number) => void;\n\ninterface AnimateArgumentsInterface {\n  duration: number;\n  timing: TimingInterface;\n  draw: DrawInterface;\n}\n\n/**\n * Функция для js анимации\n * @param {number} duration\n * @param {function} timing тайминг функция анимации\n * @param {function} draw коллбэк, в который прокидывается прогресс [0, 1]\n * @returns {void}\n */\nexport function animate({ duration, timing, draw }: AnimateArgumentsInterface) {\n  if (!canUseDOM) {\n    return;\n  }\n\n  const start = window.performance.now();\n\n  window.requestAnimationFrame(function animate(time) {\n    let timeFraction = (time - start) / duration;\n\n    if (timeFraction > 1) {\n      timeFraction = 1;\n    }\n\n    const progress = timing(timeFraction);\n\n    draw(progress);\n\n    if (timeFraction < 1) {\n      window.requestAnimationFrame(animate);\n    }\n  });\n}\n\n// WebKitAnimationEvent и WebKitTransitionEvent не существуют в глобальном контексте\ndeclare const WebKitAnimationEvent: AnimationEvent;\ndeclare const WebKitTransitionEvent: TransitionEvent;\n\nexport const animationEvent: SupportEvent<'animationend'> = {\n  supported: false,\n  name: 'animationend',\n};\n\nexport const transitionEvent: SupportEvent<'transitionend'> = {\n  supported: false,\n  name: 'transitionend',\n};\n\nif (canUseDOM) {\n  if (typeof AnimationEvent !== 'undefined') {\n    animationEvent.supported = true;\n  } else if (typeof WebKitAnimationEvent !== 'undefined') {\n    animationEvent.supported = true;\n\n    // webkitAnimationEnd не входит в перечисление событий, но соответствует animationend\n    animationEvent.name = 'webkitAnimationEnd' as unknown as 'animationend';\n  }\n\n  if (typeof TransitionEvent !== 'undefined') {\n    transitionEvent.supported = true;\n  } else if (typeof WebKitTransitionEvent !== 'undefined') {\n    transitionEvent.supported = true;\n\n    // webkitTransitionEnd не входит в перечисление событий, но соответствует transitionend\n    transitionEvent.name = 'webkitTransitionEnd' as unknown as 'transitionend';\n  }\n}\n\n/**\n * Ожидание окончания анимации на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param fallbackTime сколько ждать в мс если событие не поддерживается\n * @param el элемент\n */\nexport function waitAnimationEnd(listener: (ev?: AnimationEvent) => any, fallbackTime: number, el?: GlobalEventHandlers) {\n  if (canUseEventListeners) {\n    if (animationEvent.supported && el) {\n      el.addEventListener(animationEvent.name, listener);\n    } else {\n      return window.setTimeout(listener, fallbackTime);\n    }\n  }\n}\n\n/**\n * Прекращение ожидания окончания анимации на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param handle то, что вернулось из ```waitAnimationEnd```\n * @param el элемент\n */\nexport function cancelWaitAnimationEnd(listener: (ev?: AnimationEvent) => any, handle?: number, el?: GlobalEventHandlers) {\n  if (canUseEventListeners) {\n    if (animationEvent.supported && el) {\n      el.removeEventListener(animationEvent.name, listener);\n    } else {\n      window.clearTimeout(handle);\n    }\n  }\n}\n\n/**\n * Ожидание окончания анимации перехода на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param fallbackTime сколько ждать в мс если событие не поддерживается\n * @param el элемент\n */\nexport function waitTransitionEnd(el: GlobalEventHandlers, listener: (ev?: TransitionEvent) => any, fallbackTime: number) {\n  if (canUseEventListeners) {\n    if (transitionEvent.supported && el) {\n      el.addEventListener(transitionEvent.name, listener);\n    } else {\n      return window.setTimeout(listener, fallbackTime);\n    }\n  }\n}\n\n/**\n * Прекращение ожидания окончания анимации перехода на элементе\n *\n * @param listener коллбэк окончания ожидания\n * @param handle то, что вернулось из ```waitTransitionEnd```\n * @param el элемент\n */\nexport function cancelWaitTransitionEnd(listener: (ev?: TransitionEvent) => any, handle?: number, el?: GlobalEventHandlers) {\n  if (canUseEventListeners) {\n    if (transitionEvent.supported && el) {\n      el.removeEventListener(transitionEvent.name, listener);\n    } else {\n      window.clearTimeout(handle);\n    }\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}