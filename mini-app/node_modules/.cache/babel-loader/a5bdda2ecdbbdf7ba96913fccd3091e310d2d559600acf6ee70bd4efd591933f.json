{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"primary\", \"label\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport Tappable from \"../Tappable/Tappable\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { getTitleFromChildren, isPrimitiveReactNode } from \"../../lib/utils\";\nimport { IOS, VKCOM, ANDROID } from \"../../lib/platform\";\nimport Text from \"../Typography/Text/Text\";\nimport Title from \"../Typography/Title/Title\";\nvar ButtonTypography = function ButtonTypography(_ref) {\n  var primary = _ref.primary,\n    children = _ref.children;\n  var platform = usePlatform();\n  if (platform === IOS) {\n    return createScopedElement(Title, {\n      Component: \"span\",\n      level: \"3\",\n      weight: primary ? \"1\" : \"3\"\n    }, children);\n  }\n  return createScopedElement(Text, {\n    weight: platform === VKCOM ? \"regular\" : \"medium\"\n  }, children);\n};\nvar warn = warnOnce(\"PanelHeaderButton\");\nexport var PanelHeaderButton = function PanelHeaderButton(_ref2) {\n  var children = _ref2.children,\n    _ref2$primary = _ref2.primary,\n    primary = _ref2$primary === void 0 ? false : _ref2$primary,\n    label = _ref2.label,\n    restProps = _objectWithoutProperties(_ref2, _excluded);\n  var isPrimitive = isPrimitiveReactNode(children);\n  var isPrimitiveLabel = isPrimitiveReactNode(label);\n  var platform = usePlatform();\n  var hoverMode;\n  var activeMode;\n  switch (platform) {\n    case ANDROID:\n      hoverMode = \"background\";\n      activeMode = \"background\";\n      break;\n    case IOS:\n      hoverMode = \"background\";\n      activeMode = \"opacity\";\n      break;\n    case VKCOM:\n      hoverMode = \"PanelHeaderButton--hover\";\n      activeMode = \"PanelHeaderButton--active\";\n  }\n  if (process.env.NODE_ENV === \"development\") {\n    var hasAccessibleName = Boolean(getTitleFromChildren(children) || getTitleFromChildren(label) || restProps[\"aria-label\"] || restProps[\"aria-labelledby\"]);\n    if (!hasAccessibleName) {\n      warn(\"a11y: У кнопки нет названия, которое может прочитать скринридер, и она недоступна для части пользователей. Замените содержимое на текст или добавьте описание действия с помощью пропа aria-label.\");\n    }\n  }\n  return createScopedElement(Tappable, _extends({}, restProps, {\n    hoverMode: hoverMode,\n    Component: restProps.href ? \"a\" : \"button\",\n    activeEffectDelay: 200,\n    activeMode: activeMode,\n    vkuiClass: classNames(getClassName(\"PanelHeaderButton\", platform), {\n      \"PanelHeaderButton--primary\": primary,\n      \"PanelHeaderButton--primitive\": isPrimitive,\n      \"PanelHeaderButton--notPrimitive\": !isPrimitive && !isPrimitiveLabel\n    })\n  }), isPrimitive ? createScopedElement(ButtonTypography, {\n    primary: primary\n  }, children) : children, isPrimitiveLabel ? createScopedElement(ButtonTypography, {\n    primary: primary\n  }, label) : label);\n};","map":{"version":3,"mappings":";;;;AACA,OAAOA,QAAP;AACA,SAASC,YAAT;AACA,SAASC,UAAT;AACA,SAASC,QAAT;AACA,SAASC,WAAT;AACA,SAASC,oBAAT,EAA+BC,oBAA/B;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,OAArB;AACA,OAAOC,IAAP;AACA,OAAOC,KAAP;AAYA,IAAMC,gBAAiD,GAAG,SAApDA,gBAAoD,OAG7B;EAAA,IAF3BC,OAE2B,QAF3BA,OAE2B;IAD3BC,QAC2B,QAD3BA,QAC2B;EAC3B,IAAMC,QAAQ,GAAGX,WAAW,EAA5B;EAEA,IAAIW,QAAQ,KAAKR,GAAjB,EAAsB;IACpB,OACES,oBAACL,KAAD;MAAOM,SAAS,EAAC,MAAjB;MAAwBC,KAAK,EAAC,GAA9B;MAAkCC,MAAM,EAAEN,OAAO,GAAG,GAAH,GAAS;IAA1D,GACGC,QADH,CADF;EAKD;EAED,OACEE,oBAACN,IAAD;IAAMS,MAAM,EAAEJ,QAAQ,KAAKP,KAAb,GAAqB,SAArB,GAAiC;EAA/C,GAA0DM,QAA1D,CADF;AAGD,CAjBD;AAmBA,IAAMM,IAAI,GAAGjB,QAAQ,CAAC,mBAAD,CAArB;AACA,OAAO,IAAMkB,iBAAmD,GAAG,SAAtDA,iBAAsD,QAKrC;EAAA,IAJ5BP,QAI4B,SAJ5BA,QAI4B;IAAAQ,sBAH5BT,OAG4B;IAH5BA,OAG4B,8BAHlB,KAGkB;IAF5BU,KAE4B,SAF5BA,KAE4B;IADzBC,SACyB;EAC5B,IAAMC,WAAW,GAAGnB,oBAAoB,CAACQ,QAAD,CAAxC;EACA,IAAMY,gBAAgB,GAAGpB,oBAAoB,CAACiB,KAAD,CAA7C;EACA,IAAMR,QAAQ,GAAGX,WAAW,EAA5B;EAEA,IAAIuB,SAAJ;EACA,IAAIC,UAAJ;EAEA,QAAQb,QAAR;IACE,KAAKN,OAAL;MACEkB,SAAS,GAAG,YAAZ;MACAC,UAAU,GAAG,YAAb;MACA;IACF,KAAKrB,GAAL;MACEoB,SAAS,GAAG,YAAZ;MACAC,UAAU,GAAG,SAAb;MACA;IACF,KAAKpB,KAAL;MACEmB,SAAS,GAAG,0BAAZ;MACAC,UAAU,GAAG,2BAAb;EAAA;EAGJ,IAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;IAC1C,IAAMC,iBAAiB,GAAGC,OAAO,CAC/B5B,oBAAoB,CAACS,QAAD,CAApB,IACET,oBAAoB,CAACkB,KAAD,CADtB,IAEEC,SAAS,CAAC,YAAD,CAFX,IAGEA,SAAS,CAAC,iBAAD,CAJoB,CAAjC;IAOA,IAAI,CAACQ,iBAAL,EAAwB;MACtBZ,IAAI,CACF,oMADE,CAAJ;IAGD;EACF;EAED,OACEJ,oBAAChB,QAAD,eACMwB,SADN;IAEEG,SAAS,EAAEA,SAFb;IAGEV,SAAS,EAAEO,SAAS,CAACU,IAAV,GAAiB,GAAjB,GAAuB,QAHpC;IAIEC,iBAAiB,EAAE,GAJrB;IAKEP,UAAU,EAAEA,UALd;IAMEQ,SAAS,EAAElC,UAAU,CAACD,YAAY,CAAC,mBAAD,EAAsBc,QAAtB,CAAb,EAA8C;MACjE,8BAA8BF,OADmC;MAEjE,gCAAgCY,WAFiC;MAGjE,mCAAmC,CAACA,WAAD,IAAgB,CAACC;IAHa,CAA9C;EANvB,IAYGD,WAAW,GACVT,oBAACJ,gBAAD;IAAkBC,OAAO,EAAEA;EAA3B,GAAqCC,QAArC,CADU,GAGVA,QAfJ,EAiBGY,gBAAgB,GACfV,oBAACJ,gBAAD;IAAkBC,OAAO,EAAEA;EAA3B,GAAqCU,KAArC,CADe,GAGfA,KApBJ,CADF;AAyBD,CAnEM","names":["Tappable","getClassName","classNames","warnOnce","usePlatform","getTitleFromChildren","isPrimitiveReactNode","IOS","VKCOM","ANDROID","Text","Title","ButtonTypography","primary","children","platform","createScopedElement","Component","level","weight","warn","PanelHeaderButton","_ref2$primary","label","restProps","isPrimitive","isPrimitiveLabel","hoverMode","activeMode","process","env","NODE_ENV","hasAccessibleName","Boolean","href","activeEffectDelay","vkuiClass"],"sources":["C:\\Users\\zpili\\Desktop\\Finbox-VK-mini-apps\\mini-app\\node_modules\\@vkontakte\\vkui\\src\\components\\PanelHeaderButton\\PanelHeaderButton.tsx"],"sourcesContent":["import * as React from \"react\";\nimport Tappable, { TappableProps } from \"../Tappable/Tappable\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { classNames } from \"../../lib/classNames\";\nimport { warnOnce } from \"../../lib/warnOnce\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { getTitleFromChildren, isPrimitiveReactNode } from \"../../lib/utils\";\nimport { IOS, VKCOM, ANDROID } from \"../../lib/platform\";\nimport Text from \"../Typography/Text/Text\";\nimport Title from \"../Typography/Title/Title\";\nimport \"./PanelHeaderButton.css\";\n\nexport interface PanelHeaderButtonProps extends Omit<TappableProps, \"label\"> {\n  primary?: boolean;\n  label?: React.ReactNode;\n}\n\ninterface ButtonTypographyProps extends React.AllHTMLAttributes<HTMLElement> {\n  primary?: PanelHeaderButtonProps[\"primary\"];\n}\n\nconst ButtonTypography: React.FC<ButtonTypographyProps> = ({\n  primary,\n  children,\n}: ButtonTypographyProps) => {\n  const platform = usePlatform();\n\n  if (platform === IOS) {\n    return (\n      <Title Component=\"span\" level=\"3\" weight={primary ? \"1\" : \"3\"}>\n        {children}\n      </Title>\n    );\n  }\n\n  return (\n    <Text weight={platform === VKCOM ? \"regular\" : \"medium\"}>{children}</Text>\n  );\n};\n\nconst warn = warnOnce(\"PanelHeaderButton\");\nexport const PanelHeaderButton: React.FC<PanelHeaderButtonProps> = ({\n  children,\n  primary = false,\n  label,\n  ...restProps\n}: PanelHeaderButtonProps) => {\n  const isPrimitive = isPrimitiveReactNode(children);\n  const isPrimitiveLabel = isPrimitiveReactNode(label);\n  const platform = usePlatform();\n\n  let hoverMode;\n  let activeMode;\n\n  switch (platform) {\n    case ANDROID:\n      hoverMode = \"background\";\n      activeMode = \"background\";\n      break;\n    case IOS:\n      hoverMode = \"background\";\n      activeMode = \"opacity\";\n      break;\n    case VKCOM:\n      hoverMode = \"PanelHeaderButton--hover\";\n      activeMode = \"PanelHeaderButton--active\";\n  }\n\n  if (process.env.NODE_ENV === \"development\") {\n    const hasAccessibleName = Boolean(\n      getTitleFromChildren(children) ||\n        getTitleFromChildren(label) ||\n        restProps[\"aria-label\"] ||\n        restProps[\"aria-labelledby\"]\n    );\n\n    if (!hasAccessibleName) {\n      warn(\n        \"a11y: У кнопки нет названия, которое может прочитать скринридер, и она недоступна для части пользователей. Замените содержимое на текст или добавьте описание действия с помощью пропа aria-label.\"\n      );\n    }\n  }\n\n  return (\n    <Tappable\n      {...restProps}\n      hoverMode={hoverMode}\n      Component={restProps.href ? \"a\" : \"button\"}\n      activeEffectDelay={200}\n      activeMode={activeMode}\n      vkuiClass={classNames(getClassName(\"PanelHeaderButton\", platform), {\n        \"PanelHeaderButton--primary\": primary,\n        \"PanelHeaderButton--primitive\": isPrimitive,\n        \"PanelHeaderButton--notPrimitive\": !isPrimitive && !isPrimitiveLabel,\n      })}\n    >\n      {isPrimitive ? (\n        <ButtonTypography primary={primary}>{children}</ButtonTypography>\n      ) : (\n        children\n      )}\n      {isPrimitiveLabel ? (\n        <ButtonTypography primary={primary}>{label}</ButtonTypography>\n      ) : (\n        label\n      )}\n    </Tappable>\n  );\n};\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}