{"ast":null,"code":"import _classCallCheck from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { activate as _activate, ensureInitialized as _ensureInitialized, fetchConfig, fetchAndActivate as _fetchAndActivate, getAll as _getAll, getBoolean as _getBoolean, getNumber as _getNumber, getString as _getString, getValue as _getValue, setLogLevel as _setLogLevel, isSupported } from '@firebase/remote-config';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar RemoteConfigCompatImpl = /*#__PURE__*/function () {\n  function RemoteConfigCompatImpl(app, _delegate) {\n    _classCallCheck(this, RemoteConfigCompatImpl);\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  _createClass(RemoteConfigCompatImpl, [{\n    key: \"defaultConfig\",\n    get: function get() {\n      return this._delegate.defaultConfig;\n    },\n    set: function set(value) {\n      this._delegate.defaultConfig = value;\n    }\n  }, {\n    key: \"fetchTimeMillis\",\n    get: function get() {\n      return this._delegate.fetchTimeMillis;\n    }\n  }, {\n    key: \"lastFetchStatus\",\n    get: function get() {\n      return this._delegate.lastFetchStatus;\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      return this._delegate.settings;\n    },\n    set: function set(value) {\n      this._delegate.settings = value;\n    }\n  }, {\n    key: \"activate\",\n    value: function activate() {\n      return _activate(this._delegate);\n    }\n  }, {\n    key: \"ensureInitialized\",\n    value: function ensureInitialized() {\n      return _ensureInitialized(this._delegate);\n    }\n    /**\r\n     * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\r\n     * {@link Settings.fetchTimeoutInSeconds} or\r\n     * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\r\n     */\n  }, {\n    key: \"fetch\",\n    value: function fetch() {\n      return fetchConfig(this._delegate);\n    }\n  }, {\n    key: \"fetchAndActivate\",\n    value: function fetchAndActivate() {\n      return _fetchAndActivate(this._delegate);\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      return _getAll(this._delegate);\n    }\n  }, {\n    key: \"getBoolean\",\n    value: function getBoolean(key) {\n      return _getBoolean(this._delegate, key);\n    }\n  }, {\n    key: \"getNumber\",\n    value: function getNumber(key) {\n      return _getNumber(this._delegate, key);\n    }\n  }, {\n    key: \"getString\",\n    value: function getString(key) {\n      return _getString(this._delegate, key);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      return _getValue(this._delegate, key);\n    }\n    // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n    // to differentiate 2p and 3p use-cases.\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      _setLogLevel(this._delegate, logLevel);\n    }\n  }]);\n  return RemoteConfigCompatImpl;\n}();\nvar name = \"@firebase/remote-config-compat\";\nvar version = \"0.1.16\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerRemoteConfigCompat(firebaseInstance) {\n  firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig-compat', remoteConfigFactory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true).setServiceProps({\n    isSupported: isSupported\n  }));\n  firebaseInstance.registerVersion(name, version);\n}\nfunction remoteConfigFactory(container, _ref) {\n  var namespace = _ref.instanceIdentifier;\n  var app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n  var remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\nregisterRemoteConfigCompat(firebase);","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;AAeG;AAfH,IA0CaA,sBAAsB;EAGjC,gCAAmBC,GAAgB,EAAWC,SAAuB;IAAA;IAAlD,IAAG,OAAHD,GAAG;IAAwB,IAAS,aAATC,SAAS;;EAAkB;IAAA;IAAA,KAEzE,eAAiB;MACf,OAAO,IAAI,CAACA,SAAS,CAACC,aAAa;KACpC;IAAA,KAED,aAAkBC,KAAmD;MACnE,IAAI,CAACF,SAAS,CAACC,aAAa,GAAGC,KAAK;;EACrC;IAAA;IAAA,KAED,eAAmB;MACjB,OAAO,IAAI,CAACF,SAAS,CAACG,eAAe;;EACtC;IAAA;IAAA,KAED,eAAmB;MACjB,OAAO,IAAI,CAACH,SAAS,CAACI,eAAe;;EACtC;IAAA;IAAA,KAED,eAAY;MACV,OAAO,IAAI,CAACJ,SAAS,CAACK,QAAQ;KAC/B;IAAA,KAED,aAAaH,KAAqB;MAChC,IAAI,CAACF,SAAS,CAACK,QAAQ,GAAGH,KAAK;;EAChC;IAAA;IAAA,OAED,oBAAQ;MACN,OAAOI,SAAQ,CAAC,IAAI,CAACN,SAAS,CAAC;;EAChC;IAAA;IAAA,OAED,6BAAiB;MACf,OAAOO,kBAAiB,CAAC,IAAI,CAACP,SAAS,CAAC;;IAG1C;;;;AAIG;EAJH;IAAA;IAAA,OAKA,iBAAK;MACH,OAAOQ,WAAW,CAAC,IAAI,CAACR,SAAS,CAAC;;EACnC;IAAA;IAAA,OAED,4BAAgB;MACd,OAAOS,iBAAgB,CAAC,IAAI,CAACT,SAAS,CAAC;;EACxC;IAAA;IAAA,OAED,kBAAM;MACJ,OAAOU,OAAM,CAAC,IAAI,CAACV,SAAS,CAAC;;EAC9B;IAAA;IAAA,OAED,oBAAWW,GAAW;MACpB,OAAOC,WAAU,CAAC,IAAI,CAACZ,SAAS,EAAEW,GAAG,CAAC;;EACvC;IAAA;IAAA,OAED,mBAAUA,GAAW;MACnB,OAAOE,UAAS,CAAC,IAAI,CAACb,SAAS,EAAEW,GAAG,CAAC;;EACtC;IAAA;IAAA,OAED,mBAAUA,GAAW;MACnB,OAAOG,UAAS,CAAC,IAAI,CAACd,SAAS,EAAEW,GAAG,CAAC;;EACtC;IAAA;IAAA,OAED,kBAASA,GAAW;MAClB,OAAOI,SAAQ,CAAC,IAAI,CAACf,SAAS,EAAEW,GAAG,CAAC;;;;;;WAKtC,qBAAYK,QAA8B;MACxCC,YAAW,CAAC,IAAI,CAACjB,SAAS,EAAEgB,QAAQ,CAAC;;EACtC;EAAA;AAAA;;;;ACpHH;;;;;;;;;;;;;;;AAeG;AAaH,SAASE,0BAA0B,CACjCC,gBAAoC;EAEpCA,gBAAgB,CAACC,QAAQ,CAACC,iBAAiB,CACzC,IAAIC,SAAS,CACX,qBAAqB,EACrBC,mBAAmB,EAEpB,uBACEC,oBAAoB,CAAC,IAAI,CAAC,CAC1BC,eAAe,CAAC;IAAEC,WAAW,EAAXA;EAAW,CAAE,CAAC,CACpC;EAEDP,gBAAgB,CAACQ,eAAe,CAACC,IAAW,EAAEC,OAAO,CAAC;AACxD;AAEA,SAASN,mBAAmB,CAC1BO,SAA6B,QAC4B;EAAA,IAAnCC,SAAS,QAA7BC,kBAAkB;EAEpB,IAAMjC,GAAG,GAAG+B,SAAS,CAACG,WAAW,CAAC,YAAY,CAAC,CAACC,YAAY,EAAE;;EAE9D,IAAMC,YAAY,GAAGL,SAAS,CAACG,WAAW,CAAC,eAAe,CAAC,CAACC,YAAY,CAAC;IACvEE,UAAU,EAAEL;EACb,EAAC;EAEF,OAAO,IAAIjC,sBAAsB,CAACC,GAAG,EAAEoC,YAAY,CAAC;AACtD;AAEAjB,0BAA0B,CAACmB,QAA8B,CAAC","names":["RemoteConfigCompatImpl","app","_delegate","defaultConfig","value","fetchTimeMillis","lastFetchStatus","settings","activate","ensureInitialized","fetchConfig","fetchAndActivate","getAll","key","getBoolean","getNumber","getString","getValue","logLevel","setLogLevel","registerRemoteConfigCompat","firebaseInstance","INTERNAL","registerComponent","Component","remoteConfigFactory","setMultipleInstances","setServiceProps","isSupported","registerVersion","packageName","version","container","namespace","instanceIdentifier","getProvider","getImmediate","remoteConfig","identifier","firebase"],"sources":["../../src/remoteConfig.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport {\n  Value as ValueCompat,\n  FetchStatus as FetchSTatusCompat,\n  Settings as SettingsCompat,\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig as RemoteConfigCompat\n} from '@firebase/remote-config-types';\nimport {\n  RemoteConfig,\n  setLogLevel,\n  activate,\n  ensureInitialized,\n  fetchAndActivate,\n  fetchConfig,\n  getAll,\n  getBoolean,\n  getNumber,\n  getString,\n  getValue,\n  isSupported\n} from '@firebase/remote-config';\n\nexport { isSupported };\n\nexport class RemoteConfigCompatImpl\n  implements RemoteConfigCompat, _FirebaseService\n{\n  constructor(public app: FirebaseApp, readonly _delegate: RemoteConfig) {}\n\n  get defaultConfig(): { [key: string]: string | number | boolean } {\n    return this._delegate.defaultConfig;\n  }\n\n  set defaultConfig(value: { [key: string]: string | number | boolean }) {\n    this._delegate.defaultConfig = value;\n  }\n\n  get fetchTimeMillis(): number {\n    return this._delegate.fetchTimeMillis;\n  }\n\n  get lastFetchStatus(): FetchSTatusCompat {\n    return this._delegate.lastFetchStatus;\n  }\n\n  get settings(): SettingsCompat {\n    return this._delegate.settings;\n  }\n\n  set settings(value: SettingsCompat) {\n    this._delegate.settings = value;\n  }\n\n  activate(): Promise<boolean> {\n    return activate(this._delegate);\n  }\n\n  ensureInitialized(): Promise<void> {\n    return ensureInitialized(this._delegate);\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  fetch(): Promise<void> {\n    return fetchConfig(this._delegate);\n  }\n\n  fetchAndActivate(): Promise<boolean> {\n    return fetchAndActivate(this._delegate);\n  }\n\n  getAll(): { [key: string]: ValueCompat } {\n    return getAll(this._delegate);\n  }\n\n  getBoolean(key: string): boolean {\n    return getBoolean(this._delegate, key);\n  }\n\n  getNumber(key: string): number {\n    return getNumber(this._delegate, key);\n  }\n\n  getString(key: string): string {\n    return getString(this._delegate, key);\n  }\n\n  getValue(key: string): ValueCompat {\n    return getValue(this._delegate, key);\n  }\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    setLogLevel(this._delegate, logLevel);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { RemoteConfigCompatImpl, isSupported } from './remoteConfig';\nimport { name as packageName, version } from '../package.json';\nimport { RemoteConfig as RemoteConfigCompat } from '@firebase/remote-config-types';\n\nfunction registerRemoteConfigCompat(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig-compat',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    )\n      .setMultipleInstances(true)\n      .setServiceProps({ isSupported })\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n}\n\nfunction remoteConfigFactory(\n  container: ComponentContainer,\n  { instanceIdentifier: namespace }: InstanceFactoryOptions\n): RemoteConfigCompatImpl {\n  const app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    remoteConfig: {\n      (app?: FirebaseApp): RemoteConfigCompat;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigCompat;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}