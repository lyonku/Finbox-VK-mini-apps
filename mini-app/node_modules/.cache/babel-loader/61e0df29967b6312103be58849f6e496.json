{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"layout\", \"action\", \"before\", \"after\", \"viewWidth\", \"duration\", \"onActionClick\", \"onClose\"];\nimport { createScopedElement } from \"../../lib/jsxRuntime\";\nimport * as React from \"react\";\nimport { Touch } from \"../Touch/Touch\";\nimport { classNames } from \"../../lib/classNames\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, VKCOM } from \"../../lib/platform\";\nimport { rubber } from \"../../lib/touch\";\nimport { withAdaptivity, ViewWidth } from \"../../hoc/withAdaptivity\";\nimport Text from \"../Typography/Text/Text\";\nimport Button from \"../Button/Button\";\nimport { AppRootPortal } from \"../AppRoot/AppRootPortal\";\nimport { useWaitTransitionFinish } from \"../../hooks/useWaitTransitionFinish\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\nvar SnackbarComponent = function SnackbarComponent(props) {\n  var children = props.children,\n    layout = props.layout,\n    action = props.action,\n    before = props.before,\n    after = props.after,\n    viewWidth = props.viewWidth,\n    _props$duration = props.duration,\n    duration = _props$duration === void 0 ? 0 : _props$duration,\n    onActionClick = props.onActionClick,\n    onClose = props.onClose,\n    restProps = _objectWithoutProperties(props, _excluded);\n  var platform = usePlatform();\n  var _useWaitTransitionFin = useWaitTransitionFinish(),\n    waitTransitionFinish = _useWaitTransitionFin.waitTransitionFinish;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    closing = _React$useState2[0],\n    setClosing = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    touched = _React$useState4[0],\n    setTouched = _React$useState4[1];\n  var shiftXPercentRef = React.useRef(0);\n  var shiftXCurrentRef = React.useRef(0);\n  var bodyElRef = React.useRef(null);\n  var innerElRef = React.useRef(null);\n  var animationFrameRef = React.useRef(null);\n  var isDesktop = viewWidth >= ViewWidth.SMALL_TABLET;\n  var transitionFinishDurationFallback = platform === ANDROID || platform === VKCOM ? 400 : 320;\n  var close = function close() {\n    setClosing(true);\n    waitTransitionFinish(innerElRef.current, function () {\n      onClose();\n    }, transitionFinishDurationFallback);\n  };\n  var handleActionClick = function handleActionClick(e) {\n    close();\n    if (action && typeof onActionClick === \"function\") {\n      onActionClick(e);\n    }\n  };\n  var closeTimeout = useTimeout(close, duration);\n  var setBodyTransform = function setBodyTransform(percent) {\n    if (animationFrameRef.current !== null) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(function () {\n      if (bodyElRef.current) {\n        bodyElRef.current.style.transform = \"translate3d(\".concat(percent, \"%, 0, 0)\");\n      }\n    });\n  };\n  var onTouchStart = closeTimeout.clear;\n  var onTouchMoveX = function onTouchMoveX(event) {\n    var _bodyElRef$current$of, _bodyElRef$current;\n    var shiftX = event.shiftX,\n      originalEvent = event.originalEvent;\n    originalEvent.preventDefault();\n    if (!touched) {\n      setTouched(true);\n    }\n    shiftXPercentRef.current = shiftX / ((_bodyElRef$current$of = (_bodyElRef$current = bodyElRef.current) === null || _bodyElRef$current === void 0 ? void 0 : _bodyElRef$current.offsetWidth) !== null && _bodyElRef$current$of !== void 0 ? _bodyElRef$current$of : 0) * 100;\n    shiftXCurrentRef.current = rubber(shiftXPercentRef.current, 72, 1.2, platform === ANDROID || platform === VKCOM);\n    setBodyTransform(shiftXCurrentRef.current);\n  };\n  var onTouchEnd = function onTouchEnd(e) {\n    var callback;\n    if (touched) {\n      var shiftXCurrent = shiftXCurrentRef.current;\n      var expectTranslateY = shiftXCurrent / e.duration * 240 * 0.6;\n      shiftXCurrent = shiftXCurrent + expectTranslateY;\n      if (isDesktop && shiftXCurrent <= -50) {\n        closeTimeout.clear();\n        waitTransitionFinish(bodyElRef.current, function () {\n          onClose();\n        }, transitionFinishDurationFallback);\n        setBodyTransform(-120);\n      } else if (!isDesktop && shiftXCurrent >= 50) {\n        closeTimeout.clear();\n        waitTransitionFinish(bodyElRef.current, function () {\n          onClose();\n        }, transitionFinishDurationFallback);\n        setBodyTransform(120);\n      } else {\n        callback = function callback() {\n          closeTimeout.set();\n          setBodyTransform(0);\n        };\n      }\n    } else {\n      closeTimeout.set();\n    }\n    setTouched(false);\n    callback && requestAnimationFrame(callback);\n  };\n  React.useEffect(function () {\n    return closeTimeout.set();\n  }, [closeTimeout]);\n  var resolvedLayout = after || isDesktop ? \"vertical\" : layout;\n  return createScopedElement(AppRootPortal, null, createScopedElement(\"div\", _extends({}, restProps, {\n    vkuiClass: classNames(getClassName(\"Snackbar\", platform), \"Snackbar--l-\".concat(resolvedLayout), {\n      \"Snackbar--closing\": closing,\n      \"Snackbar--touched\": touched,\n      \"Snackbar--desktop\": isDesktop\n    })\n  }), createScopedElement(Touch, {\n    vkuiClass: \"Snackbar__in\",\n    getRootRef: innerElRef,\n    onStart: onTouchStart,\n    onMoveX: onTouchMoveX,\n    onEnd: onTouchEnd\n  }, createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__body\",\n    ref: bodyElRef\n  }, before && createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__before\"\n  }, before), createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__content\"\n  }, createScopedElement(Text, {\n    weight: \"regular\",\n    vkuiClass: \"Snackbar__content-text\"\n  }, children), action && createScopedElement(Button, {\n    align: \"left\",\n    hasHover: false,\n    mode: \"tertiary\",\n    size: \"s\",\n    vkuiClass: \"Snackbar__action\",\n    onClick: handleActionClick\n  }, action)), after && createScopedElement(\"div\", {\n    vkuiClass: \"Snackbar__after\"\n  }, after)))));\n};\nSnackbarComponent.displayName = \"Snackbar\";\nSnackbarComponent.defaultProps = {\n  duration: 4000,\n  layout: \"horizontal\"\n};\nexport var Snackbar = withAdaptivity(SnackbarComponent, {\n  viewWidth: true\n});","map":{"version":3,"mappings":"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","names":["React","Touch","classNames","getClassName","ANDROID","VKCOM","rubber","withAdaptivity","ViewWidth","Text","Button","AppRootPortal","useWaitTransitionFinish","usePlatform","useTimeout","SnackbarComponent","props","children","layout","action","before","after","viewWidth","_props$duration","duration","onActionClick","onClose","restProps","platform","waitTransitionFinish","useState","_React$useState2","closing","setClosing","_React$useState4","touched","setTouched","shiftXPercentRef","useRef","shiftXCurrentRef","bodyElRef","innerElRef","animationFrameRef","isDesktop","SMALL_TABLET","transitionFinishDurationFallback","close","current","handleActionClick","e","closeTimeout","setBodyTransform","percent","cancelAnimationFrame","requestAnimationFrame","style","transform","onTouchStart","clear","onTouchMoveX","event","shiftX","originalEvent","preventDefault","_bodyElRef$current","offsetWidth","onTouchEnd","callback","shiftXCurrent","expectTranslateY","set","useEffect","resolvedLayout","createScopedElement","vkuiClass","getRootRef","onStart","onMoveX","onEnd","ref","weight","align","hasHover","mode","size","onClick","displayName","defaultProps","Snackbar"],"sources":["../../../src/components/Snackbar/Snackbar.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { Touch, TouchEvent } from \"../Touch/Touch\";\nimport { classNames } from \"../../lib/classNames\";\nimport { HasPlatform } from \"../../types\";\nimport { getClassName } from \"../../helpers/getClassName\";\nimport { ANDROID, VKCOM } from \"../../lib/platform\";\nimport { rubber } from \"../../lib/touch\";\nimport { withAdaptivity, ViewWidth } from \"../../hoc/withAdaptivity\";\nimport Text from \"../Typography/Text/Text\";\nimport Button from \"../Button/Button\";\nimport { AppRootPortal } from \"../AppRoot/AppRootPortal\";\nimport { useWaitTransitionFinish } from \"../../hooks/useWaitTransitionFinish\";\nimport { usePlatform } from \"../../hooks/usePlatform\";\nimport { useTimeout } from \"../../hooks/useTimeout\";\nimport {\n  AdaptivityContextInterface,\n  AdaptivityProps,\n} from \"../AdaptivityProvider/AdaptivityContext\";\nimport \"./Snackbar.css\";\n\nexport interface SnackbarProps\n  extends React.HTMLAttributes<HTMLElement>,\n    HasPlatform,\n    AdaptivityProps {\n  /**\n   * Название кнопки действия в уведомлении\n   */\n  action?: string | React.ComponentType;\n\n  /**\n   * Будет вызвано при клике на кнопку действия\n   */\n  onActionClick?: (e: React.MouseEvent) => void;\n\n  /**\n   * Цветная иконка 24x24 пикселя\n   */\n  before?: React.ReactNode;\n  /**\n   * Контент в правой части, может быть `<Avatar size={32} />`\n   */\n  after?: React.ReactNode;\n  /**\n   * Варианты расположения кнопки\n   */\n  layout?: \"vertical\" | \"horizontal\";\n  /**\n   * Время в миллисекундах, через которое плашка скроется\n   */\n  duration?: number;\n  /**\n   * Обработчик закрытия уведомления\n   */\n  onClose: () => void;\n}\n\nconst SnackbarComponent: React.FC<\n  SnackbarProps & AdaptivityContextInterface\n> = (props) => {\n  const {\n    children,\n    layout,\n    action,\n    before,\n    after,\n    viewWidth,\n    duration = 0,\n    onActionClick,\n    onClose,\n    ...restProps\n  } = props;\n\n  const platform = usePlatform();\n\n  const { waitTransitionFinish } = useWaitTransitionFinish();\n\n  const [closing, setClosing] = React.useState(false);\n  const [touched, setTouched] = React.useState(false);\n\n  const shiftXPercentRef = React.useRef<number>(0);\n  const shiftXCurrentRef = React.useRef<number>(0);\n\n  const bodyElRef = React.useRef<HTMLDivElement | null>(null);\n  const innerElRef = React.useRef<HTMLDivElement | null>(null);\n\n  const animationFrameRef = React.useRef<ReturnType<\n    typeof requestAnimationFrame\n  > | null>(null);\n\n  const isDesktop = viewWidth >= ViewWidth.SMALL_TABLET;\n  const transitionFinishDurationFallback =\n    platform === ANDROID || platform === VKCOM ? 400 : 320;\n\n  const close = () => {\n    setClosing(true);\n    waitTransitionFinish(\n      innerElRef.current,\n      () => {\n        onClose();\n      },\n      transitionFinishDurationFallback\n    );\n  };\n\n  const handleActionClick: React.MouseEventHandler<HTMLElement> = (e) => {\n    close();\n\n    if (action && typeof onActionClick === \"function\") {\n      onActionClick(e);\n    }\n  };\n\n  const closeTimeout = useTimeout(close, duration);\n\n  const setBodyTransform = (percent: number) => {\n    if (animationFrameRef.current !== null) {\n      cancelAnimationFrame(animationFrameRef.current);\n    }\n    animationFrameRef.current = requestAnimationFrame(() => {\n      if (bodyElRef.current) {\n        bodyElRef.current.style.transform = `translate3d(${percent}%, 0, 0)`;\n      }\n    });\n  };\n\n  const onTouchStart = closeTimeout.clear;\n\n  const onTouchMoveX = (event: TouchEvent) => {\n    const { shiftX, originalEvent } = event;\n    originalEvent.preventDefault();\n\n    if (!touched) {\n      setTouched(true);\n    }\n\n    shiftXPercentRef.current =\n      (shiftX / (bodyElRef.current?.offsetWidth ?? 0)) * 100;\n    shiftXCurrentRef.current = rubber(\n      shiftXPercentRef.current,\n      72,\n      1.2,\n      platform === ANDROID || platform === VKCOM\n    );\n\n    setBodyTransform(shiftXCurrentRef.current);\n  };\n\n  const onTouchEnd = (e: TouchEvent) => {\n    let callback: VoidFunction | undefined;\n\n    if (touched) {\n      let shiftXCurrent = shiftXCurrentRef.current;\n      const expectTranslateY = (shiftXCurrent / e.duration) * 240 * 0.6;\n      shiftXCurrent = shiftXCurrent + expectTranslateY;\n\n      if (isDesktop && shiftXCurrent <= -50) {\n        closeTimeout.clear();\n        waitTransitionFinish(\n          bodyElRef.current,\n          () => {\n            onClose();\n          },\n          transitionFinishDurationFallback\n        );\n        setBodyTransform(-120);\n      } else if (!isDesktop && shiftXCurrent >= 50) {\n        closeTimeout.clear();\n        waitTransitionFinish(\n          bodyElRef.current,\n          () => {\n            onClose();\n          },\n          transitionFinishDurationFallback\n        );\n        setBodyTransform(120);\n      } else {\n        callback = () => {\n          closeTimeout.set();\n          setBodyTransform(0);\n        };\n      }\n    } else {\n      closeTimeout.set();\n    }\n\n    setTouched(false);\n    callback && requestAnimationFrame(callback);\n  };\n\n  React.useEffect(() => closeTimeout.set(), [closeTimeout]);\n\n  const resolvedLayout = after || isDesktop ? \"vertical\" : layout;\n\n  return (\n    <AppRootPortal>\n      <div\n        {...restProps}\n        vkuiClass={classNames(\n          getClassName(\"Snackbar\", platform),\n          `Snackbar--l-${resolvedLayout}`,\n          {\n            \"Snackbar--closing\": closing,\n            \"Snackbar--touched\": touched,\n            \"Snackbar--desktop\": isDesktop,\n          }\n        )}\n      >\n        <Touch\n          vkuiClass=\"Snackbar__in\"\n          getRootRef={innerElRef}\n          onStart={onTouchStart}\n          onMoveX={onTouchMoveX}\n          onEnd={onTouchEnd}\n        >\n          <div vkuiClass=\"Snackbar__body\" ref={bodyElRef}>\n            {before && <div vkuiClass=\"Snackbar__before\">{before}</div>}\n\n            <div vkuiClass=\"Snackbar__content\">\n              <Text weight=\"regular\" vkuiClass=\"Snackbar__content-text\">\n                {children}\n              </Text>\n\n              {action && (\n                <Button\n                  align=\"left\"\n                  hasHover={false}\n                  mode=\"tertiary\"\n                  size=\"s\"\n                  vkuiClass=\"Snackbar__action\"\n                  onClick={handleActionClick}\n                >\n                  {action}\n                </Button>\n              )}\n            </div>\n\n            {after && <div vkuiClass=\"Snackbar__after\">{after}</div>}\n          </div>\n        </Touch>\n      </div>\n    </AppRootPortal>\n  );\n};\n\nSnackbarComponent.displayName = \"Snackbar\";\n\nSnackbarComponent.defaultProps = {\n  duration: 4000,\n  layout: \"horizontal\",\n};\n\nexport const Snackbar = withAdaptivity(SnackbarComponent, {\n  viewWidth: true,\n});\n"]},"metadata":{},"sourceType":"module"}