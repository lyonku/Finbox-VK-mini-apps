{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\n\n/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce(function (previous, current) {\n    return current + previous;\n  });\n}\n/**\n * Находит среднее арифметическое элементов массива\n */\n\nexport function averageArray(array) {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n/**\n * Возвращает новый массив с уникальными элементами\n */\n\nexport function uniqueArray(array) {\n  return array.filter(function (value, index, self) {\n    return self.indexOf(value) === index;\n  });\n}\n/**\n * Перемешивает исходный массив и возвращает новый\n */\n\nexport function shuffleArray(array) {\n  return array.map(function (a) {\n    return [Math.random(), a];\n  }).sort(function (a, b) {\n    return a[0] - b[0];\n  }).map(function (a) {\n    return a[1];\n  });\n}\n/**\n * Разбивает массив на чанки\n */\n\nexport function chunkArray(array, size) {\n  if (!array.length) {\n    return [];\n  }\n  var head = array.slice(0, size);\n  var tail = array.slice(size);\n  return [head].concat(_toConsumableArray(chunkArray(tail, size)));\n}\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\n\nexport function omitFromArray() {\n  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var value = arguments.length > 1 ? arguments[1] : undefined;\n  var index = array.indexOf(value);\n  if (index < 0) {\n    return array;\n  } else {\n    return [].concat(_toConsumableArray(array.slice(0, index)), _toConsumableArray(array.slice(index + 1)));\n  }\n}\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\n\nexport function difference() {\n  var array1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var array2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return array1.reduce(function (res, item) {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}","map":{"version":3,"mappings":";;AAAA;;;AAGA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAA2C;EAChD,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAD,IAAyB,CAACA,KAAK,CAACG,MAApC,EAA4C;IAC1C,OAAO,CAAP;EACD;EACD,OAAOH,KAAK,CAACI,MAAN,CAAa,UAACC,QAAD,EAAWC,OAAX;IAAA,OAAuBA,OAAO,GAAGD,QAAjC;EAAA,CAAb,CAAP;AACD;AAED;;;;AAGA,OAAO,SAASE,YAAT,CAAsBP,KAAtB,EAA+C;EACpD,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAD,IAAyB,CAACA,KAAK,CAACG,MAApC,EAA4C;IAC1C,OAAO,CAAP;EACD;EACD,OAAOJ,QAAQ,CAACC,KAAD,CAAR,GAAkBA,KAAK,CAACG,MAA/B;AACD;AAED;;;;AAGA,OAAO,SAASK,WAAT,CAAwBR,KAAxB,EAAyC;EAC9C,OAAOA,KAAK,CAACS,MAAN,CAAa,UAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAwB;IAC1C,OAAOA,IAAI,CAACC,OAAL,CAAaH,KAAb,MAAwBC,KAA/B;EACD,CAFM,CAAP;AAGD;AAED;;;;AAGA,OAAO,SAASG,YAAT,CAAyBd,KAAzB,EAA0C;EAC/C,OAAOA,KAAK,CACTe,GADI,CACa,UAACC,CAAD;IAAA,OAAO,CAACC,IAAI,CAACC,MAAL,EAAD,EAAgBF,CAAhB,CAAP;EAAA,CADb,EAEJG,IAFI,CAEC,UAACH,CAAD,EAAII,CAAJ;IAAA,OAAUJ,CAAC,CAAC,CAAD,CAAD,GAAOI,CAAC,CAAC,CAAD,CAAlB;EAAA,CAFD,EAGJL,GAHI,CAGG,UAACC,CAAD;IAAA,OAAOA,CAAC,CAAC,CAAD,CAAR;EAAA,CAHH,CAAP;AAID;AAED;;;;AAGA,OAAO,SAASK,UAAT,CAAuBrB,KAAvB,EAAmCsB,IAAnC,EAAwD;EAC7D,IAAI,CAACtB,KAAK,CAACG,MAAX,EAAmB;IACjB,OAAO,EAAP;EACD;EACD,IAAMoB,IAAI,GAAGvB,KAAK,CAACwB,KAAN,CAAY,CAAZ,EAAeF,IAAf,CAAb;EACA,IAAMG,IAAI,GAAGzB,KAAK,CAACwB,KAAN,CAAYF,IAAZ,CAAb;EAEA,QAAQC,IAAR,4BAAiBF,UAAU,CAACI,IAAD,EAAOH,IAAP,CAA3B;AACD;AAED;;;;;;;;;;AASA,OAAO,SAASI,aAAT,GAA0D;EAAA,IAAhC1B,KAAgC,uEAAnB,EAAmB;EAAA,IAAfU,KAAe;EAC/D,IAAMC,KAAK,GAAGX,KAAK,CAACa,OAAN,CAAcH,KAAd,CAAd;EAEA,IAAIC,KAAK,GAAG,CAAZ,EAAe;IACb,OAAOX,KAAP;EACD,CAFD,MAEO;IACL,oCAAWA,KAAK,CAACwB,KAAN,CAAY,CAAZ,EAAeb,KAAf,CAAX,sBAAqCX,KAAK,CAACwB,KAAN,CAAYb,KAAK,GAAG,CAApB,CAArC;EACD;AACF;AAED;;;;;;;;;;;AAUA,OAAO,SAASgB,UAAT,GAA2D;EAAA,IAApCC,MAAoC,uEAAtB,EAAsB;EAAA,IAAlBC,MAAkB,uEAAJ,EAAI;EAChE,OAAOD,MAAM,CAACxB,MAAP,CAAmB,UAAC0B,GAAD,EAAMC,IAAN,EAAe;IACvC,IAAIF,MAAM,CAAChB,OAAP,CAAekB,IAAf,IAAuB,CAA3B,EAA8B;MAC5BD,GAAG,CAACE,IAAJ,CAASD,IAAT;IACD;IACD,OAAOD,GAAP;EACD,CALM,EAKJ,EALI,CAAP;AAMD","names":["sumArray","array","Array","isArray","length","reduce","previous","current","averageArray","uniqueArray","filter","value","index","self","indexOf","shuffleArray","map","a","Math","random","sort","b","chunkArray","size","head","slice","tail","omitFromArray","difference","array1","array2","res","item","push"],"sources":["../../src/arrays.ts"],"sourcesContent":["/**\n * Вычисляет сумму элементов массива\n */\nexport function sumArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return array.reduce((previous, current) => current + previous);\n}\n\n/**\n * Находит среднее арифметическое элементов массива\n */\nexport function averageArray(array: number[]): number {\n  if (!Array.isArray(array) || !array.length) {\n    return 0;\n  }\n  return sumArray(array) / array.length;\n}\n\n/**\n * Возвращает новый массив с уникальными элементами\n */\nexport function uniqueArray<T>(array: T[]): T[] {\n  return array.filter((value, index, self) => {\n    return self.indexOf(value) === index;\n  });\n}\n\n/**\n * Перемешивает исходный массив и возвращает новый\n */\nexport function shuffleArray<T>(array: T[]): T[] {\n  return array\n    .map<[number, T]>((a) => [Math.random(), a])\n    .sort((a, b) => a[0] - b[0])\n    .map<T>((a) => a[1]);\n}\n\n/**\n * Разбивает массив на чанки\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (!array.length) {\n    return [];\n  }\n  const head = array.slice(0, size);\n  const tail = array.slice(size);\n\n  return [head, ...chunkArray(tail, size)];\n}\n\n/**\n * Удаляет из массива элемент по значению.\n * Если элемент был удалён – возвращает новый массив.\n *\n * @example\n *\n * omitFromArray([1, 2, 3], 3) // [1, 2]\n * omitFromArray([1, 2, 3], 5) // [1, 2, 3]\n */\nexport function omitFromArray<T>(array: T[] = [], value: T): T[] {\n  const index = array.indexOf(value);\n\n  if (index < 0) {\n    return array;\n  } else {\n    return [...array.slice(0, index), ...array.slice(index + 1)];\n  }\n}\n\n/**\n * Возвращает разницу между двумя массивами.\n * Вернёт элементы, которых не хватает во втором массиве.\n *\n * @example\n *\n * difference([1, 2, 3], [1, 2, 3]) // []\n * difference([1, 2, 3], [1]) // [2, 3]\n * difference([1, 2, 3], [1, 10, 100]) // [2, 3]\n */\nexport function difference<T>(array1: T[] = [], array2: T[] = []) {\n  return array1.reduce<T[]>((res, item) => {\n    if (array2.indexOf(item) < 0) {\n      res.push(item);\n    }\n    return res;\n  }, []);\n}\n"]},"metadata":{},"sourceType":"module"}