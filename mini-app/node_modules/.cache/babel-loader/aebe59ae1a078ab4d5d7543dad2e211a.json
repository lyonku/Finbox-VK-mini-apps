{"ast":null,"code":"import firebase from '@firebase/app-compat';\nimport { Component } from '@firebase/component';\nimport { activate, ensureInitialized, fetchConfig, fetchAndActivate, getAll, getBoolean, getNumber, getString, getValue, setLogLevel, isSupported } from '@firebase/remote-config';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass RemoteConfigCompatImpl {\n  constructor(app, _delegate) {\n    this.app = app;\n    this._delegate = _delegate;\n  }\n  get defaultConfig() {\n    return this._delegate.defaultConfig;\n  }\n  set defaultConfig(value) {\n    this._delegate.defaultConfig = value;\n  }\n  get fetchTimeMillis() {\n    return this._delegate.fetchTimeMillis;\n  }\n  get lastFetchStatus() {\n    return this._delegate.lastFetchStatus;\n  }\n  get settings() {\n    return this._delegate.settings;\n  }\n  set settings(value) {\n    this._delegate.settings = value;\n  }\n  activate() {\n    return activate(this._delegate);\n  }\n  ensureInitialized() {\n    return ensureInitialized(this._delegate);\n  }\n  /**\r\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\r\n   * {@link Settings.fetchTimeoutInSeconds} or\r\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\r\n   */\n  fetch() {\n    return fetchConfig(this._delegate);\n  }\n  fetchAndActivate() {\n    return fetchAndActivate(this._delegate);\n  }\n  getAll() {\n    return getAll(this._delegate);\n  }\n  getBoolean(key) {\n    return getBoolean(this._delegate, key);\n  }\n  getNumber(key) {\n    return getNumber(this._delegate, key);\n  }\n  getString(key) {\n    return getString(this._delegate, key);\n  }\n  getValue(key) {\n    return getValue(this._delegate, key);\n  }\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel) {\n    setLogLevel(this._delegate, logLevel);\n  }\n}\nconst name = \"@firebase/remote-config-compat\";\nconst version = \"0.1.16\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerRemoteConfigCompat(firebaseInstance) {\n  firebaseInstance.INTERNAL.registerComponent(new Component('remoteConfig-compat', remoteConfigFactory, \"PUBLIC\" /* PUBLIC */).setMultipleInstances(true).setServiceProps({\n    isSupported\n  }));\n  firebaseInstance.registerVersion(name, version);\n}\nfunction remoteConfigFactory(container, _ref) {\n  let {\n    instanceIdentifier: namespace\n  } = _ref;\n  const app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\nregisterRemoteConfigCompat(firebase);","map":{"version":3,"mappings":";;;;AAAA;;;;;;;;;;;;;;;AAeG;MA2BUA,sBAAsB;EAGjCC,WAAmB,IAAgB,EAAWC,SAAuB;IAAlD,IAAG,OAAHC,GAAG;IAAwB,IAAS,aAATD,SAAS;;EAEvD,IAAIE,aAAa;IACf,OAAO,IAAI,CAACF,SAAS,CAACE,aAAa;;EAGrC,IAAIA,aAAa,CAACC,KAAmD;IACnE,IAAI,CAACH,SAAS,CAACE,aAAa,GAAGC,KAAK;;EAGtC,IAAIC,eAAe;IACjB,OAAO,IAAI,CAACJ,SAAS,CAACI,eAAe;;EAGvC,IAAIC,eAAe;IACjB,OAAO,IAAI,CAACL,SAAS,CAACK,eAAe;;EAGvC,IAAIC,QAAQ;IACV,OAAO,IAAI,CAACN,SAAS,CAACM,QAAQ;;EAGhC,IAAIA,QAAQ,CAACH,KAAqB;IAChC,IAAI,CAACH,SAAS,CAACM,QAAQ,GAAGH,KAAK;;EAGjCI,QAAQ;IACN,OAAOA,QAAQ,CAAC,IAAI,CAACP,SAAS,CAAC;;EAGjCQ,iBAAiB;IACf,OAAOA,iBAAiB,CAAC,IAAI,CAACR,SAAS,CAAC;;EAG1C;;;;AAIG;EACHS,KAAK;IACH,OAAOC,WAAW,CAAC,IAAI,CAACV,SAAS,CAAC;;EAGpCW,gBAAgB;IACd,OAAOA,gBAAgB,CAAC,IAAI,CAACX,SAAS,CAAC;;EAGzCY,MAAM;IACJ,OAAOA,MAAM,CAAC,IAAI,CAACZ,SAAS,CAAC;;EAG/Ba,UAAU,CAACC,GAAW;IACpB,OAAOD,UAAU,CAAC,IAAI,CAACb,SAAS,EAAEc,GAAG,CAAC;;EAGxCC,SAAS,CAACD,GAAW;IACnB,OAAOC,SAAS,CAAC,IAAI,CAACf,SAAS,EAAEc,GAAG,CAAC;;EAGvCE,SAAS,CAACF,GAAW;IACnB,OAAOE,SAAS,CAAC,IAAI,CAAChB,SAAS,EAAEc,GAAG,CAAC;;EAGvCG,QAAQ,CAACH,GAAW;IAClB,OAAOG,QAAQ,CAAC,IAAI,CAACjB,SAAS,EAAEc,GAAG,CAAC;;;;EAKtCI,WAAW,CAACC,QAA8B;IACxCD,WAAW,CAAC,IAAI,CAAClB,SAAS,EAAEmB,QAAQ,CAAC;;AAExC;;;;ACrHD;;;;;;;;;;;;;;;AAeG;AAaH,SAASC,0BAA0B,CACjCC,gBAAoC;EAEpCA,gBAAgB,CAACC,QAAQ,CAACC,iBAAiB,CACzC,IAAIC,SAAS,CACX,qBAAqB,EACrBC,mBAAmB,EAEpB,uBACEC,oBAAoB,CAAC,IAAI,CAAC,CAC1BC,eAAe,CAAC;IAAEC;EAAW,CAAE,CAAC,CACpC;EAEDP,gBAAgB,CAACQ,eAAe,CAACC,IAAW,EAAEC,OAAO,CAAC;AACxD;AAEA,SAASN,mBAAmB,CAC1BO,SAA6B,QAC4B;EAAA,IAAzD;IAAEC,kBAAkB,EAAEC;EAAS,CAA0B;EAEzD,MAAMjC,GAAG,GAAG+B,SAAS,CAACG,WAAW,CAAC,YAAY,CAAC,CAACC,YAAY,EAAE;;EAE9D,MAAMC,YAAY,GAAGL,SAAS,CAACG,WAAW,CAAC,eAAe,CAAC,CAACC,YAAY,CAAC;IACvEE,UAAU,EAAEJ;EACb,EAAC;EAEF,OAAO,IAAIpC,sBAAsB,CAACG,GAAG,EAAEoC,YAAY,CAAC;AACtD;AAEAjB,0BAA0B,CAACmB,QAA8B,CAAC","names":["RemoteConfigCompatImpl","constructor","_delegate","app","defaultConfig","value","fetchTimeMillis","lastFetchStatus","settings","activate","ensureInitialized","fetch","fetchConfig","fetchAndActivate","getAll","getBoolean","key","getNumber","getString","getValue","setLogLevel","logLevel","registerRemoteConfigCompat","firebaseInstance","INTERNAL","registerComponent","Component","remoteConfigFactory","setMultipleInstances","setServiceProps","isSupported","registerVersion","packageName","version","container","instanceIdentifier","namespace","getProvider","getImmediate","remoteConfig","identifier","firebase"],"sources":["../../src/remoteConfig.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp, _FirebaseService } from '@firebase/app-compat';\nimport {\n  Value as ValueCompat,\n  FetchStatus as FetchSTatusCompat,\n  Settings as SettingsCompat,\n  LogLevel as RemoteConfigLogLevel,\n  RemoteConfig as RemoteConfigCompat\n} from '@firebase/remote-config-types';\nimport {\n  RemoteConfig,\n  setLogLevel,\n  activate,\n  ensureInitialized,\n  fetchAndActivate,\n  fetchConfig,\n  getAll,\n  getBoolean,\n  getNumber,\n  getString,\n  getValue,\n  isSupported\n} from '@firebase/remote-config';\n\nexport { isSupported };\n\nexport class RemoteConfigCompatImpl\n  implements RemoteConfigCompat, _FirebaseService\n{\n  constructor(public app: FirebaseApp, readonly _delegate: RemoteConfig) {}\n\n  get defaultConfig(): { [key: string]: string | number | boolean } {\n    return this._delegate.defaultConfig;\n  }\n\n  set defaultConfig(value: { [key: string]: string | number | boolean }) {\n    this._delegate.defaultConfig = value;\n  }\n\n  get fetchTimeMillis(): number {\n    return this._delegate.fetchTimeMillis;\n  }\n\n  get lastFetchStatus(): FetchSTatusCompat {\n    return this._delegate.lastFetchStatus;\n  }\n\n  get settings(): SettingsCompat {\n    return this._delegate.settings;\n  }\n\n  set settings(value: SettingsCompat) {\n    this._delegate.settings = value;\n  }\n\n  activate(): Promise<boolean> {\n    return activate(this._delegate);\n  }\n\n  ensureInitialized(): Promise<void> {\n    return ensureInitialized(this._delegate);\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  fetch(): Promise<void> {\n    return fetchConfig(this._delegate);\n  }\n\n  fetchAndActivate(): Promise<boolean> {\n    return fetchAndActivate(this._delegate);\n  }\n\n  getAll(): { [key: string]: ValueCompat } {\n    return getAll(this._delegate);\n  }\n\n  getBoolean(key: string): boolean {\n    return getBoolean(this._delegate, key);\n  }\n\n  getNumber(key: string): number {\n    return getNumber(this._delegate, key);\n  }\n\n  getString(key: string): string {\n    return getString(this._delegate, key);\n  }\n\n  getValue(key: string): ValueCompat {\n    return getValue(this._delegate, key);\n  }\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    setLogLevel(this._delegate, logLevel);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase, { _FirebaseNamespace } from '@firebase/app-compat';\nimport {\n  Component,\n  ComponentContainer,\n  ComponentType,\n  InstanceFactoryOptions\n} from '@firebase/component';\nimport { RemoteConfigCompatImpl, isSupported } from './remoteConfig';\nimport { name as packageName, version } from '../package.json';\nimport { RemoteConfig as RemoteConfigCompat } from '@firebase/remote-config-types';\n\nfunction registerRemoteConfigCompat(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig-compat',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    )\n      .setMultipleInstances(true)\n      .setServiceProps({ isSupported })\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n}\n\nfunction remoteConfigFactory(\n  container: ComponentContainer,\n  { instanceIdentifier: namespace }: InstanceFactoryOptions\n): RemoteConfigCompatImpl {\n  const app = container.getProvider('app-compat').getImmediate();\n  // The following call will always succeed because rc `import {...} from '@firebase/remote-config'`\n  const remoteConfig = container.getProvider('remote-config').getImmediate({\n    identifier: namespace\n  });\n\n  return new RemoteConfigCompatImpl(app, remoteConfig);\n}\n\nregisterRemoteConfigCompat(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-compat' {\n  interface FirebaseNamespace {\n    remoteConfig: {\n      (app?: FirebaseApp): RemoteConfigCompat;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigCompat;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}