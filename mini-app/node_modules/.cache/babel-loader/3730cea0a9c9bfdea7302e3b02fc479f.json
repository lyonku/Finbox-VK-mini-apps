{"ast":null,"code":"import _toConsumableArray from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _defineProperty from \"C:/Users/zpili/Desktop/Finbox-VK-mini-apps/mini-app/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _ERROR_DESCRIPTION_MA;\nimport { ErrorFactory, areCookiesEnabled, isIndexedDBAvailable, validateIndexedDBOpenable, getModularInstance, deepEqual } from '@firebase/util';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { _getProvider, getApp, _registerComponent, registerVersion } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport '@firebase/installations';\nvar name = \"@firebase/performance\";\nvar version = \"0.5.17\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nvar TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nvar TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nvar TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nvar OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\nvar FIRST_PAINT_COUNTER_NAME = '_fp';\nvar FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\nvar FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\nvar CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\nvar CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\nvar SERVICE = 'performance';\nvar SERVICE_NAME = 'Performance';\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ERROR_DESCRIPTION_MAP = (_ERROR_DESCRIPTION_MA = {}, _defineProperty(_ERROR_DESCRIPTION_MA, \"trace started\" /* TRACE_STARTED_BEFORE */, 'Trace {$traceName} was started before.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"trace stopped\" /* TRACE_STOPPED_BEFORE */, 'Trace {$traceName} is not running.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"nonpositive trace startTime\" /* NONPOSITIVE_TRACE_START_TIME */, 'Trace {$traceName} startTime should be positive.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"nonpositive trace duration\" /* NONPOSITIVE_TRACE_DURATION */, 'Trace {$traceName} duration should be positive.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"no window\" /* NO_WINDOW */, 'Window is not available.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"no app id\" /* NO_APP_ID */, 'App id is not available.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"no project id\" /* NO_PROJECT_ID */, 'Project id is not available.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"no api key\" /* NO_API_KEY */, 'Api key is not available.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid cc log\" /* INVALID_CC_LOG */, 'Attempted to queue invalid cc event'), _defineProperty(_ERROR_DESCRIPTION_MA, \"FB not default\" /* FB_NOT_DEFAULT */, 'Performance can only start when Firebase app instance is the default one.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"RC response not ok\" /* RC_NOT_OK */, 'RC response is not ok'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid attribute name\" /* INVALID_ATTRIBUTE_NAME */, 'Attribute name {$attributeName} is invalid.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid attribute value\" /* INVALID_ATTRIBUTE_VALUE */, 'Attribute value {$attributeValue} is invalid.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid custom metric name\" /* INVALID_CUSTOM_METRIC_NAME */, 'Custom metric name {$customMetricName} is invalid'), _defineProperty(_ERROR_DESCRIPTION_MA, \"invalid String merger input\" /* INVALID_STRING_MERGER_PARAMETER */, 'Input for String merger is invalid, contact support team to resolve.'), _defineProperty(_ERROR_DESCRIPTION_MA, \"already initialized\" /* ALREADY_INITIALIZED */, 'initializePerformance() has already been called with ' + 'different options. To avoid this error, call initializePerformance() with the ' + 'same options as when it was originally called, or call getPerformance() to return the' + ' already initialized instance.'), _ERROR_DESCRIPTION_MA);\nvar ERROR_FACTORY = new ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar apiInstance;\nvar windowInstance;\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\nvar Api = /*#__PURE__*/function () {\n  function Api(window) {\n    _classCallCheck(this, Api);\n    this.window = window;\n    if (!window) {\n      throw ERROR_FACTORY.create(\"no window\" /* NO_WINDOW */);\n    }\n\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n  _createClass(Api, [{\n    key: \"getUrl\",\n    value: function getUrl() {\n      // Do not capture the string query part of url.\n      return this.windowLocation.href.split('?')[0];\n    }\n  }, {\n    key: \"mark\",\n    value: function mark(name) {\n      if (!this.performance || !this.performance.mark) {\n        return;\n      }\n      this.performance.mark(name);\n    }\n  }, {\n    key: \"measure\",\n    value: function measure(measureName, mark1, mark2) {\n      if (!this.performance || !this.performance.measure) {\n        return;\n      }\n      this.performance.measure(measureName, mark1, mark2);\n    }\n  }, {\n    key: \"getEntriesByType\",\n    value: function getEntriesByType(type) {\n      if (!this.performance || !this.performance.getEntriesByType) {\n        return [];\n      }\n      return this.performance.getEntriesByType(type);\n    }\n  }, {\n    key: \"getEntriesByName\",\n    value: function getEntriesByName(name) {\n      if (!this.performance || !this.performance.getEntriesByName) {\n        return [];\n      }\n      return this.performance.getEntriesByName(name);\n    }\n  }, {\n    key: \"getTimeOrigin\",\n    value: function getTimeOrigin() {\n      // Polyfill the time origin with performance.timing.navigationStart.\n      return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);\n    }\n  }, {\n    key: \"requiredApisAvailable\",\n    value: function requiredApisAvailable() {\n      if (!fetch || !Promise || !areCookiesEnabled()) {\n        consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\n        return false;\n      }\n      if (!isIndexedDBAvailable()) {\n        consoleLogger.info('IndexedDB is not supported by current browswer');\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"setupObserver\",\n    value: function setupObserver(entryType, callback) {\n      if (!this.PerformanceObserver) {\n        return;\n      }\n      var observer = new this.PerformanceObserver(function (list) {\n        var _iterator = _createForOfIteratorHelper(list.getEntries()),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var entry = _step.value;\n            // `entry` is a PerformanceEntry instance.\n            callback(entry);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      });\n      // Start observing the entry types you care about.\n      observer.observe({\n        entryTypes: [entryType]\n      });\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (apiInstance === undefined) {\n        apiInstance = new Api(windowInstance);\n      }\n      return apiInstance;\n    }\n  }]);\n  return Api;\n}();\nfunction setupApi(window) {\n  windowInstance = window;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar iid;\nfunction getIidPromise(installationsService) {\n  var iidPromise = installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then(function (iidVal) {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n// This method should be used after the iid is retrieved by getIidPromise method.\nfunction getIid() {\n  return iid;\n}\nfunction getAuthTokenPromise(installationsService) {\n  var authTokenPromise = installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then(function (authTokenVal) {});\n  return authTokenPromise;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction mergeStrings(part1, part2) {\n  var sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(\"invalid String merger input\" /* INVALID_STRING_MERGER_PARAMETER */);\n  }\n\n  var resultArray = [];\n  for (var i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n  return resultArray.join('');\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar settingsServiceInstance;\nvar SettingsService = /*#__PURE__*/function () {\n  function SettingsService() {\n    _classCallCheck(this, SettingsService);\n    // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n    this.instrumentationEnabled = true;\n    // The variable which controls logging of custom traces.\n    this.dataCollectionEnabled = true;\n    // Configuration flags set through remote config.\n    this.loggingEnabled = false;\n    // Sampling rate between 0 and 1.\n    this.tracesSamplingRate = 1;\n    this.networkRequestsSamplingRate = 1;\n    // Address of logging service.\n    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n    // Performance event transport endpoint URL which should be compatible with proto3.\n    // New Address for transport service, not configurable via Remote Config.\n    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n    // Source type for performance event logs.\n    this.logSource = 462;\n    // Flags which control per session logging of traces and network requests.\n    this.logTraceAfterSampling = false;\n    this.logNetworkAfterSampling = false;\n    // TTL of config retrieved from remote config in hours.\n    this.configTimeToLive = 12;\n  }\n  _createClass(SettingsService, [{\n    key: \"getFlTransportFullUrl\",\n    value: function getFlTransportFullUrl() {\n      return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n    }\n  }], [{\n    key: \"getInstance\",\n    value: function getInstance() {\n      if (settingsServiceInstance === undefined) {\n        settingsServiceInstance = new SettingsService();\n      }\n      return settingsServiceInstance;\n    }\n  }]);\n  return SettingsService;\n}(); /**\r\n      * @license\r\n      * Copyright 2020 Google LLC\r\n      *\r\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n      * you may not use this file except in compliance with the License.\r\n      * You may obtain a copy of the License at\r\n      *\r\n      *   http://www.apache.org/licenses/LICENSE-2.0\r\n      *\r\n      * Unless required by applicable law or agreed to in writing, software\r\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n      * See the License for the specific language governing permissions and\r\n      * limitations under the License.\r\n      */\nvar VisibilityState;\n(function (VisibilityState) {\n  VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\n})(VisibilityState || (VisibilityState = {}));\nvar RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nvar ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nvar MAX_ATTRIBUTE_NAME_LENGTH = 40;\nvar MAX_ATTRIBUTE_VALUE_LENGTH = 100;\nfunction getServiceWorkerStatus() {\n  var navigator = Api.getInstance().navigator;\n  if (navigator === null || navigator === void 0 ? void 0 : navigator.serviceWorker) {\n    if (navigator.serviceWorker.controller) {\n      return 2 /* CONTROLLED */;\n    } else {\n      return 3 /* UNCONTROLLED */;\n    }\n  } else {\n    return 1 /* UNSUPPORTED */;\n  }\n}\n\nfunction getVisibilityState() {\n  var document = Api.getInstance().document;\n  var visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\nfunction getEffectiveConnectionType() {\n  var navigator = Api.getInstance().navigator;\n  var navigatorConnection = navigator.connection;\n  var effectiveType = navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return 1 /* CONNECTION_SLOW_2G */;\n    case '2g':\n      return 2 /* CONNECTION_2G */;\n    case '3g':\n      return 3 /* CONNECTION_3G */;\n    case '4g':\n      return 4 /* CONNECTION_4G */;\n    default:\n      return 0 /* UNKNOWN */;\n  }\n}\n\nfunction isValidCustomAttributeName(name) {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {\n    return name.startsWith(prefix);\n  });\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\nfunction isValidCustomAttributeValue(value) {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getAppId(firebaseApp) {\n  var _a;\n  var appId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(\"no app id\" /* NO_APP_ID */);\n  }\n\n  return appId;\n}\nfunction getProjectId(firebaseApp) {\n  var _a;\n  var projectId = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.projectId;\n  if (!projectId) {\n    throw ERROR_FACTORY.create(\"no project id\" /* NO_PROJECT_ID */);\n  }\n\n  return projectId;\n}\nfunction getApiKey(firebaseApp) {\n  var _a;\n  var apiKey = (_a = firebaseApp.options) === null || _a === void 0 ? void 0 : _a.apiKey;\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(\"no api key\" /* NO_API_KEY */);\n  }\n\n  return apiKey;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nvar DEFAULT_CONFIGS = {\n  loggingEnabled: true\n};\nvar FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\nfunction getConfig(performanceController, iid) {\n  var config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n  return getRemoteConfig(performanceController, iid).then(processConfig).then(function (config) {\n    return storeConfig(config);\n  }, /** Do nothing for error, use defaults set in settings service. */\n  function () {});\n}\nfunction getStoredConfig() {\n  var localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n  var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    var configResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch (_a) {\n    return;\n  }\n}\nfunction storeConfig(config) {\n  var localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\n}\nvar COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\nfunction getRemoteConfig(performanceController, iid) {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations).then(function (authToken) {\n    var projectId = getProjectId(performanceController.app);\n    var apiKey = getApiKey(performanceController.app);\n    var configEndPoint = \"https://firebaseremoteconfig.googleapis.com/v1/projects/\".concat(projectId, \"/namespaces/fireperf:fetch?key=\").concat(apiKey);\n    var request = new Request(configEndPoint, {\n      method: 'POST',\n      headers: {\n        Authorization: \"\".concat(FIS_AUTH_PREFIX, \" \").concat(authToken)\n      },\n      /* eslint-disable camelcase */\n      body: JSON.stringify({\n        app_instance_id: iid,\n        app_instance_id_token: authToken,\n        app_id: getAppId(performanceController.app),\n        app_version: SDK_VERSION,\n        sdk_version: REMOTE_CONFIG_SDK_VERSION\n      })\n      /* eslint-enable camelcase */\n    });\n\n    return fetch(request).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      }\n      // In case response is not ok. This will be caught by catch.\n      throw ERROR_FACTORY.create(\"RC response not ok\" /* RC_NOT_OK */);\n    });\n  }).catch(function () {\n    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n    return undefined;\n  });\n}\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\nfunction processConfig(config) {\n  if (!config) {\n    return config;\n  }\n  var settingsServiceInstance = SettingsService.getInstance();\n  var entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';\n  } else {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\n  return config;\n}\nfunction configValid(expiry) {\n  return Number(expiry) > Date.now();\n}\nfunction shouldLogAfterSampling(samplingRate) {\n  return Math.random() <= samplingRate;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar initializationStatus = 1 /* notInitialized */;\nvar initializationPromise;\nfunction getInitializationPromise(performanceController) {\n  initializationStatus = 2 /* initializationPending */;\n  initializationPromise = initializationPromise || initializePerf(performanceController);\n  return initializationPromise;\n}\nfunction isPerfInitialized() {\n  return initializationStatus === 3 /* initialized */;\n}\n\nfunction initializePerf(performanceController) {\n  return getDocumentReadyComplete().then(function () {\n    return getIidPromise(performanceController.installations);\n  }).then(function (iid) {\n    return getConfig(performanceController, iid);\n  }).then(function () {\n    return changeInitializationStatus();\n  }, function () {\n    return changeInitializationStatus();\n  });\n}\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\nfunction getDocumentReadyComplete() {\n  var document = Api.getInstance().document;\n  return new Promise(function (resolve) {\n    if (document && document.readyState !== 'complete') {\n      var handler = function handler() {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\nfunction changeInitializationStatus() {\n  initializationStatus = 3 /* initialized */;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nvar INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nvar DEFAULT_REMAINING_TRIES = 3;\nvar MAX_EVENT_COUNT_PER_REQUEST = 1000;\nvar remainingTries = DEFAULT_REMAINING_TRIES;\n/* eslint-enable camelcase */\nvar queue = [];\nvar isTransportSetup = false;\nfunction setupTransportService() {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\nfunction processQueue(timeOffset) {\n  setTimeout(function () {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n    dispatchQueueEvents();\n  }, timeOffset);\n}\nfunction dispatchQueueEvents() {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  var staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  var log_event = staged.map(function (evt) {\n    return {\n      source_extension_json_proto3: evt.message,\n      event_time_ms: String(evt.eventTime)\n    };\n  });\n  var data = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1,\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event: log_event\n  };\n  /* eslint-enable camelcase */\n  sendEventsToFl(data, staged).catch(function () {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [].concat(_toConsumableArray(staged), _toConsumableArray(queue));\n    remainingTries--;\n    consoleLogger.info(\"Tries left: \".concat(remainingTries, \".\"));\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\nfunction sendEventsToFl(data, staged) {\n  return postToFlEndpoint(data).then(function (res) {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n    return res.json();\n  }).then(function (res) {\n    // Find the next call wait time from the response.\n    var transportWait = Number(res.nextRequestWaitMillis);\n    var requestOffset = DEFAULT_SEND_INTERVAL_MS;\n    if (!isNaN(transportWait)) {\n      requestOffset = Math.max(transportWait, requestOffset);\n    }\n    // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n    var logResponseDetails = res.logResponseDetails;\n    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\n      queue = [].concat(_toConsumableArray(staged), _toConsumableArray(queue));\n      consoleLogger.info(\"Retry transport request later.\");\n    }\n    remainingTries = DEFAULT_REMAINING_TRIES;\n    // Schedule the next process.\n    processQueue(requestOffset);\n  });\n}\nfunction postToFlEndpoint(data) {\n  var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\nfunction addToQueue(evt) {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(\"invalid cc log\" /* INVALID_CC_LOG */);\n  }\n  // Add the new event to the queue.\n  queue = [].concat(_toConsumableArray(queue), [evt]);\n}\n/** Log handler for cc service to send the performance logs to the server. */\nfunction transportHandler(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nserializer) {\n  return function () {\n    var message = serializer.apply(void 0, arguments);\n    addToQueue({\n      message: message,\n      eventTime: Date.now()\n    });\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/* eslint-enble camelcase */\nvar logger;\n// This method is not called before initialization.\nfunction sendLog(resource, resourceType) {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\nfunction logTrace(trace) {\n  var settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(function () {\n      return sendTraceLog(trace);\n    }, function () {\n      return sendTraceLog(trace);\n    });\n  }\n}\nfunction sendTraceLog(trace) {\n  if (!getIid()) {\n    return;\n  }\n  var settingsService = SettingsService.getInstance();\n  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {\n    return;\n  }\n  setTimeout(function () {\n    return sendLog(trace, 1 /* Trace */);\n  }, 0);\n}\nfunction logNetworkRequest(networkRequest) {\n  var settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  var networkRequestUrl = networkRequest.url;\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {\n    return;\n  }\n  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {\n    return;\n  }\n  setTimeout(function () {\n    return sendLog(networkRequest, 0 /* NetworkRequest */);\n  }, 0);\n}\nfunction serializer(resource, resourceType) {\n  if (resourceType === 0 /* NetworkRequest */) {\n    return serializeNetworkRequest(resource);\n  }\n  return serializeTrace(resource);\n}\nfunction serializeNetworkRequest(networkRequest) {\n  var networkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  var perfMetric = {\n    application_info: getApplicationInfo(networkRequest.performanceController.app),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\nfunction serializeTrace(trace) {\n  var traceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  var customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n  var perfMetric = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\nfunction getApplicationInfo(firebaseApp) {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MAX_METRIC_NAME_LENGTH = 100;\nvar RESERVED_AUTO_PREFIX = '_';\nvar oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\nfunction isValidMetricName(name, traceName) {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);\n}\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\nfunction convertMetricValueToInteger(providedValue) {\n  var valueAsInteger = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\"Metric value should be an Integer, setting the value as : \".concat(valueAsInteger, \".\"));\n  }\n  return valueAsInteger;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar Trace = /*#__PURE__*/function () {\n  /**\r\n   * @param performanceController The performance controller running.\r\n   * @param name The name of the trace.\r\n   * @param isAuto If the trace is auto-instrumented.\r\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n   * is only set when the trace is built for logging when the user directly uses the user timing\r\n   * api (performance.mark and performance.measure).\r\n   */\n  function Trace(performanceController, name) {\n    var isAuto = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var traceMeasureName = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, Trace);\n    this.performanceController = performanceController;\n    this.name = name;\n    this.isAuto = isAuto;\n    this.state = 1 /* UNINITIALIZED */;\n    this.customAttributes = {};\n    this.counters = {};\n    this.api = Api.getInstance();\n    this.randomId = Math.floor(Math.random() * 1000000);\n    if (!this.isAuto) {\n      this.traceStartMark = \"\".concat(TRACE_START_MARK_PREFIX, \"-\").concat(this.randomId, \"-\").concat(this.name);\n      this.traceStopMark = \"\".concat(TRACE_STOP_MARK_PREFIX, \"-\").concat(this.randomId, \"-\").concat(this.name);\n      this.traceMeasure = traceMeasureName || \"\".concat(TRACE_MEASURE_PREFIX, \"-\").concat(this.randomId, \"-\").concat(this.name);\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n  /**\r\n   * Starts a trace. The measurement of the duration starts at this point.\r\n   */\n  _createClass(Trace, [{\n    key: \"start\",\n    value: function start() {\n      if (this.state !== 1 /* UNINITIALIZED */) {\n        throw ERROR_FACTORY.create(\"trace started\" /* TRACE_STARTED_BEFORE */, {\n          traceName: this.name\n        });\n      }\n      this.api.mark(this.traceStartMark);\n      this.state = 2 /* RUNNING */;\n    }\n    /**\r\n     * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n     * is logged.\r\n     */\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      if (this.state !== 2 /* RUNNING */) {\n        throw ERROR_FACTORY.create(\"trace stopped\" /* TRACE_STOPPED_BEFORE */, {\n          traceName: this.name\n        });\n      }\n      this.state = 3 /* TERMINATED */;\n      this.api.mark(this.traceStopMark);\n      this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\n      this.calculateTraceMetrics();\n      logTrace(this);\n    }\n    /**\r\n     * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n     * directly. No need to use start and stop methods.\r\n     * @param startTime Trace start time since epoch in millisec\r\n     * @param duration The duraction of the trace in millisec\r\n     * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n     */\n  }, {\n    key: \"record\",\n    value: function record(startTime, duration, options) {\n      if (startTime <= 0) {\n        throw ERROR_FACTORY.create(\"nonpositive trace startTime\" /* NONPOSITIVE_TRACE_START_TIME */, {\n          traceName: this.name\n        });\n      }\n      if (duration <= 0) {\n        throw ERROR_FACTORY.create(\"nonpositive trace duration\" /* NONPOSITIVE_TRACE_DURATION */, {\n          traceName: this.name\n        });\n      }\n      this.durationUs = Math.floor(duration * 1000);\n      this.startTimeUs = Math.floor(startTime * 1000);\n      if (options && options.attributes) {\n        this.customAttributes = Object.assign({}, options.attributes);\n      }\n      if (options && options.metrics) {\n        for (var _i = 0, _Object$keys = Object.keys(options.metrics); _i < _Object$keys.length; _i++) {\n          var metricName = _Object$keys[_i];\n          if (!isNaN(Number(options.metrics[metricName]))) {\n            this.counters[metricName] = Math.floor(Number(options.metrics[metricName]));\n          }\n        }\n      }\n      logTrace(this);\n    }\n    /**\r\n     * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n     * custom metric if one with the given name does not exist. The value will be floored down to an\r\n     * integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Increment by value\r\n     */\n  }, {\n    key: \"incrementMetric\",\n    value: function incrementMetric(counter) {\n      var numAsInteger = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (this.counters[counter] === undefined) {\n        this.putMetric(counter, numAsInteger);\n      } else {\n        this.putMetric(counter, this.counters[counter] + numAsInteger);\n      }\n    }\n    /**\r\n     * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n     * given name does not exist. The value will be floored down to an integer.\r\n     * @param counter Name of the custom metric\r\n     * @param numAsInteger Set custom metric to this value\r\n     */\n  }, {\n    key: \"putMetric\",\n    value: function putMetric(counter, numAsInteger) {\n      if (isValidMetricName(counter, this.name)) {\n        this.counters[counter] = convertMetricValueToInteger(numAsInteger !== null && numAsInteger !== void 0 ? numAsInteger : 0);\n      } else {\n        throw ERROR_FACTORY.create(\"invalid custom metric name\" /* INVALID_CUSTOM_METRIC_NAME */, {\n          customMetricName: counter\n        });\n      }\n    }\n    /**\r\n     * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n     * not exist will return zero.\r\n     * @param counter\r\n     */\n  }, {\n    key: \"getMetric\",\n    value: function getMetric(counter) {\n      return this.counters[counter] || 0;\n    }\n    /**\r\n     * Sets a custom attribute of a trace to a certain value.\r\n     * @param attr\r\n     * @param value\r\n     */\n  }, {\n    key: \"putAttribute\",\n    value: function putAttribute(attr, value) {\n      var isValidName = isValidCustomAttributeName(attr);\n      var isValidValue = isValidCustomAttributeValue(value);\n      if (isValidName && isValidValue) {\n        this.customAttributes[attr] = value;\n        return;\n      }\n      // Throw appropriate error when the attribute name or value is invalid.\n      if (!isValidName) {\n        throw ERROR_FACTORY.create(\"invalid attribute name\" /* INVALID_ATTRIBUTE_NAME */, {\n          attributeName: attr\n        });\n      }\n      if (!isValidValue) {\n        throw ERROR_FACTORY.create(\"invalid attribute value\" /* INVALID_ATTRIBUTE_VALUE */, {\n          attributeValue: value\n        });\n      }\n    }\n    /**\r\n     * Retrieves the value a custom attribute of a trace is set to.\r\n     * @param attr\r\n     */\n  }, {\n    key: \"getAttribute\",\n    value: function getAttribute(attr) {\n      return this.customAttributes[attr];\n    }\n  }, {\n    key: \"removeAttribute\",\n    value: function removeAttribute(attr) {\n      if (this.customAttributes[attr] === undefined) {\n        return;\n      }\n      delete this.customAttributes[attr];\n    }\n  }, {\n    key: \"getAttributes\",\n    value: function getAttributes() {\n      return Object.assign({}, this.customAttributes);\n    }\n  }, {\n    key: \"setStartTime\",\n    value: function setStartTime(startTime) {\n      this.startTimeUs = startTime;\n    }\n  }, {\n    key: \"setDuration\",\n    value: function setDuration(duration) {\n      this.durationUs = duration;\n    }\n    /**\r\n     * Calculates and assigns the duration and start time of the trace using the measure performance\r\n     * entry.\r\n     */\n  }, {\n    key: \"calculateTraceMetrics\",\n    value: function calculateTraceMetrics() {\n      var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n      var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n      if (perfMeasureEntry) {\n        this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n        this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\n      }\n    }\n    /**\r\n     * @param navigationTimings A single element array which contains the navigationTIming object of\r\n     * the page load\r\n     * @param paintTimings A array which contains paintTiming object of the page load\r\n     * @param firstInputDelay First input delay in millisec\r\n     */\n  }], [{\n    key: \"createOobTrace\",\n    value: function createOobTrace(performanceController, navigationTimings, paintTimings, firstInputDelay) {\n      var route = Api.getInstance().getUrl();\n      if (!route) {\n        return;\n      }\n      var trace = new Trace(performanceController, OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n      var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n      trace.setStartTime(timeOriginUs);\n      // navigationTimings includes only one element.\n      if (navigationTimings && navigationTimings[0]) {\n        trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n        trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\n        trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\n        trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\n      }\n      var FIRST_PAINT = 'first-paint';\n      var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n      if (paintTimings) {\n        var firstPaint = paintTimings.find(function (paintObject) {\n          return paintObject.name === FIRST_PAINT;\n        });\n        if (firstPaint && firstPaint.startTime) {\n          trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\n        }\n        var firstContentfulPaint = paintTimings.find(function (paintObject) {\n          return paintObject.name === FIRST_CONTENTFUL_PAINT;\n        });\n        if (firstContentfulPaint && firstContentfulPaint.startTime) {\n          trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\n        }\n        if (firstInputDelay) {\n          trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\n        }\n      }\n      logTrace(trace);\n    }\n  }, {\n    key: \"createUserTimingTrace\",\n    value: function createUserTimingTrace(performanceController, measureName) {\n      var trace = new Trace(performanceController, measureName, false, measureName);\n      logTrace(trace);\n    }\n  }]);\n  return Trace;\n}(); /**\r\n      * @license\r\n      * Copyright 2020 Google LLC\r\n      *\r\n      * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n      * you may not use this file except in compliance with the License.\r\n      * You may obtain a copy of the License at\r\n      *\r\n      *   http://www.apache.org/licenses/LICENSE-2.0\r\n      *\r\n      * Unless required by applicable law or agreed to in writing, software\r\n      * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n      * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n      * See the License for the specific language governing permissions and\r\n      * limitations under the License.\r\n      */\nfunction createNetworkRequestEntry(performanceController, entry) {\n  var performanceEntry = entry;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  var timeOrigin = Api.getInstance().getTimeOrigin();\n  var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\n  var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;\n  var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000);\n  // Remove the query params from logged network request url.\n  var url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  var networkRequest = {\n    performanceController: performanceController,\n    url: url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs: startTimeUs,\n    timeToResponseInitiatedUs: timeToResponseInitiatedUs,\n    timeToResponseCompletedUs: timeToResponseCompletedUs\n  };\n  logNetworkRequest(networkRequest);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar FID_WAIT_TIME_MS = 5000;\nfunction setupOobResources(performanceController) {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(function () {\n    return setupOobTraces(performanceController);\n  }, 0);\n  setTimeout(function () {\n    return setupNetworkRequests(performanceController);\n  }, 0);\n  setTimeout(function () {\n    return setupUserTimingTraces(performanceController);\n  }, 0);\n}\nfunction setupNetworkRequests(performanceController) {\n  var api = Api.getInstance();\n  var resources = api.getEntriesByType('resource');\n  var _iterator2 = _createForOfIteratorHelper(resources),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var resource = _step2.value;\n      createNetworkRequestEntry(performanceController, resource);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  api.setupObserver('resource', function (entry) {\n    return createNetworkRequestEntry(performanceController, entry);\n  });\n}\nfunction setupOobTraces(performanceController) {\n  var api = Api.getInstance();\n  var navigationTimings = api.getEntriesByType('navigation');\n  var paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var timeoutId = setTimeout(function () {\n      Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay(function (fid) {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(performanceController, navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(performanceController, navigationTimings, paintTimings);\n  }\n}\nfunction setupUserTimingTraces(performanceController) {\n  var api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  var measures = api.getEntriesByType('measure');\n  var _iterator3 = _createForOfIteratorHelper(measures),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var measure = _step3.value;\n      createUserTimingTrace(performanceController, measure);\n    }\n    // Setup an observer to capture the measures from this point on.\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  api.setupObserver('measure', function (entry) {\n    return createUserTimingTrace(performanceController, entry);\n  });\n}\nfunction createUserTimingTrace(performanceController, measure) {\n  var measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {\n    return;\n  }\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar PerformanceController = /*#__PURE__*/function () {\n  function PerformanceController(app, installations) {\n    _classCallCheck(this, PerformanceController);\n    this.app = app;\n    this.installations = installations;\n    this.initialized = false;\n  }\n  /**\r\n   * This method *must* be called internally as part of creating a\r\n   * PerformanceController instance.\r\n   *\r\n   * Currently it's not possible to pass the settings object through the\r\n   * constructor using Components, so this method exists to be called with the\r\n   * desired settings, to ensure nothing is collected without the user's\r\n   * consent.\r\n   */\n  _createClass(PerformanceController, [{\n    key: \"_init\",\n    value: function _init(settings) {\n      var _this = this;\n      if (this.initialized) {\n        return;\n      }\n      if ((settings === null || settings === void 0 ? void 0 : settings.dataCollectionEnabled) !== undefined) {\n        this.dataCollectionEnabled = settings.dataCollectionEnabled;\n      }\n      if ((settings === null || settings === void 0 ? void 0 : settings.instrumentationEnabled) !== undefined) {\n        this.instrumentationEnabled = settings.instrumentationEnabled;\n      }\n      if (Api.getInstance().requiredApisAvailable()) {\n        validateIndexedDBOpenable().then(function (isAvailable) {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise(_this).then(function () {\n              return setupOobResources(_this);\n            }, function () {\n              return setupOobResources(_this);\n            });\n            _this.initialized = true;\n          }\n        }).catch(function (error) {\n          consoleLogger.info(\"Environment doesn't support IndexedDB: \".concat(error));\n        });\n      } else {\n        consoleLogger.info('Firebase Performance cannot start if the browser does not support ' + '\"Fetch\" and \"Promise\", or cookies are disabled.');\n      }\n    }\n  }, {\n    key: \"instrumentationEnabled\",\n    get: function get() {\n      return SettingsService.getInstance().instrumentationEnabled;\n    },\n    set: function set(val) {\n      SettingsService.getInstance().instrumentationEnabled = val;\n    }\n  }, {\n    key: \"dataCollectionEnabled\",\n    get: function get() {\n      return SettingsService.getInstance().dataCollectionEnabled;\n    },\n    set: function set(val) {\n      SettingsService.getInstance().dataCollectionEnabled = val;\n    }\n  }]);\n  return PerformanceController;\n}(); /**\r\n      * Firebase Performance Monitoring\r\n      *\r\n      * @packageDocumentation\r\n      */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @public\r\n */\nfunction getPerformance() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getApp();\n  app = getModularInstance(app);\n  var provider = _getProvider(app, 'performance');\n  var perfInstance = provider.getImmediate();\n  return perfInstance;\n}\n/**\r\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\r\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\r\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\r\n * @public\r\n */\nfunction initializePerformance(app, settings) {\n  app = getModularInstance(app);\n  var provider = _getProvider(app, 'performance');\n  // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n  if (provider.isInitialized()) {\n    var existingInstance = provider.getImmediate();\n    var initialSettings = provider.getOptions();\n    if (deepEqual(initialSettings, settings !== null && settings !== void 0 ? settings : {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(\"already initialized\" /* ALREADY_INITIALIZED */);\n    }\n  }\n\n  var perfInstance = provider.initialize({\n    options: settings\n  });\n  return perfInstance;\n}\n/**\r\n * Returns a new `PerformanceTrace` instance.\r\n * @param performance - The {@link FirebasePerformance} instance to use.\r\n * @param name - The name of the trace.\r\n * @public\r\n */\nfunction trace(performance, name) {\n  performance = getModularInstance(performance);\n  return new Trace(performance, name);\n}\nvar factory = function factory(container, _ref) {\n  var settings = _ref.options;\n  // Dependencies\n  var app = container.getProvider('app').getImmediate();\n  var installations = container.getProvider('installations-internal').getImmediate();\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(\"FB not default\" /* FB_NOT_DEFAULT */);\n  }\n\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(\"no window\" /* NO_WINDOW */);\n  }\n\n  setupApi(window);\n  var perfInstance = new PerformanceController(app, installations);\n  perfInstance._init(settings);\n  return perfInstance;\n};\nfunction registerPerformance() {\n  _registerComponent(new Component('performance', factory, \"PUBLIC\" /* PUBLIC */));\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, 'esm2017');\n}\nregisterPerformance();\nexport { getPerformance, initializePerformance, trace };","map":{"version":3,"mappings":"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","names":["SDK_VERSION","version","TRACE_START_MARK_PREFIX","TRACE_STOP_MARK_PREFIX","TRACE_MEASURE_PREFIX","OOB_TRACE_PAGE_LOAD_PREFIX","FIRST_PAINT_COUNTER_NAME","FIRST_CONTENTFUL_PAINT_COUNTER_NAME","FIRST_INPUT_DELAY_COUNTER_NAME","CONFIG_LOCAL_STORAGE_KEY","CONFIG_EXPIRY_LOCAL_STORAGE_KEY","SERVICE","SERVICE_NAME","ERROR_DESCRIPTION_MAP","ERROR_FACTORY","ErrorFactory","consoleLogger","Logger","logLevel","LogLevel","INFO","apiInstance","windowInstance","Api","window","create","performance","PerformanceObserver","windowLocation","location","navigator","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","href","split","name","mark","measureName","mark1","mark2","measure","type","getEntriesByType","getEntriesByName","timeOrigin","timing","navigationStart","fetch","Promise","areCookiesEnabled","info","isIndexedDBAvailable","entryType","callback","observer","list","getEntries","entry","observe","entryTypes","undefined","setupApi","iid","getIidPromise","installationsService","iidPromise","getId","then","iidVal","getIid","getAuthTokenPromise","authTokenPromise","getToken","authTokenVal","part1","part2","sizeDiff","length","resultArray","i","push","charAt","join","settingsServiceInstance","SettingsService","mergeStrings","flTransportEndpointUrl","concat","transportKey","VisibilityState","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","MAX_ATTRIBUTE_NAME_LENGTH","MAX_ATTRIBUTE_VALUE_LENGTH","getServiceWorkerStatus","getInstance","serviceWorker","controller","getVisibilityState","visibilityState","VISIBLE","HIDDEN","UNKNOWN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","isValidCustomAttributeName","matchesReservedPrefix","some","startsWith","prefix","match","isValidCustomAttributeValue","value","getAppId","firebaseApp","appId","options","getProjectId","projectId","getApiKey","apiKey","REMOTE_CONFIG_SDK_VERSION","DEFAULT_CONFIGS","loggingEnabled","FIS_AUTH_PREFIX","performanceController","config","getStoredConfig","processConfig","resolve","getRemoteConfig","storeConfig","expiryString","getItem","configValid","configStringified","configResponse","JSON","parse","_a","setItem","stringify","String","Date","now","configTimeToLive","COULD_NOT_GET_CONFIG_MSG","installations","app","configEndPoint","request","Request","method","headers","Authorization","authToken","body","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","response","ok","json","catch","entries","fpr_enabled","fpr_log_source","logSource","Number","fpr_log_endpoint_url","logEndPointUrl","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","networkRequestsSamplingRate","fpr_vc_trace_sampling_rate","tracesSamplingRate","logTraceAfterSampling","shouldLogAfterSampling","logNetworkAfterSampling","expiry","samplingRate","Math","random","initializationStatus","initializationPromise","getInitializationPromise","initializePerf","isPerfInitialized","getDocumentReadyComplete","getConfig","changeInitializationStatus","readyState","handler","removeEventListener","addEventListener","DEFAULT_SEND_INTERVAL_MS","INITIAL_SEND_TIME_DELAY_MS","DEFAULT_REMAINING_TRIES","MAX_EVENT_COUNT_PER_REQUEST","remainingTries","queue","isTransportSetup","setupTransportService","processQueue","timeOffset","setTimeout","dispatchQueueEvents","staged","splice","log_event","map","source_extension_json_proto3","evt","message","event_time_ms","eventTime","data","request_time_ms","client_info","client_type","js_client_info","log_source","sendEventsToFl","postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","isNaN","max","logResponseDetails","Array","isArray","responseAction","flTransportFullUrl","getFlTransportFullUrl","addToQueue","transportHandler","serializer","logger","sendLog","resource","resourceType","logTrace","trace","settingsService","instrumentationEnabled","isAuto","dataCollectionEnabled","requiredApisAvailable","sendTraceLog","logNetworkRequest","networkRequest","networkRequestUrl","url","logEndpointUrl","flEndpointUrl","serializeNetworkRequest","serializeTrace","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","traceMetric","is_auto","duration_us","durationUs","Object","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","google_app_id","web_app_info","page_url","getUrl","service_worker_status","visibility_state","effective_connection_type","application_process_state","MAX_METRIC_NAME_LENGTH","RESERVED_AUTO_PREFIX","oobMetrics","traceName","indexOf","convertMetricValueToInteger","providedValue","valueAsInteger","floor","Trace","traceMeasureName","traceStartMark","randomId","traceStopMark","traceMeasure","calculateTraceMetrics","state","api","startTime","duration","attributes","metrics","metricName","counter","numAsInteger","putMetric","isValidMetricName","customMetricName","attr","isValidName","isValidValue","attributeName","attributeValue","perfMeasureEntries","perfMeasureEntry","getTimeOrigin","navigationTimings","paintTimings","firstInputDelay","route","timeOriginUs","setStartTime","setDuration","domInteractive","domContentLoadedEventEnd","loadEventEnd","FIRST_PAINT","FIRST_CONTENTFUL_PAINT","firstPaint","find","paintObject","firstContentfulPaint","performanceEntry","responseStart","responseEnd","transferSize","FID_WAIT_TIME_MS","setupOobResources","setupOobTraces","setupNetworkRequests","setupUserTimingTraces","resources","createNetworkRequestEntry","setupObserver","timeoutId","createOobTrace","fid","clearTimeout","measures","createUserTimingTrace","substring","PerformanceController","settings","initialized","validateIndexedDBOpenable","isAvailable","error","val","DEFAULT_ENTRY_NAME","getApp","getModularInstance","provider","_getProvider","perfInstance","getImmediate","isInitialized","existingInstance","initialSettings","getOptions","deepEqual","initialize","factory","container","getProvider","_init","registerPerformance","_registerComponent","Component","registerVersion"],"sources":["../../src/constants.ts","../../src/utils/errors.ts","../../src/utils/console_logger.ts","../../src/services/api_service.ts","../../src/services/iid_service.ts","../../src/utils/string_merger.ts","../../src/services/settings_service.ts","../../src/utils/attributes_utils.ts","../../src/utils/app_utils.ts","../../src/services/remote_config_service.ts","../../src/services/initialization_service.ts","../../src/services/transport_service.ts","../../src/services/perf_logger.ts","../../src/utils/metric_utils.ts","../../src/resources/trace.ts","../../src/resources/network_request.ts","../../src/services/oob_resources_service.ts","../../src/controllers/perf.ts","../../src/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input',\n  ALREADY_INITIALIZED = 'already initialized'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.',\n  [ErrorCode.ALREADY_INITIALIZED]:\n    'initializePerformance() has already been called with ' +\n    'different options. To avoid this error, call initializePerformance() with the ' +\n    'same options as when it was originally called, or call getPerformance() to return the' +\n    ' already initialized instance.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable, areCookiesEnabled } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\n\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay(fn: (fid: number) => void): void };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  readonly onFirstInputDelay?: (fn: (fid: number) => void) => void;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (!fetch || !Promise || !areCookiesEnabled()) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const iidPromise = installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(\n  installationsService: _FirebaseInstallationsInternal\n): Promise<string> {\n  const authTokenPromise = installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if (navigator?.serviceWorker) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\nimport { FirebaseApp } from '@firebase/app';\n\nexport function getAppId(firebaseApp: FirebaseApp): string {\n  const appId = firebaseApp.options?.appId;\n  if (!appId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n  }\n  return appId;\n}\n\nexport function getProjectId(firebaseApp: FirebaseApp): string {\n  const projectId = firebaseApp.options?.projectId;\n  if (!projectId) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n  }\n  return projectId;\n}\n\nexport function getApiKey(firebaseApp: FirebaseApp): string {\n  const apiKey = firebaseApp.options?.apiKey;\n  if (!apiKey) {\n    throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n  }\n  return apiKey;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\nimport { PerformanceController } from '../controllers/perf';\nimport { getProjectId, getApiKey, getAppId } from '../utils/app_utils';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(performanceController, iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  performanceController: PerformanceController,\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise(performanceController.installations)\n    .then(authToken => {\n      const projectId = getProjectId(performanceController.app);\n      const apiKey = getApiKey(performanceController.app);\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${apiKey}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: getAppId(performanceController.app),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(\n  performanceController: PerformanceController\n): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise =\n    initializationPromise || initializePerf(performanceController);\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(\n  performanceController: PerformanceController\n): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise(performanceController.installations))\n    .then(iid => getConfig(performanceController, iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nconst MAX_EVENT_COUNT_PER_REQUEST = 1000;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Extract events up to the maximum cap of single logRequest from top of \"official queue\".\n  // The staged events will be used for current logRequest attempt, remaining events will be kept\n  // for next attempt.\n  const staged = queue.splice(0, MAX_EVENT_COUNT_PER_REQUEST);\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl =\n    SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\nimport { FirebaseApp } from '@firebase/app';\nimport { getAppId } from '../utils/app_utils';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise(trace.performanceController).then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(\n      networkRequest.performanceController.app\n    ),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(trace.performanceController.app),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(firebaseApp: FirebaseApp): ApplicationInfo {\n  return {\n    google_app_id: getAppId(firebaseApp),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '../public_types';\nimport { PerformanceController } from '../controllers/perf';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param performanceController The performance controller running.\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly performanceController: PerformanceController,\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metricName of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metricName]))) {\n          this.counters[metricName] = Math.floor(\n            Number(options.metrics[metricName])\n          );\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger ?? 0);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    performanceController: PerformanceController,\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(\n      performanceController,\n      OOB_TRACE_PAGE_LOAD_PREFIX + route,\n      true\n    );\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(\n    performanceController: PerformanceController,\n    measureName: string\n  ): void {\n    const trace = new Trace(\n      performanceController,\n      measureName,\n      false,\n      measureName\n    );\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\nimport { PerformanceController } from '../controllers/perf';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  performanceController: PerformanceController;\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(\n  performanceController: PerformanceController,\n  entry: PerformanceEntry\n): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    performanceController,\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\nimport { PerformanceController } from '../controllers/perf';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(\n  performanceController: PerformanceController\n): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(performanceController), 0);\n  setTimeout(() => setupNetworkRequests(performanceController), 0);\n  setTimeout(() => setupUserTimingTraces(performanceController), 0);\n}\n\nfunction setupNetworkRequests(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(performanceController, resource);\n  }\n  api.setupObserver('resource', entry =>\n    createNetworkRequestEntry(performanceController, entry)\n  );\n}\n\nfunction setupOobTraces(performanceController: PerformanceController): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(\n        performanceController,\n        navigationTimings,\n        paintTimings\n      );\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(\n          performanceController,\n          navigationTimings,\n          paintTimings,\n          fid\n        );\n      }\n    });\n  } else {\n    Trace.createOobTrace(\n      performanceController,\n      navigationTimings,\n      paintTimings\n    );\n  }\n}\n\nfunction setupUserTimingTraces(\n  performanceController: PerformanceController\n): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(performanceController, measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', entry =>\n    createUserTimingTrace(performanceController, entry)\n  );\n}\n\nfunction createUserTimingTrace(\n  performanceController: PerformanceController,\n  measure: PerformanceEntry\n): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(performanceController, measureName);\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app';\nimport { _FirebaseInstallationsInternal } from '@firebase/installations';\nimport { PerformanceSettings, FirebasePerformance } from '../public_types';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { setupTransportService } from '../services/transport_service';\nimport { consoleLogger } from '../utils/console_logger';\n\nexport class PerformanceController implements FirebasePerformance {\n  private initialized: boolean = false;\n\n  constructor(\n    readonly app: FirebaseApp,\n    readonly installations: _FirebaseInstallationsInternal\n  ) {}\n\n  /**\n   * This method *must* be called internally as part of creating a\n   * PerformanceController instance.\n   *\n   * Currently it's not possible to pass the settings object through the\n   * constructor using Components, so this method exists to be called with the\n   * desired settings, to ensure nothing is collected without the user's\n   * consent.\n   */\n  _init(settings?: PerformanceSettings): void {\n    if (this.initialized) {\n      return;\n    }\n\n    if (settings?.dataCollectionEnabled !== undefined) {\n      this.dataCollectionEnabled = settings.dataCollectionEnabled;\n    }\n    if (settings?.instrumentationEnabled !== undefined) {\n      this.instrumentationEnabled = settings.instrumentationEnabled;\n    }\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise(this).then(\n              () => setupOobResources(this),\n              () => setupOobResources(this)\n            );\n            this.initialized = true;\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    } else {\n      consoleLogger.info(\n        'Firebase Performance cannot start if the browser does not support ' +\n          '\"Fetch\" and \"Promise\", or cookies are disabled.'\n      );\n    }\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * Firebase Performance Monitoring\n *\n * @packageDocumentation\n */\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebasePerformance,\n  PerformanceSettings,\n  PerformanceTrace\n} from './public_types';\nimport { ERROR_FACTORY, ErrorCode } from './utils/errors';\nimport { setupApi } from './services/api_service';\nimport { PerformanceController } from './controllers/perf';\nimport {\n  _registerComponent,\n  _getProvider,\n  registerVersion,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport {\n  InstanceFactory,\n  ComponentContainer,\n  Component,\n  ComponentType\n} from '@firebase/component';\nimport { name, version } from '../package.json';\nimport { Trace } from './resources/trace';\nimport '@firebase/installations';\nimport { deepEqual, getModularInstance } from '@firebase/util';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @public\n */\nexport function getPerformance(\n  app: FirebaseApp = getApp()\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n  const perfInstance = provider.getImmediate() as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a {@link FirebasePerformance} instance for the given app. Can only be called once.\n * @param app - The {@link @firebase/app#FirebaseApp} to use.\n * @param settings - Optional settings for the {@link FirebasePerformance} instance.\n * @public\n */\nexport function initializePerformance(\n  app: FirebaseApp,\n  settings?: PerformanceSettings\n): FirebasePerformance {\n  app = getModularInstance(app);\n  const provider = _getProvider(app, 'performance');\n\n  // throw if an instance was already created.\n  // It could happen if initializePerformance() is called more than once, or getPerformance() is called first.\n  if (provider.isInitialized()) {\n    const existingInstance = provider.getImmediate();\n    const initialSettings = provider.getOptions() as PerformanceSettings;\n    if (deepEqual(initialSettings, settings ?? {})) {\n      return existingInstance;\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.ALREADY_INITIALIZED);\n    }\n  }\n\n  const perfInstance = provider.initialize({\n    options: settings\n  }) as PerformanceController;\n  return perfInstance;\n}\n\n/**\n * Returns a new `PerformanceTrace` instance.\n * @param performance - The {@link FirebasePerformance} instance to use.\n * @param name - The name of the trace.\n * @public\n */\nexport function trace(\n  performance: FirebasePerformance,\n  name: string\n): PerformanceTrace {\n  performance = getModularInstance(performance);\n  return new Trace(performance as PerformanceController, name);\n}\n\nconst factory: InstanceFactory<'performance'> = (\n  container: ComponentContainer,\n  { options: settings }: { options?: PerformanceSettings }\n) => {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const installations = container\n    .getProvider('installations-internal')\n    .getImmediate();\n\n  if (app.name !== DEFAULT_ENTRY_NAME) {\n    throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n  }\n  if (typeof window === 'undefined') {\n    throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n  }\n  setupApi(window);\n  const perfInstance = new PerformanceController(app, installations);\n  perfInstance._init(settings);\n\n  return perfInstance;\n};\n\nfunction registerPerformance(): void {\n  _registerComponent(\n    new Component('performance', factory, ComponentType.PUBLIC)\n  );\n  registerVersion(name, version);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n\nregisterPerformance();\n\nexport { FirebasePerformance, PerformanceSettings, PerformanceTrace };\n"]},"metadata":{},"sourceType":"module"}